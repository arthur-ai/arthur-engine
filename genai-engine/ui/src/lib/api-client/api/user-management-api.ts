/* tslint:disable */
/* eslint-disable */
/**
 * Arthur GenAI Engine
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.79
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateUserRequest } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { PaginationSortMethod } from '../models';
// @ts-ignore
import type { PasswordResetRequest } from '../models';
// @ts-ignore
import type { UserPermissionAction } from '../models';
// @ts-ignore
import type { UserPermissionResource } from '../models';
// @ts-ignore
import type { UserResponse } from '../models';
/**
 * UserManagementApi - axios parameter creator
 * @export
 */
export const UserManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Checks if the current user has the requested permission. Returns 200 status code for authorized or 403 if not.
         * @summary Check User Permission
         * @param {UserPermissionAction} [action] Action to check permissions of.
         * @param {UserPermissionResource} [resource] Resource to check permissions of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUserPermissionUsersPermissionsCheckGet: async (action?: UserPermissionAction, resource?: UserPermissionResource, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/permissions/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }

            if (resource !== undefined) {
                localVarQueryParameter['resource'] = resource;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new user with specific roles. The available roles are TASK-ADMIN and CHAT-USER. The \'temporary\' field is for indicating if the user password needs to be reset at the first login.
         * @summary Create User
         * @param {CreateUserRequest} createUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsersPost: async (createUserRequest: CreateUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserRequest' is not null or undefined
            assertParamExists('createUserUsersPost', 'createUserRequest', createUserRequest)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a user.
         * @summary Delete User
         * @param {string} userId User id, not email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsersUserIdDelete: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUserUsersUserIdDelete', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reset password for user.
         * @summary Reset User Password
         * @param {PasswordResetRequest} passwordResetRequest 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserPasswordUsersUserIdResetPasswordPost: async (passwordResetRequest: PasswordResetRequest, userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordResetRequest' is not null or undefined
            assertParamExists('resetUserPasswordUsersUserIdResetPasswordPost', 'passwordResetRequest', passwordResetRequest)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('resetUserPasswordUsersUserIdResetPasswordPost', 'userId', userId)
            const localVarPath = `/users/{user_id}/reset_password`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordResetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch users.
         * @summary Search Users
         * @param {string | null} [searchString] Substring to match on. Will search first name, last name, email.
         * @param {PaginationSortMethod} [sort] Sort the results (asc/desc)
         * @param {number} [pageSize] Page size. Default is 10. Must be greater than 0 and less than 5000.
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUsersUsersGet: async (searchString?: string | null, sort?: PaginationSortMethod, pageSize?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (searchString !== undefined) {
                localVarQueryParameter['search_string'] = searchString;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserManagementApi - functional programming interface
 * @export
 */
export const UserManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * Checks if the current user has the requested permission. Returns 200 status code for authorized or 403 if not.
         * @summary Check User Permission
         * @param {UserPermissionAction} [action] Action to check permissions of.
         * @param {UserPermissionResource} [resource] Resource to check permissions of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUserPermissionUsersPermissionsCheckGet(action?: UserPermissionAction, resource?: UserPermissionResource, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUserPermissionUsersPermissionsCheckGet(action, resource, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.checkUserPermissionUsersPermissionsCheckGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new user with specific roles. The available roles are TASK-ADMIN and CHAT-USER. The \'temporary\' field is for indicating if the user password needs to be reset at the first login.
         * @summary Create User
         * @param {CreateUserRequest} createUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserUsersPost(createUserRequest: CreateUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserUsersPost(createUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.createUserUsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a user.
         * @summary Delete User
         * @param {string} userId User id, not email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserUsersUserIdDelete(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserUsersUserIdDelete(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.deleteUserUsersUserIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Reset password for user.
         * @summary Reset User Password
         * @param {PasswordResetRequest} passwordResetRequest 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetUserPasswordUsersUserIdResetPasswordPost(passwordResetRequest: PasswordResetRequest, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetUserPasswordUsersUserIdResetPasswordPost(passwordResetRequest, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.resetUserPasswordUsersUserIdResetPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch users.
         * @summary Search Users
         * @param {string | null} [searchString] Substring to match on. Will search first name, last name, email.
         * @param {PaginationSortMethod} [sort] Sort the results (asc/desc)
         * @param {number} [pageSize] Page size. Default is 10. Must be greater than 0 and less than 5000.
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchUsersUsersGet(searchString?: string | null, sort?: PaginationSortMethod, pageSize?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchUsersUsersGet(searchString, sort, pageSize, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserManagementApi.searchUsersUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserManagementApi - factory interface
 * @export
 */
export const UserManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserManagementApiFp(configuration)
    return {
        /**
         * Checks if the current user has the requested permission. Returns 200 status code for authorized or 403 if not.
         * @summary Check User Permission
         * @param {UserManagementApiCheckUserPermissionUsersPermissionsCheckGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUserPermissionUsersPermissionsCheckGet(requestParameters: UserManagementApiCheckUserPermissionUsersPermissionsCheckGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.checkUserPermissionUsersPermissionsCheckGet(requestParameters.action, requestParameters.resource, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new user with specific roles. The available roles are TASK-ADMIN and CHAT-USER. The \'temporary\' field is for indicating if the user password needs to be reset at the first login.
         * @summary Create User
         * @param {UserManagementApiCreateUserUsersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsersPost(requestParameters: UserManagementApiCreateUserUsersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.createUserUsersPost(requestParameters.createUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a user.
         * @summary Delete User
         * @param {UserManagementApiDeleteUserUsersUserIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsersUserIdDelete(requestParameters: UserManagementApiDeleteUserUsersUserIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteUserUsersUserIdDelete(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Reset password for user.
         * @summary Reset User Password
         * @param {UserManagementApiResetUserPasswordUsersUserIdResetPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetUserPasswordUsersUserIdResetPasswordPost(requestParameters: UserManagementApiResetUserPasswordUsersUserIdResetPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.resetUserPasswordUsersUserIdResetPasswordPost(requestParameters.passwordResetRequest, requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch users.
         * @summary Search Users
         * @param {UserManagementApiSearchUsersUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUsersUsersGet(requestParameters: UserManagementApiSearchUsersUsersGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>> {
            return localVarFp.searchUsersUsersGet(requestParameters.searchString, requestParameters.sort, requestParameters.pageSize, requestParameters.page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserManagementApi - interface
 * @export
 * @interface UserManagementApi
 */
export interface UserManagementApiInterface {
    /**
     * Checks if the current user has the requested permission. Returns 200 status code for authorized or 403 if not.
     * @summary Check User Permission
     * @param {UserManagementApiCheckUserPermissionUsersPermissionsCheckGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiInterface
     */
    checkUserPermissionUsersPermissionsCheckGet(requestParameters?: UserManagementApiCheckUserPermissionUsersPermissionsCheckGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Creates a new user with specific roles. The available roles are TASK-ADMIN and CHAT-USER. The \'temporary\' field is for indicating if the user password needs to be reset at the first login.
     * @summary Create User
     * @param {UserManagementApiCreateUserUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiInterface
     */
    createUserUsersPost(requestParameters: UserManagementApiCreateUserUsersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Delete a user.
     * @summary Delete User
     * @param {UserManagementApiDeleteUserUsersUserIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiInterface
     */
    deleteUserUsersUserIdDelete(requestParameters: UserManagementApiDeleteUserUsersUserIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Reset password for user.
     * @summary Reset User Password
     * @param {UserManagementApiResetUserPasswordUsersUserIdResetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiInterface
     */
    resetUserPasswordUsersUserIdResetPasswordPost(requestParameters: UserManagementApiResetUserPasswordUsersUserIdResetPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Fetch users.
     * @summary Search Users
     * @param {UserManagementApiSearchUsersUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiInterface
     */
    searchUsersUsersGet(requestParameters?: UserManagementApiSearchUsersUsersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserResponse>>;

}

/**
 * Request parameters for checkUserPermissionUsersPermissionsCheckGet operation in UserManagementApi.
 * @export
 * @interface UserManagementApiCheckUserPermissionUsersPermissionsCheckGetRequest
 */
export interface UserManagementApiCheckUserPermissionUsersPermissionsCheckGetRequest {
    /**
     * Action to check permissions of.
     * @type {UserPermissionAction}
     * @memberof UserManagementApiCheckUserPermissionUsersPermissionsCheckGet
     */
    readonly action?: UserPermissionAction

    /**
     * Resource to check permissions of.
     * @type {UserPermissionResource}
     * @memberof UserManagementApiCheckUserPermissionUsersPermissionsCheckGet
     */
    readonly resource?: UserPermissionResource
}

/**
 * Request parameters for createUserUsersPost operation in UserManagementApi.
 * @export
 * @interface UserManagementApiCreateUserUsersPostRequest
 */
export interface UserManagementApiCreateUserUsersPostRequest {
    /**
     * 
     * @type {CreateUserRequest}
     * @memberof UserManagementApiCreateUserUsersPost
     */
    readonly createUserRequest: CreateUserRequest
}

/**
 * Request parameters for deleteUserUsersUserIdDelete operation in UserManagementApi.
 * @export
 * @interface UserManagementApiDeleteUserUsersUserIdDeleteRequest
 */
export interface UserManagementApiDeleteUserUsersUserIdDeleteRequest {
    /**
     * User id, not email.
     * @type {string}
     * @memberof UserManagementApiDeleteUserUsersUserIdDelete
     */
    readonly userId: string
}

/**
 * Request parameters for resetUserPasswordUsersUserIdResetPasswordPost operation in UserManagementApi.
 * @export
 * @interface UserManagementApiResetUserPasswordUsersUserIdResetPasswordPostRequest
 */
export interface UserManagementApiResetUserPasswordUsersUserIdResetPasswordPostRequest {
    /**
     * 
     * @type {PasswordResetRequest}
     * @memberof UserManagementApiResetUserPasswordUsersUserIdResetPasswordPost
     */
    readonly passwordResetRequest: PasswordResetRequest

    /**
     * 
     * @type {string}
     * @memberof UserManagementApiResetUserPasswordUsersUserIdResetPasswordPost
     */
    readonly userId: string
}

/**
 * Request parameters for searchUsersUsersGet operation in UserManagementApi.
 * @export
 * @interface UserManagementApiSearchUsersUsersGetRequest
 */
export interface UserManagementApiSearchUsersUsersGetRequest {
    /**
     * Substring to match on. Will search first name, last name, email.
     * @type {string}
     * @memberof UserManagementApiSearchUsersUsersGet
     */
    readonly searchString?: string | null

    /**
     * Sort the results (asc/desc)
     * @type {PaginationSortMethod}
     * @memberof UserManagementApiSearchUsersUsersGet
     */
    readonly sort?: PaginationSortMethod

    /**
     * Page size. Default is 10. Must be greater than 0 and less than 5000.
     * @type {number}
     * @memberof UserManagementApiSearchUsersUsersGet
     */
    readonly pageSize?: number

    /**
     * Page number
     * @type {number}
     * @memberof UserManagementApiSearchUsersUsersGet
     */
    readonly page?: number
}

/**
 * UserManagementApi - object-oriented interface
 * @export
 * @class UserManagementApi
 * @extends {BaseAPI}
 */
export class UserManagementApi extends BaseAPI implements UserManagementApiInterface {
    /**
     * Checks if the current user has the requested permission. Returns 200 status code for authorized or 403 if not.
     * @summary Check User Permission
     * @param {UserManagementApiCheckUserPermissionUsersPermissionsCheckGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public checkUserPermissionUsersPermissionsCheckGet(requestParameters: UserManagementApiCheckUserPermissionUsersPermissionsCheckGetRequest = {}, options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).checkUserPermissionUsersPermissionsCheckGet(requestParameters.action, requestParameters.resource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new user with specific roles. The available roles are TASK-ADMIN and CHAT-USER. The \'temporary\' field is for indicating if the user password needs to be reset at the first login.
     * @summary Create User
     * @param {UserManagementApiCreateUserUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public createUserUsersPost(requestParameters: UserManagementApiCreateUserUsersPostRequest, options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).createUserUsersPost(requestParameters.createUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a user.
     * @summary Delete User
     * @param {UserManagementApiDeleteUserUsersUserIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public deleteUserUsersUserIdDelete(requestParameters: UserManagementApiDeleteUserUsersUserIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).deleteUserUsersUserIdDelete(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reset password for user.
     * @summary Reset User Password
     * @param {UserManagementApiResetUserPasswordUsersUserIdResetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public resetUserPasswordUsersUserIdResetPasswordPost(requestParameters: UserManagementApiResetUserPasswordUsersUserIdResetPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).resetUserPasswordUsersUserIdResetPasswordPost(requestParameters.passwordResetRequest, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch users.
     * @summary Search Users
     * @param {UserManagementApiSearchUsersUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public searchUsersUsersGet(requestParameters: UserManagementApiSearchUsersUsersGetRequest = {}, options?: RawAxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).searchUsersUsersGet(requestParameters.searchString, requestParameters.sort, requestParameters.pageSize, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
}

