/* tslint:disable */
/* eslint-disable */
/**
 * Arthur GenAI Engine
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.79
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { PromptValidationRequest } from '../models';
// @ts-ignore
import type { ResponseValidationRequest } from '../models';
// @ts-ignore
import type { ValidationResult } from '../models';
/**
 * DefaultValidationApi - axios parameter creator
 * @export
 */
export const DefaultValidationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * [Deprecated] Validate a non-task related prompt based on the configured default rules.
         * @summary Default Validate Prompt
         * @param {PromptValidationRequest} promptValidationRequest 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        defaultValidatePromptApiV2ValidatePromptPost: async (promptValidationRequest: PromptValidationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promptValidationRequest' is not null or undefined
            assertParamExists('defaultValidatePromptApiV2ValidatePromptPost', 'promptValidationRequest', promptValidationRequest)
            const localVarPath = `/api/v2/validate_prompt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(promptValidationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Deprecated] Validate a non-task related generated response based on the configured default rules. Inference ID corresponds to the previously validated associated prompt’s inference ID. Must provide context if a Hallucination Rule is an enabled default rule.
         * @summary Default Validate Response
         * @param {ResponseValidationRequest} responseValidationRequest 
         * @param {string} inferenceId 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        defaultValidateResponseApiV2ValidateResponseInferenceIdPost: async (responseValidationRequest: ResponseValidationRequest, inferenceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'responseValidationRequest' is not null or undefined
            assertParamExists('defaultValidateResponseApiV2ValidateResponseInferenceIdPost', 'responseValidationRequest', responseValidationRequest)
            // verify required parameter 'inferenceId' is not null or undefined
            assertParamExists('defaultValidateResponseApiV2ValidateResponseInferenceIdPost', 'inferenceId', inferenceId)
            const localVarPath = `/api/v2/validate_response/{inference_id}`
                .replace(`{${"inference_id"}}`, encodeURIComponent(String(inferenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(responseValidationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultValidationApi - functional programming interface
 * @export
 */
export const DefaultValidationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultValidationApiAxiosParamCreator(configuration)
    return {
        /**
         * [Deprecated] Validate a non-task related prompt based on the configured default rules.
         * @summary Default Validate Prompt
         * @param {PromptValidationRequest} promptValidationRequest 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async defaultValidatePromptApiV2ValidatePromptPost(promptValidationRequest: PromptValidationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.defaultValidatePromptApiV2ValidatePromptPost(promptValidationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultValidationApi.defaultValidatePromptApiV2ValidatePromptPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * [Deprecated] Validate a non-task related generated response based on the configured default rules. Inference ID corresponds to the previously validated associated prompt’s inference ID. Must provide context if a Hallucination Rule is an enabled default rule.
         * @summary Default Validate Response
         * @param {ResponseValidationRequest} responseValidationRequest 
         * @param {string} inferenceId 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async defaultValidateResponseApiV2ValidateResponseInferenceIdPost(responseValidationRequest: ResponseValidationRequest, inferenceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.defaultValidateResponseApiV2ValidateResponseInferenceIdPost(responseValidationRequest, inferenceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultValidationApi.defaultValidateResponseApiV2ValidateResponseInferenceIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultValidationApi - factory interface
 * @export
 */
export const DefaultValidationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultValidationApiFp(configuration)
    return {
        /**
         * [Deprecated] Validate a non-task related prompt based on the configured default rules.
         * @summary Default Validate Prompt
         * @param {DefaultValidationApiDefaultValidatePromptApiV2ValidatePromptPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        defaultValidatePromptApiV2ValidatePromptPost(requestParameters: DefaultValidationApiDefaultValidatePromptApiV2ValidatePromptPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ValidationResult> {
            return localVarFp.defaultValidatePromptApiV2ValidatePromptPost(requestParameters.promptValidationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * [Deprecated] Validate a non-task related generated response based on the configured default rules. Inference ID corresponds to the previously validated associated prompt’s inference ID. Must provide context if a Hallucination Rule is an enabled default rule.
         * @summary Default Validate Response
         * @param {DefaultValidationApiDefaultValidateResponseApiV2ValidateResponseInferenceIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        defaultValidateResponseApiV2ValidateResponseInferenceIdPost(requestParameters: DefaultValidationApiDefaultValidateResponseApiV2ValidateResponseInferenceIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ValidationResult> {
            return localVarFp.defaultValidateResponseApiV2ValidateResponseInferenceIdPost(requestParameters.responseValidationRequest, requestParameters.inferenceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultValidationApi - interface
 * @export
 * @interface DefaultValidationApi
 */
export interface DefaultValidationApiInterface {
    /**
     * [Deprecated] Validate a non-task related prompt based on the configured default rules.
     * @summary Default Validate Prompt
     * @param {DefaultValidationApiDefaultValidatePromptApiV2ValidatePromptPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultValidationApiInterface
     */
    defaultValidatePromptApiV2ValidatePromptPost(requestParameters: DefaultValidationApiDefaultValidatePromptApiV2ValidatePromptPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ValidationResult>;

    /**
     * [Deprecated] Validate a non-task related generated response based on the configured default rules. Inference ID corresponds to the previously validated associated prompt’s inference ID. Must provide context if a Hallucination Rule is an enabled default rule.
     * @summary Default Validate Response
     * @param {DefaultValidationApiDefaultValidateResponseApiV2ValidateResponseInferenceIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultValidationApiInterface
     */
    defaultValidateResponseApiV2ValidateResponseInferenceIdPost(requestParameters: DefaultValidationApiDefaultValidateResponseApiV2ValidateResponseInferenceIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ValidationResult>;

}

/**
 * Request parameters for defaultValidatePromptApiV2ValidatePromptPost operation in DefaultValidationApi.
 * @export
 * @interface DefaultValidationApiDefaultValidatePromptApiV2ValidatePromptPostRequest
 */
export interface DefaultValidationApiDefaultValidatePromptApiV2ValidatePromptPostRequest {
    /**
     * 
     * @type {PromptValidationRequest}
     * @memberof DefaultValidationApiDefaultValidatePromptApiV2ValidatePromptPost
     */
    readonly promptValidationRequest: PromptValidationRequest
}

/**
 * Request parameters for defaultValidateResponseApiV2ValidateResponseInferenceIdPost operation in DefaultValidationApi.
 * @export
 * @interface DefaultValidationApiDefaultValidateResponseApiV2ValidateResponseInferenceIdPostRequest
 */
export interface DefaultValidationApiDefaultValidateResponseApiV2ValidateResponseInferenceIdPostRequest {
    /**
     * 
     * @type {ResponseValidationRequest}
     * @memberof DefaultValidationApiDefaultValidateResponseApiV2ValidateResponseInferenceIdPost
     */
    readonly responseValidationRequest: ResponseValidationRequest

    /**
     * 
     * @type {string}
     * @memberof DefaultValidationApiDefaultValidateResponseApiV2ValidateResponseInferenceIdPost
     */
    readonly inferenceId: string
}

/**
 * DefaultValidationApi - object-oriented interface
 * @export
 * @class DefaultValidationApi
 * @extends {BaseAPI}
 */
export class DefaultValidationApi extends BaseAPI implements DefaultValidationApiInterface {
    /**
     * [Deprecated] Validate a non-task related prompt based on the configured default rules.
     * @summary Default Validate Prompt
     * @param {DefaultValidationApiDefaultValidatePromptApiV2ValidatePromptPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultValidationApi
     */
    public defaultValidatePromptApiV2ValidatePromptPost(requestParameters: DefaultValidationApiDefaultValidatePromptApiV2ValidatePromptPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultValidationApiFp(this.configuration).defaultValidatePromptApiV2ValidatePromptPost(requestParameters.promptValidationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [Deprecated] Validate a non-task related generated response based on the configured default rules. Inference ID corresponds to the previously validated associated prompt’s inference ID. Must provide context if a Hallucination Rule is an enabled default rule.
     * @summary Default Validate Response
     * @param {DefaultValidationApiDefaultValidateResponseApiV2ValidateResponseInferenceIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultValidationApi
     */
    public defaultValidateResponseApiV2ValidateResponseInferenceIdPost(requestParameters: DefaultValidationApiDefaultValidateResponseApiV2ValidateResponseInferenceIdPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultValidationApiFp(this.configuration).defaultValidateResponseApiV2ValidateResponseInferenceIdPost(requestParameters.responseValidationRequest, requestParameters.inferenceId, options).then((request) => request(this.axios, this.basePath));
    }
}

