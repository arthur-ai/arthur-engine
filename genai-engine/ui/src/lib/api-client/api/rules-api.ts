/* tslint:disable */
/* eslint-disable */
/**
 * Arthur GenAI Engine
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.79
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { NewRuleRequest } from '../models';
// @ts-ignore
import type { PaginationSortMethod } from '../models';
// @ts-ignore
import type { RuleResponse } from '../models';
// @ts-ignore
import type { SearchRulesRequest } from '../models';
// @ts-ignore
import type { SearchRulesResponse } from '../models';
/**
 * RulesApi - axios parameter creator
 * @export
 */
export const RulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Archive existing default rule.
         * @summary Archive Default Rule
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveDefaultRuleApiV2DefaultRulesRuleIdDelete: async (ruleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleId' is not null or undefined
            assertParamExists('archiveDefaultRuleApiV2DefaultRulesRuleIdDelete', 'ruleId', ruleId)
            const localVarPath = `/api/v2/default_rules/{rule_id}`
                .replace(`{${"rule_id"}}`, encodeURIComponent(String(ruleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a default rule. Default rules are applied universally across existing tasks, subsequently created new tasks, and any non-task related requests. Once a rule is created, it is immutable. Available rules are \'KeywordRule\', \'ModelHallucinationRuleV2\', \'ModelSensitiveDataRule\', \'PIIDataRule\', \'PromptInjectionRule\', \'RegexRule\', \'ToxicityRule\'. Note: The rules are cached by the validation endpoints for 60 seconds.
         * @summary Create Default Rule
         * @param {NewRuleRequest} [newRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDefaultRuleApiV2DefaultRulesPost: async (newRuleRequest?: NewRuleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/default_rules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newRuleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get default rules.
         * @summary Get Default Rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultRulesApiV2DefaultRulesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/default_rules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search default and/or task rules.
         * @summary Search Rules
         * @param {SearchRulesRequest} searchRulesRequest 
         * @param {PaginationSortMethod} [sort] Sort the results (asc/desc)
         * @param {number} [pageSize] Page size. Default is 10. Must be greater than 0 and less than 5000.
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRulesApiV2RulesSearchPost: async (searchRulesRequest: SearchRulesRequest, sort?: PaginationSortMethod, pageSize?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchRulesRequest' is not null or undefined
            assertParamExists('searchRulesApiV2RulesSearchPost', 'searchRulesRequest', searchRulesRequest)
            const localVarPath = `/api/v2/rules/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchRulesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RulesApi - functional programming interface
 * @export
 */
export const RulesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RulesApiAxiosParamCreator(configuration)
    return {
        /**
         * Archive existing default rule.
         * @summary Archive Default Rule
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveDefaultRuleApiV2DefaultRulesRuleIdDelete(ruleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveDefaultRuleApiV2DefaultRulesRuleIdDelete(ruleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RulesApi.archiveDefaultRuleApiV2DefaultRulesRuleIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a default rule. Default rules are applied universally across existing tasks, subsequently created new tasks, and any non-task related requests. Once a rule is created, it is immutable. Available rules are \'KeywordRule\', \'ModelHallucinationRuleV2\', \'ModelSensitiveDataRule\', \'PIIDataRule\', \'PromptInjectionRule\', \'RegexRule\', \'ToxicityRule\'. Note: The rules are cached by the validation endpoints for 60 seconds.
         * @summary Create Default Rule
         * @param {NewRuleRequest} [newRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDefaultRuleApiV2DefaultRulesPost(newRuleRequest?: NewRuleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDefaultRuleApiV2DefaultRulesPost(newRuleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RulesApi.createDefaultRuleApiV2DefaultRulesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get default rules.
         * @summary Get Default Rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefaultRulesApiV2DefaultRulesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RuleResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefaultRulesApiV2DefaultRulesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RulesApi.getDefaultRulesApiV2DefaultRulesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Search default and/or task rules.
         * @summary Search Rules
         * @param {SearchRulesRequest} searchRulesRequest 
         * @param {PaginationSortMethod} [sort] Sort the results (asc/desc)
         * @param {number} [pageSize] Page size. Default is 10. Must be greater than 0 and less than 5000.
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchRulesApiV2RulesSearchPost(searchRulesRequest: SearchRulesRequest, sort?: PaginationSortMethod, pageSize?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchRulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchRulesApiV2RulesSearchPost(searchRulesRequest, sort, pageSize, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RulesApi.searchRulesApiV2RulesSearchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RulesApi - factory interface
 * @export
 */
export const RulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RulesApiFp(configuration)
    return {
        /**
         * Archive existing default rule.
         * @summary Archive Default Rule
         * @param {RulesApiArchiveDefaultRuleApiV2DefaultRulesRuleIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveDefaultRuleApiV2DefaultRulesRuleIdDelete(requestParameters: RulesApiArchiveDefaultRuleApiV2DefaultRulesRuleIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.archiveDefaultRuleApiV2DefaultRulesRuleIdDelete(requestParameters.ruleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a default rule. Default rules are applied universally across existing tasks, subsequently created new tasks, and any non-task related requests. Once a rule is created, it is immutable. Available rules are \'KeywordRule\', \'ModelHallucinationRuleV2\', \'ModelSensitiveDataRule\', \'PIIDataRule\', \'PromptInjectionRule\', \'RegexRule\', \'ToxicityRule\'. Note: The rules are cached by the validation endpoints for 60 seconds.
         * @summary Create Default Rule
         * @param {RulesApiCreateDefaultRuleApiV2DefaultRulesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDefaultRuleApiV2DefaultRulesPost(requestParameters: RulesApiCreateDefaultRuleApiV2DefaultRulesPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<RuleResponse> {
            return localVarFp.createDefaultRuleApiV2DefaultRulesPost(requestParameters.newRuleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get default rules.
         * @summary Get Default Rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultRulesApiV2DefaultRulesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<RuleResponse>> {
            return localVarFp.getDefaultRulesApiV2DefaultRulesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Search default and/or task rules.
         * @summary Search Rules
         * @param {RulesApiSearchRulesApiV2RulesSearchPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRulesApiV2RulesSearchPost(requestParameters: RulesApiSearchRulesApiV2RulesSearchPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SearchRulesResponse> {
            return localVarFp.searchRulesApiV2RulesSearchPost(requestParameters.searchRulesRequest, requestParameters.sort, requestParameters.pageSize, requestParameters.page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RulesApi - interface
 * @export
 * @interface RulesApi
 */
export interface RulesApiInterface {
    /**
     * Archive existing default rule.
     * @summary Archive Default Rule
     * @param {RulesApiArchiveDefaultRuleApiV2DefaultRulesRuleIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    archiveDefaultRuleApiV2DefaultRulesRuleIdDelete(requestParameters: RulesApiArchiveDefaultRuleApiV2DefaultRulesRuleIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Create a default rule. Default rules are applied universally across existing tasks, subsequently created new tasks, and any non-task related requests. Once a rule is created, it is immutable. Available rules are \'KeywordRule\', \'ModelHallucinationRuleV2\', \'ModelSensitiveDataRule\', \'PIIDataRule\', \'PromptInjectionRule\', \'RegexRule\', \'ToxicityRule\'. Note: The rules are cached by the validation endpoints for 60 seconds.
     * @summary Create Default Rule
     * @param {RulesApiCreateDefaultRuleApiV2DefaultRulesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    createDefaultRuleApiV2DefaultRulesPost(requestParameters?: RulesApiCreateDefaultRuleApiV2DefaultRulesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<RuleResponse>;

    /**
     * Get default rules.
     * @summary Get Default Rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    getDefaultRulesApiV2DefaultRulesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<RuleResponse>>;

    /**
     * Search default and/or task rules.
     * @summary Search Rules
     * @param {RulesApiSearchRulesApiV2RulesSearchPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApiInterface
     */
    searchRulesApiV2RulesSearchPost(requestParameters: RulesApiSearchRulesApiV2RulesSearchPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SearchRulesResponse>;

}

/**
 * Request parameters for archiveDefaultRuleApiV2DefaultRulesRuleIdDelete operation in RulesApi.
 * @export
 * @interface RulesApiArchiveDefaultRuleApiV2DefaultRulesRuleIdDeleteRequest
 */
export interface RulesApiArchiveDefaultRuleApiV2DefaultRulesRuleIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof RulesApiArchiveDefaultRuleApiV2DefaultRulesRuleIdDelete
     */
    readonly ruleId: string
}

/**
 * Request parameters for createDefaultRuleApiV2DefaultRulesPost operation in RulesApi.
 * @export
 * @interface RulesApiCreateDefaultRuleApiV2DefaultRulesPostRequest
 */
export interface RulesApiCreateDefaultRuleApiV2DefaultRulesPostRequest {
    /**
     * 
     * @type {NewRuleRequest}
     * @memberof RulesApiCreateDefaultRuleApiV2DefaultRulesPost
     */
    readonly newRuleRequest?: NewRuleRequest
}

/**
 * Request parameters for searchRulesApiV2RulesSearchPost operation in RulesApi.
 * @export
 * @interface RulesApiSearchRulesApiV2RulesSearchPostRequest
 */
export interface RulesApiSearchRulesApiV2RulesSearchPostRequest {
    /**
     * 
     * @type {SearchRulesRequest}
     * @memberof RulesApiSearchRulesApiV2RulesSearchPost
     */
    readonly searchRulesRequest: SearchRulesRequest

    /**
     * Sort the results (asc/desc)
     * @type {PaginationSortMethod}
     * @memberof RulesApiSearchRulesApiV2RulesSearchPost
     */
    readonly sort?: PaginationSortMethod

    /**
     * Page size. Default is 10. Must be greater than 0 and less than 5000.
     * @type {number}
     * @memberof RulesApiSearchRulesApiV2RulesSearchPost
     */
    readonly pageSize?: number

    /**
     * Page number
     * @type {number}
     * @memberof RulesApiSearchRulesApiV2RulesSearchPost
     */
    readonly page?: number
}

/**
 * RulesApi - object-oriented interface
 * @export
 * @class RulesApi
 * @extends {BaseAPI}
 */
export class RulesApi extends BaseAPI implements RulesApiInterface {
    /**
     * Archive existing default rule.
     * @summary Archive Default Rule
     * @param {RulesApiArchiveDefaultRuleApiV2DefaultRulesRuleIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    public archiveDefaultRuleApiV2DefaultRulesRuleIdDelete(requestParameters: RulesApiArchiveDefaultRuleApiV2DefaultRulesRuleIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return RulesApiFp(this.configuration).archiveDefaultRuleApiV2DefaultRulesRuleIdDelete(requestParameters.ruleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a default rule. Default rules are applied universally across existing tasks, subsequently created new tasks, and any non-task related requests. Once a rule is created, it is immutable. Available rules are \'KeywordRule\', \'ModelHallucinationRuleV2\', \'ModelSensitiveDataRule\', \'PIIDataRule\', \'PromptInjectionRule\', \'RegexRule\', \'ToxicityRule\'. Note: The rules are cached by the validation endpoints for 60 seconds.
     * @summary Create Default Rule
     * @param {RulesApiCreateDefaultRuleApiV2DefaultRulesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    public createDefaultRuleApiV2DefaultRulesPost(requestParameters: RulesApiCreateDefaultRuleApiV2DefaultRulesPostRequest = {}, options?: RawAxiosRequestConfig) {
        return RulesApiFp(this.configuration).createDefaultRuleApiV2DefaultRulesPost(requestParameters.newRuleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get default rules.
     * @summary Get Default Rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    public getDefaultRulesApiV2DefaultRulesGet(options?: RawAxiosRequestConfig) {
        return RulesApiFp(this.configuration).getDefaultRulesApiV2DefaultRulesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search default and/or task rules.
     * @summary Search Rules
     * @param {RulesApiSearchRulesApiV2RulesSearchPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    public searchRulesApiV2RulesSearchPost(requestParameters: RulesApiSearchRulesApiV2RulesSearchPostRequest, options?: RawAxiosRequestConfig) {
        return RulesApiFp(this.configuration).searchRulesApiV2RulesSearchPost(requestParameters.searchRulesRequest, requestParameters.sort, requestParameters.pageSize, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
}

