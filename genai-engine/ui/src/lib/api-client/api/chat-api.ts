/* tslint:disable */
/* eslint-disable */
/**
 * Arthur GenAI Engine
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.79
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ChatDefaultTaskRequest } from '../models';
// @ts-ignore
import type { ChatDefaultTaskResponse } from '../models';
// @ts-ignore
import type { ChatDocumentContext } from '../models';
// @ts-ignore
import type { ChatRequest } from '../models';
// @ts-ignore
import type { ChatResponse } from '../models';
// @ts-ignore
import type { ExternalDocument } from '../models';
// @ts-ignore
import type { FeedbackRequest } from '../models';
// @ts-ignore
import type { FileUploadResult } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { PageListConversationBaseResponse } from '../models';
/**
 * ChatApi - axios parameter creator
 * @export
 */
export const ChatApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Chat request for Arthur Chat
         * @summary Chat
         * @param {ChatRequest} chatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatRequest: async (chatRequest: ChatRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatRequest' is not null or undefined
            assertParamExists('chatRequest', 'chatRequest', chatRequest)
            const localVarPath = `/api/chat/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a file by ID. This action cannot be undone.
         * @summary Delete File
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFileApiChatFilesFileIdDelete: async (fileId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('deleteFileApiChatFilesFileIdDelete', 'fileId', fileId)
            const localVarPath = `/api/chat/files/{file_id}`
                .replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of conversation IDs.
         * @summary Get Conversations
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationsApiChatConversationsGet: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/chat/conversations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the default task for Arthur Chat.
         * @summary Get Default Task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultTaskApiChatDefaultTaskGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/chat/default_task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List uploaded files. Only files that are global or owned by the caller are returned.
         * @summary Get Files
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilesApiChatFilesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/chat/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get document context used for a past inference ID.
         * @summary Get Inference Document Context
         * @param {string} inferenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInferenceDocumentContextApiChatContextInferenceIdGet: async (inferenceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inferenceId' is not null or undefined
            assertParamExists('getInferenceDocumentContextApiChatContextInferenceIdGet', 'inferenceId', inferenceId)
            const localVarPath = `/api/chat/context/{inference_id}`
                .replace(`{${"inference_id"}}`, encodeURIComponent(String(inferenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post feedback for Arthur Chat.
         * @summary Post Chat Feedback
         * @param {FeedbackRequest} feedbackRequest 
         * @param {string} inferenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postChatFeedbackApiChatFeedbackInferenceIdPost: async (feedbackRequest: FeedbackRequest, inferenceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedbackRequest' is not null or undefined
            assertParamExists('postChatFeedbackApiChatFeedbackInferenceIdPost', 'feedbackRequest', feedbackRequest)
            // verify required parameter 'inferenceId' is not null or undefined
            assertParamExists('postChatFeedbackApiChatFeedbackInferenceIdPost', 'inferenceId', inferenceId)
            const localVarPath = `/api/chat/feedback/{inference_id}`
                .replace(`{${"inference_id"}}`, encodeURIComponent(String(inferenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(feedbackRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post feedback for Arthur Chat.
         * @summary Post Chat Feedback
         * @param {FeedbackRequest} feedbackRequest 
         * @param {string} inferenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postChatFeedbackApiChatFeedbackInferenceIdPost_1: async (feedbackRequest: FeedbackRequest, inferenceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedbackRequest' is not null or undefined
            assertParamExists('postChatFeedbackApiChatFeedbackInferenceIdPost_1', 'feedbackRequest', feedbackRequest)
            // verify required parameter 'inferenceId' is not null or undefined
            assertParamExists('postChatFeedbackApiChatFeedbackInferenceIdPost_1', 'inferenceId', inferenceId)
            const localVarPath = `/api/chat/feedback/{inference_id}`
                .replace(`{${"inference_id"}}`, encodeURIComponent(String(inferenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(feedbackRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the default task for Arthur Chat.
         * @summary Update Default Task
         * @param {ChatDefaultTaskRequest} chatDefaultTaskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefaultTaskApiChatDefaultTaskPut: async (chatDefaultTaskRequest: ChatDefaultTaskRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatDefaultTaskRequest' is not null or undefined
            assertParamExists('updateDefaultTaskApiChatDefaultTaskPut', 'chatDefaultTaskRequest', chatDefaultTaskRequest)
            const localVarPath = `/api/chat/default_task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatDefaultTaskRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload files via form-data. Only PDF, CSV, TXT types accepted.
         * @summary Upload Embeddings File
         * @param {File} file 
         * @param {boolean} [isGlobal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadEmbeddingsFileApiChatFilesPost: async (file: File, isGlobal?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadEmbeddingsFileApiChatFilesPost', 'file', file)
            const localVarPath = `/api/chat/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (isGlobal !== undefined) {
                localVarQueryParameter['is_global'] = isGlobal;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatApi - functional programming interface
 * @export
 */
export const ChatApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatApiAxiosParamCreator(configuration)
    return {
        /**
         * Chat request for Arthur Chat
         * @summary Chat
         * @param {ChatRequest} chatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatRequest(chatRequest: ChatRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatRequest(chatRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.chatRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove a file by ID. This action cannot be undone.
         * @summary Delete File
         * @param {string} fileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFileApiChatFilesFileIdDelete(fileId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFileApiChatFilesFileIdDelete(fileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.deleteFileApiChatFilesFileIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get list of conversation IDs.
         * @summary Get Conversations
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConversationsApiChatConversationsGet(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageListConversationBaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversationsApiChatConversationsGet(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.getConversationsApiChatConversationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the default task for Arthur Chat.
         * @summary Get Default Task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefaultTaskApiChatDefaultTaskGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatDefaultTaskResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefaultTaskApiChatDefaultTaskGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.getDefaultTaskApiChatDefaultTaskGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List uploaded files. Only files that are global or owned by the caller are returned.
         * @summary Get Files
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFilesApiChatFilesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExternalDocument>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFilesApiChatFilesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.getFilesApiChatFilesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get document context used for a past inference ID.
         * @summary Get Inference Document Context
         * @param {string} inferenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInferenceDocumentContextApiChatContextInferenceIdGet(inferenceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChatDocumentContext>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInferenceDocumentContextApiChatContextInferenceIdGet(inferenceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.getInferenceDocumentContextApiChatContextInferenceIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Post feedback for Arthur Chat.
         * @summary Post Chat Feedback
         * @param {FeedbackRequest} feedbackRequest 
         * @param {string} inferenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postChatFeedbackApiChatFeedbackInferenceIdPost(feedbackRequest: FeedbackRequest, inferenceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postChatFeedbackApiChatFeedbackInferenceIdPost(feedbackRequest, inferenceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.postChatFeedbackApiChatFeedbackInferenceIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Post feedback for Arthur Chat.
         * @summary Post Chat Feedback
         * @param {FeedbackRequest} feedbackRequest 
         * @param {string} inferenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postChatFeedbackApiChatFeedbackInferenceIdPost_1(feedbackRequest: FeedbackRequest, inferenceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postChatFeedbackApiChatFeedbackInferenceIdPost_1(feedbackRequest, inferenceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.postChatFeedbackApiChatFeedbackInferenceIdPost_1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the default task for Arthur Chat.
         * @summary Update Default Task
         * @param {ChatDefaultTaskRequest} chatDefaultTaskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDefaultTaskApiChatDefaultTaskPut(chatDefaultTaskRequest: ChatDefaultTaskRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatDefaultTaskResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDefaultTaskApiChatDefaultTaskPut(chatDefaultTaskRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.updateDefaultTaskApiChatDefaultTaskPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload files via form-data. Only PDF, CSV, TXT types accepted.
         * @summary Upload Embeddings File
         * @param {File} file 
         * @param {boolean} [isGlobal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadEmbeddingsFileApiChatFilesPost(file: File, isGlobal?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileUploadResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadEmbeddingsFileApiChatFilesPost(file, isGlobal, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatApi.uploadEmbeddingsFileApiChatFilesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChatApi - factory interface
 * @export
 */
export const ChatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatApiFp(configuration)
    return {
        /**
         * Chat request for Arthur Chat
         * @summary Chat
         * @param {ChatApiChatRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatRequest(requestParameters: ChatApiChatRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChatResponse> {
            return localVarFp.chatRequest(requestParameters.chatRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a file by ID. This action cannot be undone.
         * @summary Delete File
         * @param {ChatApiDeleteFileApiChatFilesFileIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFileApiChatFilesFileIdDelete(requestParameters: ChatApiDeleteFileApiChatFilesFileIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteFileApiChatFilesFileIdDelete(requestParameters.fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of conversation IDs.
         * @summary Get Conversations
         * @param {ChatApiGetConversationsApiChatConversationsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationsApiChatConversationsGet(requestParameters: ChatApiGetConversationsApiChatConversationsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageListConversationBaseResponse> {
            return localVarFp.getConversationsApiChatConversationsGet(requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the default task for Arthur Chat.
         * @summary Get Default Task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultTaskApiChatDefaultTaskGet(options?: RawAxiosRequestConfig): AxiosPromise<ChatDefaultTaskResponse> {
            return localVarFp.getDefaultTaskApiChatDefaultTaskGet(options).then((request) => request(axios, basePath));
        },
        /**
         * List uploaded files. Only files that are global or owned by the caller are returned.
         * @summary Get Files
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFilesApiChatFilesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ExternalDocument>> {
            return localVarFp.getFilesApiChatFilesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get document context used for a past inference ID.
         * @summary Get Inference Document Context
         * @param {ChatApiGetInferenceDocumentContextApiChatContextInferenceIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInferenceDocumentContextApiChatContextInferenceIdGet(requestParameters: ChatApiGetInferenceDocumentContextApiChatContextInferenceIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ChatDocumentContext>> {
            return localVarFp.getInferenceDocumentContextApiChatContextInferenceIdGet(requestParameters.inferenceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Post feedback for Arthur Chat.
         * @summary Post Chat Feedback
         * @param {ChatApiPostChatFeedbackApiChatFeedbackInferenceIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postChatFeedbackApiChatFeedbackInferenceIdPost(requestParameters: ChatApiPostChatFeedbackApiChatFeedbackInferenceIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.postChatFeedbackApiChatFeedbackInferenceIdPost(requestParameters.feedbackRequest, requestParameters.inferenceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Post feedback for Arthur Chat.
         * @summary Post Chat Feedback
         * @param {ChatApiPostChatFeedbackApiChatFeedbackInferenceIdPost0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postChatFeedbackApiChatFeedbackInferenceIdPost_1(requestParameters: ChatApiPostChatFeedbackApiChatFeedbackInferenceIdPost0Request, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.postChatFeedbackApiChatFeedbackInferenceIdPost_1(requestParameters.feedbackRequest, requestParameters.inferenceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the default task for Arthur Chat.
         * @summary Update Default Task
         * @param {ChatApiUpdateDefaultTaskApiChatDefaultTaskPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefaultTaskApiChatDefaultTaskPut(requestParameters: ChatApiUpdateDefaultTaskApiChatDefaultTaskPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChatDefaultTaskResponse> {
            return localVarFp.updateDefaultTaskApiChatDefaultTaskPut(requestParameters.chatDefaultTaskRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload files via form-data. Only PDF, CSV, TXT types accepted.
         * @summary Upload Embeddings File
         * @param {ChatApiUploadEmbeddingsFileApiChatFilesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadEmbeddingsFileApiChatFilesPost(requestParameters: ChatApiUploadEmbeddingsFileApiChatFilesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<FileUploadResult> {
            return localVarFp.uploadEmbeddingsFileApiChatFilesPost(requestParameters.file, requestParameters.isGlobal, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatApi - interface
 * @export
 * @interface ChatApi
 */
export interface ChatApiInterface {
    /**
     * Chat request for Arthur Chat
     * @summary Chat
     * @param {ChatApiChatRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    chatRequest(requestParameters: ChatApiChatRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChatResponse>;

    /**
     * Remove a file by ID. This action cannot be undone.
     * @summary Delete File
     * @param {ChatApiDeleteFileApiChatFilesFileIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    deleteFileApiChatFilesFileIdDelete(requestParameters: ChatApiDeleteFileApiChatFilesFileIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Get list of conversation IDs.
     * @summary Get Conversations
     * @param {ChatApiGetConversationsApiChatConversationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    getConversationsApiChatConversationsGet(requestParameters?: ChatApiGetConversationsApiChatConversationsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PageListConversationBaseResponse>;

    /**
     * Get the default task for Arthur Chat.
     * @summary Get Default Task
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    getDefaultTaskApiChatDefaultTaskGet(options?: RawAxiosRequestConfig): AxiosPromise<ChatDefaultTaskResponse>;

    /**
     * List uploaded files. Only files that are global or owned by the caller are returned.
     * @summary Get Files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    getFilesApiChatFilesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ExternalDocument>>;

    /**
     * Get document context used for a past inference ID.
     * @summary Get Inference Document Context
     * @param {ChatApiGetInferenceDocumentContextApiChatContextInferenceIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    getInferenceDocumentContextApiChatContextInferenceIdGet(requestParameters: ChatApiGetInferenceDocumentContextApiChatContextInferenceIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ChatDocumentContext>>;

    /**
     * Post feedback for Arthur Chat.
     * @summary Post Chat Feedback
     * @param {ChatApiPostChatFeedbackApiChatFeedbackInferenceIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    postChatFeedbackApiChatFeedbackInferenceIdPost(requestParameters: ChatApiPostChatFeedbackApiChatFeedbackInferenceIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Post feedback for Arthur Chat.
     * @summary Post Chat Feedback
     * @param {ChatApiPostChatFeedbackApiChatFeedbackInferenceIdPost0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    postChatFeedbackApiChatFeedbackInferenceIdPost_1(requestParameters: ChatApiPostChatFeedbackApiChatFeedbackInferenceIdPost0Request, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Update the default task for Arthur Chat.
     * @summary Update Default Task
     * @param {ChatApiUpdateDefaultTaskApiChatDefaultTaskPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    updateDefaultTaskApiChatDefaultTaskPut(requestParameters: ChatApiUpdateDefaultTaskApiChatDefaultTaskPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChatDefaultTaskResponse>;

    /**
     * Upload files via form-data. Only PDF, CSV, TXT types accepted.
     * @summary Upload Embeddings File
     * @param {ChatApiUploadEmbeddingsFileApiChatFilesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    uploadEmbeddingsFileApiChatFilesPost(requestParameters: ChatApiUploadEmbeddingsFileApiChatFilesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<FileUploadResult>;

}

/**
 * Request parameters for chatRequest operation in ChatApi.
 * @export
 * @interface ChatApiChatRequestRequest
 */
export interface ChatApiChatRequestRequest {
    /**
     * 
     * @type {ChatRequest}
     * @memberof ChatApiChatRequest
     */
    readonly chatRequest: ChatRequest
}

/**
 * Request parameters for deleteFileApiChatFilesFileIdDelete operation in ChatApi.
 * @export
 * @interface ChatApiDeleteFileApiChatFilesFileIdDeleteRequest
 */
export interface ChatApiDeleteFileApiChatFilesFileIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ChatApiDeleteFileApiChatFilesFileIdDelete
     */
    readonly fileId: string
}

/**
 * Request parameters for getConversationsApiChatConversationsGet operation in ChatApi.
 * @export
 * @interface ChatApiGetConversationsApiChatConversationsGetRequest
 */
export interface ChatApiGetConversationsApiChatConversationsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof ChatApiGetConversationsApiChatConversationsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ChatApiGetConversationsApiChatConversationsGet
     */
    readonly size?: number
}

/**
 * Request parameters for getInferenceDocumentContextApiChatContextInferenceIdGet operation in ChatApi.
 * @export
 * @interface ChatApiGetInferenceDocumentContextApiChatContextInferenceIdGetRequest
 */
export interface ChatApiGetInferenceDocumentContextApiChatContextInferenceIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ChatApiGetInferenceDocumentContextApiChatContextInferenceIdGet
     */
    readonly inferenceId: string
}

/**
 * Request parameters for postChatFeedbackApiChatFeedbackInferenceIdPost operation in ChatApi.
 * @export
 * @interface ChatApiPostChatFeedbackApiChatFeedbackInferenceIdPostRequest
 */
export interface ChatApiPostChatFeedbackApiChatFeedbackInferenceIdPostRequest {
    /**
     * 
     * @type {FeedbackRequest}
     * @memberof ChatApiPostChatFeedbackApiChatFeedbackInferenceIdPost
     */
    readonly feedbackRequest: FeedbackRequest

    /**
     * 
     * @type {string}
     * @memberof ChatApiPostChatFeedbackApiChatFeedbackInferenceIdPost
     */
    readonly inferenceId: string
}

/**
 * Request parameters for postChatFeedbackApiChatFeedbackInferenceIdPost_1 operation in ChatApi.
 * @export
 * @interface ChatApiPostChatFeedbackApiChatFeedbackInferenceIdPost0Request
 */
export interface ChatApiPostChatFeedbackApiChatFeedbackInferenceIdPost0Request {
    /**
     * 
     * @type {FeedbackRequest}
     * @memberof ChatApiPostChatFeedbackApiChatFeedbackInferenceIdPost0
     */
    readonly feedbackRequest: FeedbackRequest

    /**
     * 
     * @type {string}
     * @memberof ChatApiPostChatFeedbackApiChatFeedbackInferenceIdPost0
     */
    readonly inferenceId: string
}

/**
 * Request parameters for updateDefaultTaskApiChatDefaultTaskPut operation in ChatApi.
 * @export
 * @interface ChatApiUpdateDefaultTaskApiChatDefaultTaskPutRequest
 */
export interface ChatApiUpdateDefaultTaskApiChatDefaultTaskPutRequest {
    /**
     * 
     * @type {ChatDefaultTaskRequest}
     * @memberof ChatApiUpdateDefaultTaskApiChatDefaultTaskPut
     */
    readonly chatDefaultTaskRequest: ChatDefaultTaskRequest
}

/**
 * Request parameters for uploadEmbeddingsFileApiChatFilesPost operation in ChatApi.
 * @export
 * @interface ChatApiUploadEmbeddingsFileApiChatFilesPostRequest
 */
export interface ChatApiUploadEmbeddingsFileApiChatFilesPostRequest {
    /**
     * 
     * @type {File}
     * @memberof ChatApiUploadEmbeddingsFileApiChatFilesPost
     */
    readonly file: File

    /**
     * 
     * @type {boolean}
     * @memberof ChatApiUploadEmbeddingsFileApiChatFilesPost
     */
    readonly isGlobal?: boolean
}

/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export class ChatApi extends BaseAPI implements ChatApiInterface {
    /**
     * Chat request for Arthur Chat
     * @summary Chat
     * @param {ChatApiChatRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public chatRequest(requestParameters: ChatApiChatRequestRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).chatRequest(requestParameters.chatRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a file by ID. This action cannot be undone.
     * @summary Delete File
     * @param {ChatApiDeleteFileApiChatFilesFileIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public deleteFileApiChatFilesFileIdDelete(requestParameters: ChatApiDeleteFileApiChatFilesFileIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).deleteFileApiChatFilesFileIdDelete(requestParameters.fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of conversation IDs.
     * @summary Get Conversations
     * @param {ChatApiGetConversationsApiChatConversationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public getConversationsApiChatConversationsGet(requestParameters: ChatApiGetConversationsApiChatConversationsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).getConversationsApiChatConversationsGet(requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the default task for Arthur Chat.
     * @summary Get Default Task
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public getDefaultTaskApiChatDefaultTaskGet(options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).getDefaultTaskApiChatDefaultTaskGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List uploaded files. Only files that are global or owned by the caller are returned.
     * @summary Get Files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public getFilesApiChatFilesGet(options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).getFilesApiChatFilesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get document context used for a past inference ID.
     * @summary Get Inference Document Context
     * @param {ChatApiGetInferenceDocumentContextApiChatContextInferenceIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public getInferenceDocumentContextApiChatContextInferenceIdGet(requestParameters: ChatApiGetInferenceDocumentContextApiChatContextInferenceIdGetRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).getInferenceDocumentContextApiChatContextInferenceIdGet(requestParameters.inferenceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post feedback for Arthur Chat.
     * @summary Post Chat Feedback
     * @param {ChatApiPostChatFeedbackApiChatFeedbackInferenceIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public postChatFeedbackApiChatFeedbackInferenceIdPost(requestParameters: ChatApiPostChatFeedbackApiChatFeedbackInferenceIdPostRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).postChatFeedbackApiChatFeedbackInferenceIdPost(requestParameters.feedbackRequest, requestParameters.inferenceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Post feedback for Arthur Chat.
     * @summary Post Chat Feedback
     * @param {ChatApiPostChatFeedbackApiChatFeedbackInferenceIdPost0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public postChatFeedbackApiChatFeedbackInferenceIdPost_1(requestParameters: ChatApiPostChatFeedbackApiChatFeedbackInferenceIdPost0Request, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).postChatFeedbackApiChatFeedbackInferenceIdPost_1(requestParameters.feedbackRequest, requestParameters.inferenceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the default task for Arthur Chat.
     * @summary Update Default Task
     * @param {ChatApiUpdateDefaultTaskApiChatDefaultTaskPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public updateDefaultTaskApiChatDefaultTaskPut(requestParameters: ChatApiUpdateDefaultTaskApiChatDefaultTaskPutRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).updateDefaultTaskApiChatDefaultTaskPut(requestParameters.chatDefaultTaskRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload files via form-data. Only PDF, CSV, TXT types accepted.
     * @summary Upload Embeddings File
     * @param {ChatApiUploadEmbeddingsFileApiChatFilesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    public uploadEmbeddingsFileApiChatFilesPost(requestParameters: ChatApiUploadEmbeddingsFileApiChatFilesPostRequest, options?: RawAxiosRequestConfig) {
        return ChatApiFp(this.configuration).uploadEmbeddingsFileApiChatFilesPost(requestParameters.file, requestParameters.isGlobal, options).then((request) => request(this.axios, this.basePath));
    }
}

