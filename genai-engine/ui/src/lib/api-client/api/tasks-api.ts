/* tslint:disable */
/* eslint-disable */
/**
 * Arthur GenAI Engine
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.79
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { NewMetricRequest } from '../models';
// @ts-ignore
import type { NewRuleRequest } from '../models';
// @ts-ignore
import type { NewTaskRequest } from '../models';
// @ts-ignore
import type { PaginationSortMethod } from '../models';
// @ts-ignore
import type { RuleResponse } from '../models';
// @ts-ignore
import type { SearchTasksRequest } from '../models';
// @ts-ignore
import type { SearchTasksResponse } from '../models';
// @ts-ignore
import type { TaskResponse } from '../models';
// @ts-ignore
import type { UpdateMetricRequest } from '../models';
// @ts-ignore
import type { UpdateRuleRequest } from '../models';
/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Archive task. Also archives all task-scoped rules. Associated default rules are unaffected.
         * @summary Archive Task
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveTaskApiV2TasksTaskIdDelete: async (taskId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('archiveTaskApiV2TasksTaskIdDelete', 'taskId', taskId)
            const localVarPath = `/api/v2/tasks/{task_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Archive a task metric.
         * @summary Archive Task Metric
         * @param {string} taskId 
         * @param {string} metricId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDelete: async (taskId: string, metricId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('archiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDelete', 'taskId', taskId)
            // verify required parameter 'metricId' is not null or undefined
            assertParamExists('archiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDelete', 'metricId', metricId)
            const localVarPath = `/api/v2/tasks/{task_id}/metrics/{metric_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)))
                .replace(`{${"metric_id"}}`, encodeURIComponent(String(metricId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Archive an existing rule for this task.
         * @summary Archive Task Rule
         * @param {string} taskId 
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveTaskRuleApiV2TasksTaskIdRulesRuleIdDelete: async (taskId: string, ruleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('archiveTaskRuleApiV2TasksTaskIdRulesRuleIdDelete', 'taskId', taskId)
            // verify required parameter 'ruleId' is not null or undefined
            assertParamExists('archiveTaskRuleApiV2TasksTaskIdRulesRuleIdDelete', 'ruleId', ruleId)
            const localVarPath = `/api/v2/tasks/{task_id}/rules/{rule_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)))
                .replace(`{${"rule_id"}}`, encodeURIComponent(String(ruleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a new task. When a new task is created, all existing default rules will be auto-applied for this new task. Optionally specify if the task is agentic.
         * @summary Create Task
         * @param {NewTaskRequest} newTaskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskApiV2TasksPost: async (newTaskRequest: NewTaskRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newTaskRequest' is not null or undefined
            assertParamExists('createTaskApiV2TasksPost', 'newTaskRequest', newTaskRequest)
            const localVarPath = `/api/v2/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newTaskRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create metrics for a task. Only agentic tasks can have metrics.
         * @summary Create Task Metric
         * @param {string} taskId 
         * @param {NewMetricRequest} [newMetricRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskMetricApiV2TasksTaskIdMetricsPost: async (taskId: string, newMetricRequest?: NewMetricRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('createTaskMetricApiV2TasksTaskIdMetricsPost', 'taskId', taskId)
            const localVarPath = `/api/v2/tasks/{task_id}/metrics`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newMetricRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a rule to be applied only to this task. Available rule types are KeywordRule, ModelHallucinationRuleV2, ModelSensitiveDataRule, PIIDataRule, PromptInjectionRule, RegexRule, ToxicityRule.Note: The rules are cached by the validation endpoints for 60 seconds.
         * @summary Create Task Rule
         * @param {string} taskId 
         * @param {NewRuleRequest} [newRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskRuleApiV2TasksTaskIdRulesPost: async (taskId: string, newRuleRequest?: NewRuleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('createTaskRuleApiV2TasksTaskIdRulesPost', 'taskId', taskId)
            const localVarPath = `/api/v2/tasks/{task_id}/rules`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newRuleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Deprecated] Use /tasks/search endpoint. This endpoint will be removed in a future release.
         * @summary Get All Tasks
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getAllTasksApiV2TasksGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get tasks.
         * @summary Get Task
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskApiV2TasksTaskIdGet: async (taskId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getTaskApiV2TasksTaskIdGet', 'taskId', taskId)
            const localVarPath = `/api/v2/tasks/{task_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Redirect to /tasks endpoint.
         * @summary Redirect To Tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redirectToTasksApiV2TaskPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search tasks. Can filter by task IDs, task name substring, and agentic status.
         * @summary Search Tasks
         * @param {SearchTasksRequest} searchTasksRequest 
         * @param {PaginationSortMethod} [sort] Sort the results (asc/desc)
         * @param {number} [pageSize] Page size. Default is 10. Must be greater than 0 and less than 5000.
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTasksApiV2TasksSearchPost: async (searchTasksRequest: SearchTasksRequest, sort?: PaginationSortMethod, pageSize?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchTasksRequest' is not null or undefined
            assertParamExists('searchTasksApiV2TasksSearchPost', 'searchTasksRequest', searchTasksRequest)
            const localVarPath = `/api/v2/tasks/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchTasksRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a task metric.
         * @summary Update Task Metric
         * @param {UpdateMetricRequest} updateMetricRequest 
         * @param {string} taskId 
         * @param {string} metricId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatch: async (updateMetricRequest: UpdateMetricRequest, taskId: string, metricId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateMetricRequest' is not null or undefined
            assertParamExists('updateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatch', 'updateMetricRequest', updateMetricRequest)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('updateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatch', 'taskId', taskId)
            // verify required parameter 'metricId' is not null or undefined
            assertParamExists('updateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatch', 'metricId', metricId)
            const localVarPath = `/api/v2/tasks/{task_id}/metrics/{metric_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)))
                .replace(`{${"metric_id"}}`, encodeURIComponent(String(metricId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMetricRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable or disable an existing rule for this task including the default rules.
         * @summary Update Task Rules
         * @param {UpdateRuleRequest} updateRuleRequest 
         * @param {string} taskId 
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskRulesApiV2TasksTaskIdRulesRuleIdPatch: async (updateRuleRequest: UpdateRuleRequest, taskId: string, ruleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateRuleRequest' is not null or undefined
            assertParamExists('updateTaskRulesApiV2TasksTaskIdRulesRuleIdPatch', 'updateRuleRequest', updateRuleRequest)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('updateTaskRulesApiV2TasksTaskIdRulesRuleIdPatch', 'taskId', taskId)
            // verify required parameter 'ruleId' is not null or undefined
            assertParamExists('updateTaskRulesApiV2TasksTaskIdRulesRuleIdPatch', 'ruleId', ruleId)
            const localVarPath = `/api/v2/tasks/{task_id}/rules/{rule_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)))
                .replace(`{${"rule_id"}}`, encodeURIComponent(String(ruleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRuleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TasksApiAxiosParamCreator(configuration)
    return {
        /**
         * Archive task. Also archives all task-scoped rules. Associated default rules are unaffected.
         * @summary Archive Task
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveTaskApiV2TasksTaskIdDelete(taskId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveTaskApiV2TasksTaskIdDelete(taskId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.archiveTaskApiV2TasksTaskIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Archive a task metric.
         * @summary Archive Task Metric
         * @param {string} taskId 
         * @param {string} metricId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDelete(taskId: string, metricId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDelete(taskId, metricId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.archiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Archive an existing rule for this task.
         * @summary Archive Task Rule
         * @param {string} taskId 
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveTaskRuleApiV2TasksTaskIdRulesRuleIdDelete(taskId: string, ruleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveTaskRuleApiV2TasksTaskIdRulesRuleIdDelete(taskId, ruleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.archiveTaskRuleApiV2TasksTaskIdRulesRuleIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Register a new task. When a new task is created, all existing default rules will be auto-applied for this new task. Optionally specify if the task is agentic.
         * @summary Create Task
         * @param {NewTaskRequest} newTaskRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTaskApiV2TasksPost(newTaskRequest: NewTaskRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTaskApiV2TasksPost(newTaskRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.createTaskApiV2TasksPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create metrics for a task. Only agentic tasks can have metrics.
         * @summary Create Task Metric
         * @param {string} taskId 
         * @param {NewMetricRequest} [newMetricRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTaskMetricApiV2TasksTaskIdMetricsPost(taskId: string, newMetricRequest?: NewMetricRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTaskMetricApiV2TasksTaskIdMetricsPost(taskId, newMetricRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.createTaskMetricApiV2TasksTaskIdMetricsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a rule to be applied only to this task. Available rule types are KeywordRule, ModelHallucinationRuleV2, ModelSensitiveDataRule, PIIDataRule, PromptInjectionRule, RegexRule, ToxicityRule.Note: The rules are cached by the validation endpoints for 60 seconds.
         * @summary Create Task Rule
         * @param {string} taskId 
         * @param {NewRuleRequest} [newRuleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTaskRuleApiV2TasksTaskIdRulesPost(taskId: string, newRuleRequest?: NewRuleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTaskRuleApiV2TasksTaskIdRulesPost(taskId, newRuleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.createTaskRuleApiV2TasksTaskIdRulesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * [Deprecated] Use /tasks/search endpoint. This endpoint will be removed in a future release.
         * @summary Get All Tasks
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getAllTasksApiV2TasksGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaskResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTasksApiV2TasksGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.getAllTasksApiV2TasksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get tasks.
         * @summary Get Task
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskApiV2TasksTaskIdGet(taskId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTaskApiV2TasksTaskIdGet(taskId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.getTaskApiV2TasksTaskIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Redirect to /tasks endpoint.
         * @summary Redirect To Tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redirectToTasksApiV2TaskPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redirectToTasksApiV2TaskPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.redirectToTasksApiV2TaskPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Search tasks. Can filter by task IDs, task name substring, and agentic status.
         * @summary Search Tasks
         * @param {SearchTasksRequest} searchTasksRequest 
         * @param {PaginationSortMethod} [sort] Sort the results (asc/desc)
         * @param {number} [pageSize] Page size. Default is 10. Must be greater than 0 and less than 5000.
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchTasksApiV2TasksSearchPost(searchTasksRequest: SearchTasksRequest, sort?: PaginationSortMethod, pageSize?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchTasksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchTasksApiV2TasksSearchPost(searchTasksRequest, sort, pageSize, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.searchTasksApiV2TasksSearchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a task metric.
         * @summary Update Task Metric
         * @param {UpdateMetricRequest} updateMetricRequest 
         * @param {string} taskId 
         * @param {string} metricId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatch(updateMetricRequest: UpdateMetricRequest, taskId: string, metricId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatch(updateMetricRequest, taskId, metricId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.updateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enable or disable an existing rule for this task including the default rules.
         * @summary Update Task Rules
         * @param {UpdateRuleRequest} updateRuleRequest 
         * @param {string} taskId 
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTaskRulesApiV2TasksTaskIdRulesRuleIdPatch(updateRuleRequest: UpdateRuleRequest, taskId: string, ruleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTaskRulesApiV2TasksTaskIdRulesRuleIdPatch(updateRuleRequest, taskId, ruleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.updateTaskRulesApiV2TasksTaskIdRulesRuleIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TasksApiFp(configuration)
    return {
        /**
         * Archive task. Also archives all task-scoped rules. Associated default rules are unaffected.
         * @summary Archive Task
         * @param {TasksApiArchiveTaskApiV2TasksTaskIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveTaskApiV2TasksTaskIdDelete(requestParameters: TasksApiArchiveTaskApiV2TasksTaskIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.archiveTaskApiV2TasksTaskIdDelete(requestParameters.taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * Archive a task metric.
         * @summary Archive Task Metric
         * @param {TasksApiArchiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDelete(requestParameters: TasksApiArchiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.archiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDelete(requestParameters.taskId, requestParameters.metricId, options).then((request) => request(axios, basePath));
        },
        /**
         * Archive an existing rule for this task.
         * @summary Archive Task Rule
         * @param {TasksApiArchiveTaskRuleApiV2TasksTaskIdRulesRuleIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveTaskRuleApiV2TasksTaskIdRulesRuleIdDelete(requestParameters: TasksApiArchiveTaskRuleApiV2TasksTaskIdRulesRuleIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.archiveTaskRuleApiV2TasksTaskIdRulesRuleIdDelete(requestParameters.taskId, requestParameters.ruleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Register a new task. When a new task is created, all existing default rules will be auto-applied for this new task. Optionally specify if the task is agentic.
         * @summary Create Task
         * @param {TasksApiCreateTaskApiV2TasksPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskApiV2TasksPost(requestParameters: TasksApiCreateTaskApiV2TasksPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TaskResponse> {
            return localVarFp.createTaskApiV2TasksPost(requestParameters.newTaskRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create metrics for a task. Only agentic tasks can have metrics.
         * @summary Create Task Metric
         * @param {TasksApiCreateTaskMetricApiV2TasksTaskIdMetricsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskMetricApiV2TasksTaskIdMetricsPost(requestParameters: TasksApiCreateTaskMetricApiV2TasksTaskIdMetricsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.createTaskMetricApiV2TasksTaskIdMetricsPost(requestParameters.taskId, requestParameters.newMetricRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a rule to be applied only to this task. Available rule types are KeywordRule, ModelHallucinationRuleV2, ModelSensitiveDataRule, PIIDataRule, PromptInjectionRule, RegexRule, ToxicityRule.Note: The rules are cached by the validation endpoints for 60 seconds.
         * @summary Create Task Rule
         * @param {TasksApiCreateTaskRuleApiV2TasksTaskIdRulesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskRuleApiV2TasksTaskIdRulesPost(requestParameters: TasksApiCreateTaskRuleApiV2TasksTaskIdRulesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<RuleResponse> {
            return localVarFp.createTaskRuleApiV2TasksTaskIdRulesPost(requestParameters.taskId, requestParameters.newRuleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * [Deprecated] Use /tasks/search endpoint. This endpoint will be removed in a future release.
         * @summary Get All Tasks
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getAllTasksApiV2TasksGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<TaskResponse>> {
            return localVarFp.getAllTasksApiV2TasksGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get tasks.
         * @summary Get Task
         * @param {TasksApiGetTaskApiV2TasksTaskIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskApiV2TasksTaskIdGet(requestParameters: TasksApiGetTaskApiV2TasksTaskIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<TaskResponse> {
            return localVarFp.getTaskApiV2TasksTaskIdGet(requestParameters.taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * Redirect to /tasks endpoint.
         * @summary Redirect To Tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redirectToTasksApiV2TaskPost(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.redirectToTasksApiV2TaskPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Search tasks. Can filter by task IDs, task name substring, and agentic status.
         * @summary Search Tasks
         * @param {TasksApiSearchTasksApiV2TasksSearchPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchTasksApiV2TasksSearchPost(requestParameters: TasksApiSearchTasksApiV2TasksSearchPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SearchTasksResponse> {
            return localVarFp.searchTasksApiV2TasksSearchPost(requestParameters.searchTasksRequest, requestParameters.sort, requestParameters.pageSize, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a task metric.
         * @summary Update Task Metric
         * @param {TasksApiUpdateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatch(requestParameters: TasksApiUpdateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.updateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatch(requestParameters.updateMetricRequest, requestParameters.taskId, requestParameters.metricId, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable or disable an existing rule for this task including the default rules.
         * @summary Update Task Rules
         * @param {TasksApiUpdateTaskRulesApiV2TasksTaskIdRulesRuleIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskRulesApiV2TasksTaskIdRulesRuleIdPatch(requestParameters: TasksApiUpdateTaskRulesApiV2TasksTaskIdRulesRuleIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<TaskResponse> {
            return localVarFp.updateTaskRulesApiV2TasksTaskIdRulesRuleIdPatch(requestParameters.updateRuleRequest, requestParameters.taskId, requestParameters.ruleId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TasksApi - interface
 * @export
 * @interface TasksApi
 */
export interface TasksApiInterface {
    /**
     * Archive task. Also archives all task-scoped rules. Associated default rules are unaffected.
     * @summary Archive Task
     * @param {TasksApiArchiveTaskApiV2TasksTaskIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    archiveTaskApiV2TasksTaskIdDelete(requestParameters: TasksApiArchiveTaskApiV2TasksTaskIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Archive a task metric.
     * @summary Archive Task Metric
     * @param {TasksApiArchiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    archiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDelete(requestParameters: TasksApiArchiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Archive an existing rule for this task.
     * @summary Archive Task Rule
     * @param {TasksApiArchiveTaskRuleApiV2TasksTaskIdRulesRuleIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    archiveTaskRuleApiV2TasksTaskIdRulesRuleIdDelete(requestParameters: TasksApiArchiveTaskRuleApiV2TasksTaskIdRulesRuleIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Register a new task. When a new task is created, all existing default rules will be auto-applied for this new task. Optionally specify if the task is agentic.
     * @summary Create Task
     * @param {TasksApiCreateTaskApiV2TasksPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    createTaskApiV2TasksPost(requestParameters: TasksApiCreateTaskApiV2TasksPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TaskResponse>;

    /**
     * Create metrics for a task. Only agentic tasks can have metrics.
     * @summary Create Task Metric
     * @param {TasksApiCreateTaskMetricApiV2TasksTaskIdMetricsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    createTaskMetricApiV2TasksTaskIdMetricsPost(requestParameters: TasksApiCreateTaskMetricApiV2TasksTaskIdMetricsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Create a rule to be applied only to this task. Available rule types are KeywordRule, ModelHallucinationRuleV2, ModelSensitiveDataRule, PIIDataRule, PromptInjectionRule, RegexRule, ToxicityRule.Note: The rules are cached by the validation endpoints for 60 seconds.
     * @summary Create Task Rule
     * @param {TasksApiCreateTaskRuleApiV2TasksTaskIdRulesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    createTaskRuleApiV2TasksTaskIdRulesPost(requestParameters: TasksApiCreateTaskRuleApiV2TasksTaskIdRulesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<RuleResponse>;

    /**
     * [Deprecated] Use /tasks/search endpoint. This endpoint will be removed in a future release.
     * @summary Get All Tasks
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    getAllTasksApiV2TasksGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<TaskResponse>>;

    /**
     * Get tasks.
     * @summary Get Task
     * @param {TasksApiGetTaskApiV2TasksTaskIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    getTaskApiV2TasksTaskIdGet(requestParameters: TasksApiGetTaskApiV2TasksTaskIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<TaskResponse>;

    /**
     * Redirect to /tasks endpoint.
     * @summary Redirect To Tasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    redirectToTasksApiV2TaskPost(options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Search tasks. Can filter by task IDs, task name substring, and agentic status.
     * @summary Search Tasks
     * @param {TasksApiSearchTasksApiV2TasksSearchPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    searchTasksApiV2TasksSearchPost(requestParameters: TasksApiSearchTasksApiV2TasksSearchPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SearchTasksResponse>;

    /**
     * Update a task metric.
     * @summary Update Task Metric
     * @param {TasksApiUpdateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    updateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatch(requestParameters: TasksApiUpdateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Enable or disable an existing rule for this task including the default rules.
     * @summary Update Task Rules
     * @param {TasksApiUpdateTaskRulesApiV2TasksTaskIdRulesRuleIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    updateTaskRulesApiV2TasksTaskIdRulesRuleIdPatch(requestParameters: TasksApiUpdateTaskRulesApiV2TasksTaskIdRulesRuleIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<TaskResponse>;

}

/**
 * Request parameters for archiveTaskApiV2TasksTaskIdDelete operation in TasksApi.
 * @export
 * @interface TasksApiArchiveTaskApiV2TasksTaskIdDeleteRequest
 */
export interface TasksApiArchiveTaskApiV2TasksTaskIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TasksApiArchiveTaskApiV2TasksTaskIdDelete
     */
    readonly taskId: string
}

/**
 * Request parameters for archiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDelete operation in TasksApi.
 * @export
 * @interface TasksApiArchiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDeleteRequest
 */
export interface TasksApiArchiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TasksApiArchiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDelete
     */
    readonly taskId: string

    /**
     * 
     * @type {string}
     * @memberof TasksApiArchiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDelete
     */
    readonly metricId: string
}

/**
 * Request parameters for archiveTaskRuleApiV2TasksTaskIdRulesRuleIdDelete operation in TasksApi.
 * @export
 * @interface TasksApiArchiveTaskRuleApiV2TasksTaskIdRulesRuleIdDeleteRequest
 */
export interface TasksApiArchiveTaskRuleApiV2TasksTaskIdRulesRuleIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof TasksApiArchiveTaskRuleApiV2TasksTaskIdRulesRuleIdDelete
     */
    readonly taskId: string

    /**
     * 
     * @type {string}
     * @memberof TasksApiArchiveTaskRuleApiV2TasksTaskIdRulesRuleIdDelete
     */
    readonly ruleId: string
}

/**
 * Request parameters for createTaskApiV2TasksPost operation in TasksApi.
 * @export
 * @interface TasksApiCreateTaskApiV2TasksPostRequest
 */
export interface TasksApiCreateTaskApiV2TasksPostRequest {
    /**
     * 
     * @type {NewTaskRequest}
     * @memberof TasksApiCreateTaskApiV2TasksPost
     */
    readonly newTaskRequest: NewTaskRequest
}

/**
 * Request parameters for createTaskMetricApiV2TasksTaskIdMetricsPost operation in TasksApi.
 * @export
 * @interface TasksApiCreateTaskMetricApiV2TasksTaskIdMetricsPostRequest
 */
export interface TasksApiCreateTaskMetricApiV2TasksTaskIdMetricsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TasksApiCreateTaskMetricApiV2TasksTaskIdMetricsPost
     */
    readonly taskId: string

    /**
     * 
     * @type {NewMetricRequest}
     * @memberof TasksApiCreateTaskMetricApiV2TasksTaskIdMetricsPost
     */
    readonly newMetricRequest?: NewMetricRequest
}

/**
 * Request parameters for createTaskRuleApiV2TasksTaskIdRulesPost operation in TasksApi.
 * @export
 * @interface TasksApiCreateTaskRuleApiV2TasksTaskIdRulesPostRequest
 */
export interface TasksApiCreateTaskRuleApiV2TasksTaskIdRulesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TasksApiCreateTaskRuleApiV2TasksTaskIdRulesPost
     */
    readonly taskId: string

    /**
     * 
     * @type {NewRuleRequest}
     * @memberof TasksApiCreateTaskRuleApiV2TasksTaskIdRulesPost
     */
    readonly newRuleRequest?: NewRuleRequest
}

/**
 * Request parameters for getTaskApiV2TasksTaskIdGet operation in TasksApi.
 * @export
 * @interface TasksApiGetTaskApiV2TasksTaskIdGetRequest
 */
export interface TasksApiGetTaskApiV2TasksTaskIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TasksApiGetTaskApiV2TasksTaskIdGet
     */
    readonly taskId: string
}

/**
 * Request parameters for searchTasksApiV2TasksSearchPost operation in TasksApi.
 * @export
 * @interface TasksApiSearchTasksApiV2TasksSearchPostRequest
 */
export interface TasksApiSearchTasksApiV2TasksSearchPostRequest {
    /**
     * 
     * @type {SearchTasksRequest}
     * @memberof TasksApiSearchTasksApiV2TasksSearchPost
     */
    readonly searchTasksRequest: SearchTasksRequest

    /**
     * Sort the results (asc/desc)
     * @type {PaginationSortMethod}
     * @memberof TasksApiSearchTasksApiV2TasksSearchPost
     */
    readonly sort?: PaginationSortMethod

    /**
     * Page size. Default is 10. Must be greater than 0 and less than 5000.
     * @type {number}
     * @memberof TasksApiSearchTasksApiV2TasksSearchPost
     */
    readonly pageSize?: number

    /**
     * Page number
     * @type {number}
     * @memberof TasksApiSearchTasksApiV2TasksSearchPost
     */
    readonly page?: number
}

/**
 * Request parameters for updateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatch operation in TasksApi.
 * @export
 * @interface TasksApiUpdateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatchRequest
 */
export interface TasksApiUpdateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatchRequest {
    /**
     * 
     * @type {UpdateMetricRequest}
     * @memberof TasksApiUpdateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatch
     */
    readonly updateMetricRequest: UpdateMetricRequest

    /**
     * 
     * @type {string}
     * @memberof TasksApiUpdateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatch
     */
    readonly taskId: string

    /**
     * 
     * @type {string}
     * @memberof TasksApiUpdateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatch
     */
    readonly metricId: string
}

/**
 * Request parameters for updateTaskRulesApiV2TasksTaskIdRulesRuleIdPatch operation in TasksApi.
 * @export
 * @interface TasksApiUpdateTaskRulesApiV2TasksTaskIdRulesRuleIdPatchRequest
 */
export interface TasksApiUpdateTaskRulesApiV2TasksTaskIdRulesRuleIdPatchRequest {
    /**
     * 
     * @type {UpdateRuleRequest}
     * @memberof TasksApiUpdateTaskRulesApiV2TasksTaskIdRulesRuleIdPatch
     */
    readonly updateRuleRequest: UpdateRuleRequest

    /**
     * 
     * @type {string}
     * @memberof TasksApiUpdateTaskRulesApiV2TasksTaskIdRulesRuleIdPatch
     */
    readonly taskId: string

    /**
     * 
     * @type {string}
     * @memberof TasksApiUpdateTaskRulesApiV2TasksTaskIdRulesRuleIdPatch
     */
    readonly ruleId: string
}

/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export class TasksApi extends BaseAPI implements TasksApiInterface {
    /**
     * Archive task. Also archives all task-scoped rules. Associated default rules are unaffected.
     * @summary Archive Task
     * @param {TasksApiArchiveTaskApiV2TasksTaskIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public archiveTaskApiV2TasksTaskIdDelete(requestParameters: TasksApiArchiveTaskApiV2TasksTaskIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).archiveTaskApiV2TasksTaskIdDelete(requestParameters.taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Archive a task metric.
     * @summary Archive Task Metric
     * @param {TasksApiArchiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public archiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDelete(requestParameters: TasksApiArchiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).archiveTaskMetricApiV2TasksTaskIdMetricsMetricIdDelete(requestParameters.taskId, requestParameters.metricId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Archive an existing rule for this task.
     * @summary Archive Task Rule
     * @param {TasksApiArchiveTaskRuleApiV2TasksTaskIdRulesRuleIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public archiveTaskRuleApiV2TasksTaskIdRulesRuleIdDelete(requestParameters: TasksApiArchiveTaskRuleApiV2TasksTaskIdRulesRuleIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).archiveTaskRuleApiV2TasksTaskIdRulesRuleIdDelete(requestParameters.taskId, requestParameters.ruleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register a new task. When a new task is created, all existing default rules will be auto-applied for this new task. Optionally specify if the task is agentic.
     * @summary Create Task
     * @param {TasksApiCreateTaskApiV2TasksPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public createTaskApiV2TasksPost(requestParameters: TasksApiCreateTaskApiV2TasksPostRequest, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).createTaskApiV2TasksPost(requestParameters.newTaskRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create metrics for a task. Only agentic tasks can have metrics.
     * @summary Create Task Metric
     * @param {TasksApiCreateTaskMetricApiV2TasksTaskIdMetricsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public createTaskMetricApiV2TasksTaskIdMetricsPost(requestParameters: TasksApiCreateTaskMetricApiV2TasksTaskIdMetricsPostRequest, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).createTaskMetricApiV2TasksTaskIdMetricsPost(requestParameters.taskId, requestParameters.newMetricRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a rule to be applied only to this task. Available rule types are KeywordRule, ModelHallucinationRuleV2, ModelSensitiveDataRule, PIIDataRule, PromptInjectionRule, RegexRule, ToxicityRule.Note: The rules are cached by the validation endpoints for 60 seconds.
     * @summary Create Task Rule
     * @param {TasksApiCreateTaskRuleApiV2TasksTaskIdRulesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public createTaskRuleApiV2TasksTaskIdRulesPost(requestParameters: TasksApiCreateTaskRuleApiV2TasksTaskIdRulesPostRequest, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).createTaskRuleApiV2TasksTaskIdRulesPost(requestParameters.taskId, requestParameters.newRuleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [Deprecated] Use /tasks/search endpoint. This endpoint will be removed in a future release.
     * @summary Get All Tasks
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public getAllTasksApiV2TasksGet(options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).getAllTasksApiV2TasksGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get tasks.
     * @summary Get Task
     * @param {TasksApiGetTaskApiV2TasksTaskIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public getTaskApiV2TasksTaskIdGet(requestParameters: TasksApiGetTaskApiV2TasksTaskIdGetRequest, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).getTaskApiV2TasksTaskIdGet(requestParameters.taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Redirect to /tasks endpoint.
     * @summary Redirect To Tasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public redirectToTasksApiV2TaskPost(options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).redirectToTasksApiV2TaskPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search tasks. Can filter by task IDs, task name substring, and agentic status.
     * @summary Search Tasks
     * @param {TasksApiSearchTasksApiV2TasksSearchPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public searchTasksApiV2TasksSearchPost(requestParameters: TasksApiSearchTasksApiV2TasksSearchPostRequest, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).searchTasksApiV2TasksSearchPost(requestParameters.searchTasksRequest, requestParameters.sort, requestParameters.pageSize, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a task metric.
     * @summary Update Task Metric
     * @param {TasksApiUpdateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public updateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatch(requestParameters: TasksApiUpdateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatchRequest, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).updateTaskMetricApiV2TasksTaskIdMetricsMetricIdPatch(requestParameters.updateMetricRequest, requestParameters.taskId, requestParameters.metricId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable or disable an existing rule for this task including the default rules.
     * @summary Update Task Rules
     * @param {TasksApiUpdateTaskRulesApiV2TasksTaskIdRulesRuleIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public updateTaskRulesApiV2TasksTaskIdRulesRuleIdPatch(requestParameters: TasksApiUpdateTaskRulesApiV2TasksTaskIdRulesRuleIdPatchRequest, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).updateTaskRulesApiV2TasksTaskIdRulesRuleIdPatch(requestParameters.updateRuleRequest, requestParameters.taskId, requestParameters.ruleId, options).then((request) => request(this.axios, this.basePath));
    }
}

