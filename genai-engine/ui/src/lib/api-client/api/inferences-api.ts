/* tslint:disable */
/* eslint-disable */
/**
 * Arthur GenAI Engine
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.79
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { PaginationSortMethod } from '../models';
// @ts-ignore
import type { QueryInferencesResponse } from '../models';
// @ts-ignore
import type { RuleResultEnum } from '../models';
// @ts-ignore
import type { RuleType } from '../models';
/**
 * InferencesApi - axios parameter creator
 * @export
 */
export const InferencesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Paginated inference querying. See parameters for available filters. Includes inferences from archived tasks and rules.
         * @summary Query Inferences
         * @param {Array<string>} [taskIds] Task ID to filter on.
         * @param {string} [taskName] Task name to filter on.
         * @param {string} [conversationId] Conversation ID to filter on.
         * @param {string} [inferenceId] Inference ID to filter on.
         * @param {string} [userId] User ID to filter on.
         * @param {string} [startTime] Inclusive start date in ISO8601 string format.
         * @param {string} [endTime] Exclusive end date in ISO8601 string format.
         * @param {Array<RuleType>} [ruleTypes] List of RuleType to query for. Any inference that ran any rule in the list will be returned. Defaults to all statuses. If used in conjunction with with rule_statuses, will return inferences with rules in the intersection of rule_types and rule_statuses.
         * @param {Array<RuleResultEnum>} [ruleStatuses] List of RuleResultEnum to query for. Any inference with any rule status in the list will be returned. Defaults to all statuses. If used in conjunction with with rule_types, will return inferences with rules in the intersection of rule_statuses and rule_types.
         * @param {Array<RuleResultEnum>} [promptStatuses] List of RuleResultEnum to query for at inference prompt stage level. Must be \&#39;Pass\&#39; / \&#39;Fail\&#39;. Defaults to both.
         * @param {Array<RuleResultEnum>} [responseStatuses] List of RuleResultEnum to query for at inference response stage level. Must be \&#39;Pass\&#39; / \&#39;Fail\&#39;. Defaults to both. Inferences missing responses will not be affected by this filter.
         * @param {boolean} [includeCount] Whether to include the total count of matching inferences. Set to False to improve query performance for large datasets. Count will be returned as -1 if set to False.
         * @param {PaginationSortMethod} [sort] Sort the results (asc/desc)
         * @param {number} [pageSize] Page size. Default is 10. Must be greater than 0 and less than 5000.
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryInferencesApiV2InferencesQueryGet: async (taskIds?: Array<string>, taskName?: string, conversationId?: string, inferenceId?: string, userId?: string, startTime?: string, endTime?: string, ruleTypes?: Array<RuleType>, ruleStatuses?: Array<RuleResultEnum>, promptStatuses?: Array<RuleResultEnum>, responseStatuses?: Array<RuleResultEnum>, includeCount?: boolean, sort?: PaginationSortMethod, pageSize?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/inferences/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (taskIds) {
                localVarQueryParameter['task_ids'] = taskIds;
            }

            if (taskName !== undefined) {
                localVarQueryParameter['task_name'] = taskName;
            }

            if (conversationId !== undefined) {
                localVarQueryParameter['conversation_id'] = conversationId;
            }

            if (inferenceId !== undefined) {
                localVarQueryParameter['inference_id'] = inferenceId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['start_time'] = (startTime as any instanceof Date) ?
                    (startTime as any).toISOString() :
                    startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['end_time'] = (endTime as any instanceof Date) ?
                    (endTime as any).toISOString() :
                    endTime;
            }

            if (ruleTypes) {
                localVarQueryParameter['rule_types'] = ruleTypes;
            }

            if (ruleStatuses) {
                localVarQueryParameter['rule_statuses'] = ruleStatuses;
            }

            if (promptStatuses) {
                localVarQueryParameter['prompt_statuses'] = promptStatuses;
            }

            if (responseStatuses) {
                localVarQueryParameter['response_statuses'] = responseStatuses;
            }

            if (includeCount !== undefined) {
                localVarQueryParameter['include_count'] = includeCount;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InferencesApi - functional programming interface
 * @export
 */
export const InferencesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InferencesApiAxiosParamCreator(configuration)
    return {
        /**
         * Paginated inference querying. See parameters for available filters. Includes inferences from archived tasks and rules.
         * @summary Query Inferences
         * @param {Array<string>} [taskIds] Task ID to filter on.
         * @param {string} [taskName] Task name to filter on.
         * @param {string} [conversationId] Conversation ID to filter on.
         * @param {string} [inferenceId] Inference ID to filter on.
         * @param {string} [userId] User ID to filter on.
         * @param {string} [startTime] Inclusive start date in ISO8601 string format.
         * @param {string} [endTime] Exclusive end date in ISO8601 string format.
         * @param {Array<RuleType>} [ruleTypes] List of RuleType to query for. Any inference that ran any rule in the list will be returned. Defaults to all statuses. If used in conjunction with with rule_statuses, will return inferences with rules in the intersection of rule_types and rule_statuses.
         * @param {Array<RuleResultEnum>} [ruleStatuses] List of RuleResultEnum to query for. Any inference with any rule status in the list will be returned. Defaults to all statuses. If used in conjunction with with rule_types, will return inferences with rules in the intersection of rule_statuses and rule_types.
         * @param {Array<RuleResultEnum>} [promptStatuses] List of RuleResultEnum to query for at inference prompt stage level. Must be \&#39;Pass\&#39; / \&#39;Fail\&#39;. Defaults to both.
         * @param {Array<RuleResultEnum>} [responseStatuses] List of RuleResultEnum to query for at inference response stage level. Must be \&#39;Pass\&#39; / \&#39;Fail\&#39;. Defaults to both. Inferences missing responses will not be affected by this filter.
         * @param {boolean} [includeCount] Whether to include the total count of matching inferences. Set to False to improve query performance for large datasets. Count will be returned as -1 if set to False.
         * @param {PaginationSortMethod} [sort] Sort the results (asc/desc)
         * @param {number} [pageSize] Page size. Default is 10. Must be greater than 0 and less than 5000.
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryInferencesApiV2InferencesQueryGet(taskIds?: Array<string>, taskName?: string, conversationId?: string, inferenceId?: string, userId?: string, startTime?: string, endTime?: string, ruleTypes?: Array<RuleType>, ruleStatuses?: Array<RuleResultEnum>, promptStatuses?: Array<RuleResultEnum>, responseStatuses?: Array<RuleResultEnum>, includeCount?: boolean, sort?: PaginationSortMethod, pageSize?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryInferencesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryInferencesApiV2InferencesQueryGet(taskIds, taskName, conversationId, inferenceId, userId, startTime, endTime, ruleTypes, ruleStatuses, promptStatuses, responseStatuses, includeCount, sort, pageSize, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InferencesApi.queryInferencesApiV2InferencesQueryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InferencesApi - factory interface
 * @export
 */
export const InferencesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InferencesApiFp(configuration)
    return {
        /**
         * Paginated inference querying. See parameters for available filters. Includes inferences from archived tasks and rules.
         * @summary Query Inferences
         * @param {InferencesApiQueryInferencesApiV2InferencesQueryGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryInferencesApiV2InferencesQueryGet(requestParameters: InferencesApiQueryInferencesApiV2InferencesQueryGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<QueryInferencesResponse> {
            return localVarFp.queryInferencesApiV2InferencesQueryGet(requestParameters.taskIds, requestParameters.taskName, requestParameters.conversationId, requestParameters.inferenceId, requestParameters.userId, requestParameters.startTime, requestParameters.endTime, requestParameters.ruleTypes, requestParameters.ruleStatuses, requestParameters.promptStatuses, requestParameters.responseStatuses, requestParameters.includeCount, requestParameters.sort, requestParameters.pageSize, requestParameters.page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InferencesApi - interface
 * @export
 * @interface InferencesApi
 */
export interface InferencesApiInterface {
    /**
     * Paginated inference querying. See parameters for available filters. Includes inferences from archived tasks and rules.
     * @summary Query Inferences
     * @param {InferencesApiQueryInferencesApiV2InferencesQueryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferencesApiInterface
     */
    queryInferencesApiV2InferencesQueryGet(requestParameters?: InferencesApiQueryInferencesApiV2InferencesQueryGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<QueryInferencesResponse>;

}

/**
 * Request parameters for queryInferencesApiV2InferencesQueryGet operation in InferencesApi.
 * @export
 * @interface InferencesApiQueryInferencesApiV2InferencesQueryGetRequest
 */
export interface InferencesApiQueryInferencesApiV2InferencesQueryGetRequest {
    /**
     * Task ID to filter on.
     * @type {Array<string>}
     * @memberof InferencesApiQueryInferencesApiV2InferencesQueryGet
     */
    readonly taskIds?: Array<string>

    /**
     * Task name to filter on.
     * @type {string}
     * @memberof InferencesApiQueryInferencesApiV2InferencesQueryGet
     */
    readonly taskName?: string

    /**
     * Conversation ID to filter on.
     * @type {string}
     * @memberof InferencesApiQueryInferencesApiV2InferencesQueryGet
     */
    readonly conversationId?: string

    /**
     * Inference ID to filter on.
     * @type {string}
     * @memberof InferencesApiQueryInferencesApiV2InferencesQueryGet
     */
    readonly inferenceId?: string

    /**
     * User ID to filter on.
     * @type {string}
     * @memberof InferencesApiQueryInferencesApiV2InferencesQueryGet
     */
    readonly userId?: string

    /**
     * Inclusive start date in ISO8601 string format.
     * @type {string}
     * @memberof InferencesApiQueryInferencesApiV2InferencesQueryGet
     */
    readonly startTime?: string

    /**
     * Exclusive end date in ISO8601 string format.
     * @type {string}
     * @memberof InferencesApiQueryInferencesApiV2InferencesQueryGet
     */
    readonly endTime?: string

    /**
     * List of RuleType to query for. Any inference that ran any rule in the list will be returned. Defaults to all statuses. If used in conjunction with with rule_statuses, will return inferences with rules in the intersection of rule_types and rule_statuses.
     * @type {Array<RuleType>}
     * @memberof InferencesApiQueryInferencesApiV2InferencesQueryGet
     */
    readonly ruleTypes?: Array<RuleType>

    /**
     * List of RuleResultEnum to query for. Any inference with any rule status in the list will be returned. Defaults to all statuses. If used in conjunction with with rule_types, will return inferences with rules in the intersection of rule_statuses and rule_types.
     * @type {Array<RuleResultEnum>}
     * @memberof InferencesApiQueryInferencesApiV2InferencesQueryGet
     */
    readonly ruleStatuses?: Array<RuleResultEnum>

    /**
     * List of RuleResultEnum to query for at inference prompt stage level. Must be \&#39;Pass\&#39; / \&#39;Fail\&#39;. Defaults to both.
     * @type {Array<RuleResultEnum>}
     * @memberof InferencesApiQueryInferencesApiV2InferencesQueryGet
     */
    readonly promptStatuses?: Array<RuleResultEnum>

    /**
     * List of RuleResultEnum to query for at inference response stage level. Must be \&#39;Pass\&#39; / \&#39;Fail\&#39;. Defaults to both. Inferences missing responses will not be affected by this filter.
     * @type {Array<RuleResultEnum>}
     * @memberof InferencesApiQueryInferencesApiV2InferencesQueryGet
     */
    readonly responseStatuses?: Array<RuleResultEnum>

    /**
     * Whether to include the total count of matching inferences. Set to False to improve query performance for large datasets. Count will be returned as -1 if set to False.
     * @type {boolean}
     * @memberof InferencesApiQueryInferencesApiV2InferencesQueryGet
     */
    readonly includeCount?: boolean

    /**
     * Sort the results (asc/desc)
     * @type {PaginationSortMethod}
     * @memberof InferencesApiQueryInferencesApiV2InferencesQueryGet
     */
    readonly sort?: PaginationSortMethod

    /**
     * Page size. Default is 10. Must be greater than 0 and less than 5000.
     * @type {number}
     * @memberof InferencesApiQueryInferencesApiV2InferencesQueryGet
     */
    readonly pageSize?: number

    /**
     * Page number
     * @type {number}
     * @memberof InferencesApiQueryInferencesApiV2InferencesQueryGet
     */
    readonly page?: number
}

/**
 * InferencesApi - object-oriented interface
 * @export
 * @class InferencesApi
 * @extends {BaseAPI}
 */
export class InferencesApi extends BaseAPI implements InferencesApiInterface {
    /**
     * Paginated inference querying. See parameters for available filters. Includes inferences from archived tasks and rules.
     * @summary Query Inferences
     * @param {InferencesApiQueryInferencesApiV2InferencesQueryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InferencesApi
     */
    public queryInferencesApiV2InferencesQueryGet(requestParameters: InferencesApiQueryInferencesApiV2InferencesQueryGetRequest = {}, options?: RawAxiosRequestConfig) {
        return InferencesApiFp(this.configuration).queryInferencesApiV2InferencesQueryGet(requestParameters.taskIds, requestParameters.taskName, requestParameters.conversationId, requestParameters.inferenceId, requestParameters.userId, requestParameters.startTime, requestParameters.endTime, requestParameters.ruleTypes, requestParameters.ruleStatuses, requestParameters.promptStatuses, requestParameters.responseStatuses, requestParameters.includeCount, requestParameters.sort, requestParameters.pageSize, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
}

