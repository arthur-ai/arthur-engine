/* tslint:disable */
/* eslint-disable */
/**
 * Arthur GenAI Engine
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.79
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiKeyResponse } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { NewApiKeyRequest } from '../models';
/**
 * APIKeysApi - axios parameter creator
 * @export
 */
export const APIKeysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generates a new API key. Up to 1000 active keys can exist at the same time by default. Contact your system administrator if you need more. Allowed roles are: DEFAULT-RULE-ADMIN, TASK-ADMIN, VALIDATION-USER, ORG-AUDITOR, ORG-ADMIN.
         * @summary Create Api Key
         * @param {NewApiKeyRequest} newApiKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKeyAuthApiKeysPost: async (newApiKeyRequest: NewApiKeyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newApiKeyRequest' is not null or undefined
            assertParamExists('createApiKeyAuthApiKeysPost', 'newApiKeyRequest', newApiKeyRequest)
            const localVarPath = `/auth/api_keys/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newApiKeyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deactivate Api Key
         * @param {string} apiKeyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateApiKeyAuthApiKeysDeactivateApiKeyIdDelete: async (apiKeyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKeyId' is not null or undefined
            assertParamExists('deactivateApiKeyAuthApiKeysDeactivateApiKeyIdDelete', 'apiKeyId', apiKeyId)
            const localVarPath = `/auth/api_keys/deactivate/{api_key_id}`
                .replace(`{${"api_key_id"}}`, encodeURIComponent(String(apiKeyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Active Api Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllActiveApiKeysAuthApiKeysGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/api_keys/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Api Key
         * @param {string} apiKeyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKeyAuthApiKeysApiKeyIdGet: async (apiKeyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKeyId' is not null or undefined
            assertParamExists('getApiKeyAuthApiKeysApiKeyIdGet', 'apiKeyId', apiKeyId)
            const localVarPath = `/auth/api_keys/{api_key_id}`
                .replace(`{${"api_key_id"}}`, encodeURIComponent(String(apiKeyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * APIKeysApi - functional programming interface
 * @export
 */
export const APIKeysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = APIKeysApiAxiosParamCreator(configuration)
    return {
        /**
         * Generates a new API key. Up to 1000 active keys can exist at the same time by default. Contact your system administrator if you need more. Allowed roles are: DEFAULT-RULE-ADMIN, TASK-ADMIN, VALIDATION-USER, ORG-AUDITOR, ORG-ADMIN.
         * @summary Create Api Key
         * @param {NewApiKeyRequest} newApiKeyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiKeyAuthApiKeysPost(newApiKeyRequest: NewApiKeyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiKeyAuthApiKeysPost(newApiKeyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIKeysApi.createApiKeyAuthApiKeysPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deactivate Api Key
         * @param {string} apiKeyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deactivateApiKeyAuthApiKeysDeactivateApiKeyIdDelete(apiKeyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deactivateApiKeyAuthApiKeysDeactivateApiKeyIdDelete(apiKeyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIKeysApi.deactivateApiKeyAuthApiKeysDeactivateApiKeyIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get All Active Api Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllActiveApiKeysAuthApiKeysGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiKeyResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllActiveApiKeysAuthApiKeysGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIKeysApi.getAllActiveApiKeysAuthApiKeysGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Api Key
         * @param {string} apiKeyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiKeyAuthApiKeysApiKeyIdGet(apiKeyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiKeyAuthApiKeysApiKeyIdGet(apiKeyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['APIKeysApi.getApiKeyAuthApiKeysApiKeyIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * APIKeysApi - factory interface
 * @export
 */
export const APIKeysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = APIKeysApiFp(configuration)
    return {
        /**
         * Generates a new API key. Up to 1000 active keys can exist at the same time by default. Contact your system administrator if you need more. Allowed roles are: DEFAULT-RULE-ADMIN, TASK-ADMIN, VALIDATION-USER, ORG-AUDITOR, ORG-ADMIN.
         * @summary Create Api Key
         * @param {APIKeysApiCreateApiKeyAuthApiKeysPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKeyAuthApiKeysPost(requestParameters: APIKeysApiCreateApiKeyAuthApiKeysPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiKeyResponse> {
            return localVarFp.createApiKeyAuthApiKeysPost(requestParameters.newApiKeyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deactivate Api Key
         * @param {APIKeysApiDeactivateApiKeyAuthApiKeysDeactivateApiKeyIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateApiKeyAuthApiKeysDeactivateApiKeyIdDelete(requestParameters: APIKeysApiDeactivateApiKeyAuthApiKeysDeactivateApiKeyIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiKeyResponse> {
            return localVarFp.deactivateApiKeyAuthApiKeysDeactivateApiKeyIdDelete(requestParameters.apiKeyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Active Api Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllActiveApiKeysAuthApiKeysGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiKeyResponse>> {
            return localVarFp.getAllActiveApiKeysAuthApiKeysGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Api Key
         * @param {APIKeysApiGetApiKeyAuthApiKeysApiKeyIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiKeyAuthApiKeysApiKeyIdGet(requestParameters: APIKeysApiGetApiKeyAuthApiKeysApiKeyIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiKeyResponse> {
            return localVarFp.getApiKeyAuthApiKeysApiKeyIdGet(requestParameters.apiKeyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * APIKeysApi - interface
 * @export
 * @interface APIKeysApi
 */
export interface APIKeysApiInterface {
    /**
     * Generates a new API key. Up to 1000 active keys can exist at the same time by default. Contact your system administrator if you need more. Allowed roles are: DEFAULT-RULE-ADMIN, TASK-ADMIN, VALIDATION-USER, ORG-AUDITOR, ORG-ADMIN.
     * @summary Create Api Key
     * @param {APIKeysApiCreateApiKeyAuthApiKeysPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApiInterface
     */
    createApiKeyAuthApiKeysPost(requestParameters: APIKeysApiCreateApiKeyAuthApiKeysPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiKeyResponse>;

    /**
     * 
     * @summary Deactivate Api Key
     * @param {APIKeysApiDeactivateApiKeyAuthApiKeysDeactivateApiKeyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApiInterface
     */
    deactivateApiKeyAuthApiKeysDeactivateApiKeyIdDelete(requestParameters: APIKeysApiDeactivateApiKeyAuthApiKeysDeactivateApiKeyIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiKeyResponse>;

    /**
     * 
     * @summary Get All Active Api Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApiInterface
     */
    getAllActiveApiKeysAuthApiKeysGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiKeyResponse>>;

    /**
     * 
     * @summary Get Api Key
     * @param {APIKeysApiGetApiKeyAuthApiKeysApiKeyIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApiInterface
     */
    getApiKeyAuthApiKeysApiKeyIdGet(requestParameters: APIKeysApiGetApiKeyAuthApiKeysApiKeyIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiKeyResponse>;

}

/**
 * Request parameters for createApiKeyAuthApiKeysPost operation in APIKeysApi.
 * @export
 * @interface APIKeysApiCreateApiKeyAuthApiKeysPostRequest
 */
export interface APIKeysApiCreateApiKeyAuthApiKeysPostRequest {
    /**
     * 
     * @type {NewApiKeyRequest}
     * @memberof APIKeysApiCreateApiKeyAuthApiKeysPost
     */
    readonly newApiKeyRequest: NewApiKeyRequest
}

/**
 * Request parameters for deactivateApiKeyAuthApiKeysDeactivateApiKeyIdDelete operation in APIKeysApi.
 * @export
 * @interface APIKeysApiDeactivateApiKeyAuthApiKeysDeactivateApiKeyIdDeleteRequest
 */
export interface APIKeysApiDeactivateApiKeyAuthApiKeysDeactivateApiKeyIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof APIKeysApiDeactivateApiKeyAuthApiKeysDeactivateApiKeyIdDelete
     */
    readonly apiKeyId: string
}

/**
 * Request parameters for getApiKeyAuthApiKeysApiKeyIdGet operation in APIKeysApi.
 * @export
 * @interface APIKeysApiGetApiKeyAuthApiKeysApiKeyIdGetRequest
 */
export interface APIKeysApiGetApiKeyAuthApiKeysApiKeyIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof APIKeysApiGetApiKeyAuthApiKeysApiKeyIdGet
     */
    readonly apiKeyId: string
}

/**
 * APIKeysApi - object-oriented interface
 * @export
 * @class APIKeysApi
 * @extends {BaseAPI}
 */
export class APIKeysApi extends BaseAPI implements APIKeysApiInterface {
    /**
     * Generates a new API key. Up to 1000 active keys can exist at the same time by default. Contact your system administrator if you need more. Allowed roles are: DEFAULT-RULE-ADMIN, TASK-ADMIN, VALIDATION-USER, ORG-AUDITOR, ORG-ADMIN.
     * @summary Create Api Key
     * @param {APIKeysApiCreateApiKeyAuthApiKeysPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    public createApiKeyAuthApiKeysPost(requestParameters: APIKeysApiCreateApiKeyAuthApiKeysPostRequest, options?: RawAxiosRequestConfig) {
        return APIKeysApiFp(this.configuration).createApiKeyAuthApiKeysPost(requestParameters.newApiKeyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deactivate Api Key
     * @param {APIKeysApiDeactivateApiKeyAuthApiKeysDeactivateApiKeyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    public deactivateApiKeyAuthApiKeysDeactivateApiKeyIdDelete(requestParameters: APIKeysApiDeactivateApiKeyAuthApiKeysDeactivateApiKeyIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return APIKeysApiFp(this.configuration).deactivateApiKeyAuthApiKeysDeactivateApiKeyIdDelete(requestParameters.apiKeyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Active Api Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    public getAllActiveApiKeysAuthApiKeysGet(options?: RawAxiosRequestConfig) {
        return APIKeysApiFp(this.configuration).getAllActiveApiKeysAuthApiKeysGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Api Key
     * @param {APIKeysApiGetApiKeyAuthApiKeysApiKeyIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    public getApiKeyAuthApiKeysApiKeyIdGet(requestParameters: APIKeysApiGetApiKeyAuthApiKeysApiKeyIdGetRequest, options?: RawAxiosRequestConfig) {
        return APIKeysApiFp(this.configuration).getApiKeyAuthApiKeysApiKeyIdGet(requestParameters.apiKeyId, options).then((request) => request(this.axios, this.basePath));
    }
}

