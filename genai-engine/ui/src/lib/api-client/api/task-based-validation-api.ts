/* tslint:disable */
/* eslint-disable */
/**
 * Arthur GenAI Engine
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.79
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPError } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { PromptValidationRequest } from '../models';
// @ts-ignore
import type { ResponseValidationRequest } from '../models';
// @ts-ignore
import type { ValidationResult } from '../models';
/**
 * TaskBasedValidationApi - axios parameter creator
 * @export
 */
export const TaskBasedValidationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Validate a prompt based on the configured rules for this task. Note: Rules related to specific tasks are cached for 60 seconds.
         * @summary Validate Prompt Endpoint
         * @param {PromptValidationRequest} promptValidationRequest 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatePromptEndpointApiV2TasksTaskIdValidatePromptPost: async (promptValidationRequest: PromptValidationRequest, taskId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promptValidationRequest' is not null or undefined
            assertParamExists('validatePromptEndpointApiV2TasksTaskIdValidatePromptPost', 'promptValidationRequest', promptValidationRequest)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('validatePromptEndpointApiV2TasksTaskIdValidatePromptPost', 'taskId', taskId)
            const localVarPath = `/api/v2/tasks/{task_id}/validate_prompt`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(promptValidationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validate a response based on the configured rules for this task. Inference ID corresponds to the previously validated associated prompt’s inference id. Must provide context if a Hallucination Rule is an enabled task rule. Note: Rules related to specific tasks are cached for 60 seconds.
         * @summary Validate Response Endpoint
         * @param {ResponseValidationRequest} responseValidationRequest 
         * @param {string} inferenceId 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPost: async (responseValidationRequest: ResponseValidationRequest, inferenceId: string, taskId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'responseValidationRequest' is not null or undefined
            assertParamExists('validateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPost', 'responseValidationRequest', responseValidationRequest)
            // verify required parameter 'inferenceId' is not null or undefined
            assertParamExists('validateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPost', 'inferenceId', inferenceId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('validateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPost', 'taskId', taskId)
            const localVarPath = `/api/v2/tasks/{task_id}/validate_response/{inference_id}`
                .replace(`{${"inference_id"}}`, encodeURIComponent(String(inferenceId)))
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(responseValidationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskBasedValidationApi - functional programming interface
 * @export
 */
export const TaskBasedValidationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskBasedValidationApiAxiosParamCreator(configuration)
    return {
        /**
         * Validate a prompt based on the configured rules for this task. Note: Rules related to specific tasks are cached for 60 seconds.
         * @summary Validate Prompt Endpoint
         * @param {PromptValidationRequest} promptValidationRequest 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validatePromptEndpointApiV2TasksTaskIdValidatePromptPost(promptValidationRequest: PromptValidationRequest, taskId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validatePromptEndpointApiV2TasksTaskIdValidatePromptPost(promptValidationRequest, taskId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskBasedValidationApi.validatePromptEndpointApiV2TasksTaskIdValidatePromptPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Validate a response based on the configured rules for this task. Inference ID corresponds to the previously validated associated prompt’s inference id. Must provide context if a Hallucination Rule is an enabled task rule. Note: Rules related to specific tasks are cached for 60 seconds.
         * @summary Validate Response Endpoint
         * @param {ResponseValidationRequest} responseValidationRequest 
         * @param {string} inferenceId 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPost(responseValidationRequest: ResponseValidationRequest, inferenceId: string, taskId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPost(responseValidationRequest, inferenceId, taskId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskBasedValidationApi.validateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TaskBasedValidationApi - factory interface
 * @export
 */
export const TaskBasedValidationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskBasedValidationApiFp(configuration)
    return {
        /**
         * Validate a prompt based on the configured rules for this task. Note: Rules related to specific tasks are cached for 60 seconds.
         * @summary Validate Prompt Endpoint
         * @param {TaskBasedValidationApiValidatePromptEndpointApiV2TasksTaskIdValidatePromptPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatePromptEndpointApiV2TasksTaskIdValidatePromptPost(requestParameters: TaskBasedValidationApiValidatePromptEndpointApiV2TasksTaskIdValidatePromptPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ValidationResult> {
            return localVarFp.validatePromptEndpointApiV2TasksTaskIdValidatePromptPost(requestParameters.promptValidationRequest, requestParameters.taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * Validate a response based on the configured rules for this task. Inference ID corresponds to the previously validated associated prompt’s inference id. Must provide context if a Hallucination Rule is an enabled task rule. Note: Rules related to specific tasks are cached for 60 seconds.
         * @summary Validate Response Endpoint
         * @param {TaskBasedValidationApiValidateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPost(requestParameters: TaskBasedValidationApiValidateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ValidationResult> {
            return localVarFp.validateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPost(requestParameters.responseValidationRequest, requestParameters.inferenceId, requestParameters.taskId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskBasedValidationApi - interface
 * @export
 * @interface TaskBasedValidationApi
 */
export interface TaskBasedValidationApiInterface {
    /**
     * Validate a prompt based on the configured rules for this task. Note: Rules related to specific tasks are cached for 60 seconds.
     * @summary Validate Prompt Endpoint
     * @param {TaskBasedValidationApiValidatePromptEndpointApiV2TasksTaskIdValidatePromptPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskBasedValidationApiInterface
     */
    validatePromptEndpointApiV2TasksTaskIdValidatePromptPost(requestParameters: TaskBasedValidationApiValidatePromptEndpointApiV2TasksTaskIdValidatePromptPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ValidationResult>;

    /**
     * Validate a response based on the configured rules for this task. Inference ID corresponds to the previously validated associated prompt’s inference id. Must provide context if a Hallucination Rule is an enabled task rule. Note: Rules related to specific tasks are cached for 60 seconds.
     * @summary Validate Response Endpoint
     * @param {TaskBasedValidationApiValidateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskBasedValidationApiInterface
     */
    validateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPost(requestParameters: TaskBasedValidationApiValidateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ValidationResult>;

}

/**
 * Request parameters for validatePromptEndpointApiV2TasksTaskIdValidatePromptPost operation in TaskBasedValidationApi.
 * @export
 * @interface TaskBasedValidationApiValidatePromptEndpointApiV2TasksTaskIdValidatePromptPostRequest
 */
export interface TaskBasedValidationApiValidatePromptEndpointApiV2TasksTaskIdValidatePromptPostRequest {
    /**
     * 
     * @type {PromptValidationRequest}
     * @memberof TaskBasedValidationApiValidatePromptEndpointApiV2TasksTaskIdValidatePromptPost
     */
    readonly promptValidationRequest: PromptValidationRequest

    /**
     * 
     * @type {string}
     * @memberof TaskBasedValidationApiValidatePromptEndpointApiV2TasksTaskIdValidatePromptPost
     */
    readonly taskId: string
}

/**
 * Request parameters for validateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPost operation in TaskBasedValidationApi.
 * @export
 * @interface TaskBasedValidationApiValidateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPostRequest
 */
export interface TaskBasedValidationApiValidateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPostRequest {
    /**
     * 
     * @type {ResponseValidationRequest}
     * @memberof TaskBasedValidationApiValidateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPost
     */
    readonly responseValidationRequest: ResponseValidationRequest

    /**
     * 
     * @type {string}
     * @memberof TaskBasedValidationApiValidateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPost
     */
    readonly inferenceId: string

    /**
     * 
     * @type {string}
     * @memberof TaskBasedValidationApiValidateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPost
     */
    readonly taskId: string
}

/**
 * TaskBasedValidationApi - object-oriented interface
 * @export
 * @class TaskBasedValidationApi
 * @extends {BaseAPI}
 */
export class TaskBasedValidationApi extends BaseAPI implements TaskBasedValidationApiInterface {
    /**
     * Validate a prompt based on the configured rules for this task. Note: Rules related to specific tasks are cached for 60 seconds.
     * @summary Validate Prompt Endpoint
     * @param {TaskBasedValidationApiValidatePromptEndpointApiV2TasksTaskIdValidatePromptPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskBasedValidationApi
     */
    public validatePromptEndpointApiV2TasksTaskIdValidatePromptPost(requestParameters: TaskBasedValidationApiValidatePromptEndpointApiV2TasksTaskIdValidatePromptPostRequest, options?: RawAxiosRequestConfig) {
        return TaskBasedValidationApiFp(this.configuration).validatePromptEndpointApiV2TasksTaskIdValidatePromptPost(requestParameters.promptValidationRequest, requestParameters.taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Validate a response based on the configured rules for this task. Inference ID corresponds to the previously validated associated prompt’s inference id. Must provide context if a Hallucination Rule is an enabled task rule. Note: Rules related to specific tasks are cached for 60 seconds.
     * @summary Validate Response Endpoint
     * @param {TaskBasedValidationApiValidateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskBasedValidationApi
     */
    public validateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPost(requestParameters: TaskBasedValidationApiValidateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPostRequest, options?: RawAxiosRequestConfig) {
        return TaskBasedValidationApiFp(this.configuration).validateResponseEndpointApiV2TasksTaskIdValidateResponseInferenceIdPost(requestParameters.responseValidationRequest, requestParameters.inferenceId, requestParameters.taskId, options).then((request) => request(this.axios, this.basePath));
    }
}

