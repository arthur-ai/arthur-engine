/* tslint:disable */
/* eslint-disable */
/**
 * Arthur GenAI Engine
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.79
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { TokenUsageResponse } from '../models';
// @ts-ignore
import type { TokenUsageScope } from '../models';
/**
 * UsageApi - axios parameter creator
 * @export
 */
export const UsageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get token usage.
         * @summary Get Token Usage
         * @param {string} [startTime] Inclusive start date in ISO8601 string format. Defaults to the beginning of the current day if not provided.
         * @param {string} [endTime] Exclusive end date in ISO8601 string format. Defaults to the end of the current day if not provided.
         * @param {Array<TokenUsageScope>} [groupBy] Entities to group token counts on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenUsageApiV2UsageTokensGet: async (startTime?: string, endTime?: string, groupBy?: Array<TokenUsageScope>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/usage/tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startTime !== undefined) {
                localVarQueryParameter['start_time'] = (startTime as any instanceof Date) ?
                    (startTime as any).toISOString() :
                    startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['end_time'] = (endTime as any instanceof Date) ?
                    (endTime as any).toISOString() :
                    endTime;
            }

            if (groupBy) {
                localVarQueryParameter['group_by'] = groupBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsageApi - functional programming interface
 * @export
 */
export const UsageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsageApiAxiosParamCreator(configuration)
    return {
        /**
         * Get token usage.
         * @summary Get Token Usage
         * @param {string} [startTime] Inclusive start date in ISO8601 string format. Defaults to the beginning of the current day if not provided.
         * @param {string} [endTime] Exclusive end date in ISO8601 string format. Defaults to the end of the current day if not provided.
         * @param {Array<TokenUsageScope>} [groupBy] Entities to group token counts on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTokenUsageApiV2UsageTokensGet(startTime?: string, endTime?: string, groupBy?: Array<TokenUsageScope>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TokenUsageResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTokenUsageApiV2UsageTokensGet(startTime, endTime, groupBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsageApi.getTokenUsageApiV2UsageTokensGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsageApi - factory interface
 * @export
 */
export const UsageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsageApiFp(configuration)
    return {
        /**
         * Get token usage.
         * @summary Get Token Usage
         * @param {UsageApiGetTokenUsageApiV2UsageTokensGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenUsageApiV2UsageTokensGet(requestParameters: UsageApiGetTokenUsageApiV2UsageTokensGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<TokenUsageResponse>> {
            return localVarFp.getTokenUsageApiV2UsageTokensGet(requestParameters.startTime, requestParameters.endTime, requestParameters.groupBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsageApi - interface
 * @export
 * @interface UsageApi
 */
export interface UsageApiInterface {
    /**
     * Get token usage.
     * @summary Get Token Usage
     * @param {UsageApiGetTokenUsageApiV2UsageTokensGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApiInterface
     */
    getTokenUsageApiV2UsageTokensGet(requestParameters?: UsageApiGetTokenUsageApiV2UsageTokensGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<TokenUsageResponse>>;

}

/**
 * Request parameters for getTokenUsageApiV2UsageTokensGet operation in UsageApi.
 * @export
 * @interface UsageApiGetTokenUsageApiV2UsageTokensGetRequest
 */
export interface UsageApiGetTokenUsageApiV2UsageTokensGetRequest {
    /**
     * Inclusive start date in ISO8601 string format. Defaults to the beginning of the current day if not provided.
     * @type {string}
     * @memberof UsageApiGetTokenUsageApiV2UsageTokensGet
     */
    readonly startTime?: string

    /**
     * Exclusive end date in ISO8601 string format. Defaults to the end of the current day if not provided.
     * @type {string}
     * @memberof UsageApiGetTokenUsageApiV2UsageTokensGet
     */
    readonly endTime?: string

    /**
     * Entities to group token counts on.
     * @type {Array<TokenUsageScope>}
     * @memberof UsageApiGetTokenUsageApiV2UsageTokensGet
     */
    readonly groupBy?: Array<TokenUsageScope>
}

/**
 * UsageApi - object-oriented interface
 * @export
 * @class UsageApi
 * @extends {BaseAPI}
 */
export class UsageApi extends BaseAPI implements UsageApiInterface {
    /**
     * Get token usage.
     * @summary Get Token Usage
     * @param {UsageApiGetTokenUsageApiV2UsageTokensGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApi
     */
    public getTokenUsageApiV2UsageTokensGet(requestParameters: UsageApiGetTokenUsageApiV2UsageTokensGetRequest = {}, options?: RawAxiosRequestConfig) {
        return UsageApiFp(this.configuration).getTokenUsageApiV2UsageTokensGet(requestParameters.startTime, requestParameters.endTime, requestParameters.groupBy, options).then((request) => request(this.axios, this.basePath));
    }
}

