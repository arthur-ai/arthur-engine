/* tslint:disable */
/* eslint-disable */
/**
 * Arthur GenAI Engine
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.79
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ConversationId } from '../models';
// @ts-ignore
import type { FeedbackId } from '../models';
// @ts-ignore
import type { FeedbackRequest } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { InferenceFeedbackResponse } from '../models';
// @ts-ignore
import type { InferenceId } from '../models';
// @ts-ignore
import type { PaginationSortMethod } from '../models';
// @ts-ignore
import type { QueryFeedbackResponse } from '../models';
// @ts-ignore
import type { Score } from '../models';
// @ts-ignore
import type { Target } from '../models';
// @ts-ignore
import type { TaskId } from '../models';
/**
 * FeedbackApi - axios parameter creator
 * @export
 */
export const FeedbackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Post feedback for LLM Application.
         * @summary Post Feedback
         * @param {FeedbackRequest} feedbackRequest 
         * @param {string} inferenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFeedbackApiV2FeedbackInferenceIdPost: async (feedbackRequest: FeedbackRequest, inferenceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedbackRequest' is not null or undefined
            assertParamExists('postFeedbackApiV2FeedbackInferenceIdPost', 'feedbackRequest', feedbackRequest)
            // verify required parameter 'inferenceId' is not null or undefined
            assertParamExists('postFeedbackApiV2FeedbackInferenceIdPost', 'inferenceId', inferenceId)
            const localVarPath = `/api/v2/feedback/{inference_id}`
                .replace(`{${"inference_id"}}`, encodeURIComponent(String(inferenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(feedbackRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Paginated feedback querying. See parameters for available filters. Includes feedback from archived tasks and rules.
         * @summary Query Feedback
         * @param {string | null} [startTime] Inclusive start date in ISO8601 string format
         * @param {string | null} [endTime] Exclusive end date in ISO8601 string format
         * @param {FeedbackId | null} [feedbackId] Feedback ID to filter on
         * @param {InferenceId | null} [inferenceId] Inference ID to filter on
         * @param {Target | null} [target] Target of the feedback. Must be one of [\&#39;context\&#39;, \&#39;response_results\&#39;, \&#39;prompt_results\&#39;]
         * @param {Score | null} [score] Score of the feedback. Must be an integer.
         * @param {string | null} [feedbackUserId] User ID of the user giving feedback to filter on (query will perform fuzzy search)
         * @param {ConversationId | null} [conversationId] Conversation ID to filter on
         * @param {TaskId | null} [taskId] Task ID to filter on
         * @param {string | null} [inferenceUserId] User ID of the user who created the inferences to filter on (query will perform fuzzy search)
         * @param {PaginationSortMethod} [sort] Sort the results (asc/desc)
         * @param {number} [pageSize] Page size. Default is 10. Must be greater than 0 and less than 5000.
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryFeedbackApiV2FeedbackQueryGet: async (startTime?: string | null, endTime?: string | null, feedbackId?: FeedbackId | null, inferenceId?: InferenceId | null, target?: Target | null, score?: Score | null, feedbackUserId?: string | null, conversationId?: ConversationId | null, taskId?: TaskId | null, inferenceUserId?: string | null, sort?: PaginationSortMethod, pageSize?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/feedback/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication API Key required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startTime !== undefined) {
                localVarQueryParameter['start_time'] = (startTime as any instanceof Date) ?
                    (startTime as any).toISOString() :
                    startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['end_time'] = (endTime as any instanceof Date) ?
                    (endTime as any).toISOString() :
                    endTime;
            }

            if (feedbackId !== undefined) {
                for (const [key, value] of Object.entries(feedbackId)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (inferenceId !== undefined) {
                for (const [key, value] of Object.entries(inferenceId)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (target !== undefined) {
                for (const [key, value] of Object.entries(target)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (score !== undefined) {
                for (const [key, value] of Object.entries(score)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (feedbackUserId !== undefined) {
                localVarQueryParameter['feedback_user_id'] = feedbackUserId;
            }

            if (conversationId !== undefined) {
                for (const [key, value] of Object.entries(conversationId)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (taskId !== undefined) {
                for (const [key, value] of Object.entries(taskId)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (inferenceUserId !== undefined) {
                localVarQueryParameter['inference_user_id'] = inferenceUserId;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedbackApi - functional programming interface
 * @export
 */
export const FeedbackApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeedbackApiAxiosParamCreator(configuration)
    return {
        /**
         * Post feedback for LLM Application.
         * @summary Post Feedback
         * @param {FeedbackRequest} feedbackRequest 
         * @param {string} inferenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFeedbackApiV2FeedbackInferenceIdPost(feedbackRequest: FeedbackRequest, inferenceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InferenceFeedbackResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFeedbackApiV2FeedbackInferenceIdPost(feedbackRequest, inferenceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedbackApi.postFeedbackApiV2FeedbackInferenceIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Paginated feedback querying. See parameters for available filters. Includes feedback from archived tasks and rules.
         * @summary Query Feedback
         * @param {string | null} [startTime] Inclusive start date in ISO8601 string format
         * @param {string | null} [endTime] Exclusive end date in ISO8601 string format
         * @param {FeedbackId | null} [feedbackId] Feedback ID to filter on
         * @param {InferenceId | null} [inferenceId] Inference ID to filter on
         * @param {Target | null} [target] Target of the feedback. Must be one of [\&#39;context\&#39;, \&#39;response_results\&#39;, \&#39;prompt_results\&#39;]
         * @param {Score | null} [score] Score of the feedback. Must be an integer.
         * @param {string | null} [feedbackUserId] User ID of the user giving feedback to filter on (query will perform fuzzy search)
         * @param {ConversationId | null} [conversationId] Conversation ID to filter on
         * @param {TaskId | null} [taskId] Task ID to filter on
         * @param {string | null} [inferenceUserId] User ID of the user who created the inferences to filter on (query will perform fuzzy search)
         * @param {PaginationSortMethod} [sort] Sort the results (asc/desc)
         * @param {number} [pageSize] Page size. Default is 10. Must be greater than 0 and less than 5000.
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryFeedbackApiV2FeedbackQueryGet(startTime?: string | null, endTime?: string | null, feedbackId?: FeedbackId | null, inferenceId?: InferenceId | null, target?: Target | null, score?: Score | null, feedbackUserId?: string | null, conversationId?: ConversationId | null, taskId?: TaskId | null, inferenceUserId?: string | null, sort?: PaginationSortMethod, pageSize?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryFeedbackResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryFeedbackApiV2FeedbackQueryGet(startTime, endTime, feedbackId, inferenceId, target, score, feedbackUserId, conversationId, taskId, inferenceUserId, sort, pageSize, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeedbackApi.queryFeedbackApiV2FeedbackQueryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FeedbackApi - factory interface
 * @export
 */
export const FeedbackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeedbackApiFp(configuration)
    return {
        /**
         * Post feedback for LLM Application.
         * @summary Post Feedback
         * @param {FeedbackApiPostFeedbackApiV2FeedbackInferenceIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFeedbackApiV2FeedbackInferenceIdPost(requestParameters: FeedbackApiPostFeedbackApiV2FeedbackInferenceIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<InferenceFeedbackResponse> {
            return localVarFp.postFeedbackApiV2FeedbackInferenceIdPost(requestParameters.feedbackRequest, requestParameters.inferenceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Paginated feedback querying. See parameters for available filters. Includes feedback from archived tasks and rules.
         * @summary Query Feedback
         * @param {FeedbackApiQueryFeedbackApiV2FeedbackQueryGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryFeedbackApiV2FeedbackQueryGet(requestParameters: FeedbackApiQueryFeedbackApiV2FeedbackQueryGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<QueryFeedbackResponse> {
            return localVarFp.queryFeedbackApiV2FeedbackQueryGet(requestParameters.startTime, requestParameters.endTime, requestParameters.feedbackId, requestParameters.inferenceId, requestParameters.target, requestParameters.score, requestParameters.feedbackUserId, requestParameters.conversationId, requestParameters.taskId, requestParameters.inferenceUserId, requestParameters.sort, requestParameters.pageSize, requestParameters.page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeedbackApi - interface
 * @export
 * @interface FeedbackApi
 */
export interface FeedbackApiInterface {
    /**
     * Post feedback for LLM Application.
     * @summary Post Feedback
     * @param {FeedbackApiPostFeedbackApiV2FeedbackInferenceIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApiInterface
     */
    postFeedbackApiV2FeedbackInferenceIdPost(requestParameters: FeedbackApiPostFeedbackApiV2FeedbackInferenceIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<InferenceFeedbackResponse>;

    /**
     * Paginated feedback querying. See parameters for available filters. Includes feedback from archived tasks and rules.
     * @summary Query Feedback
     * @param {FeedbackApiQueryFeedbackApiV2FeedbackQueryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApiInterface
     */
    queryFeedbackApiV2FeedbackQueryGet(requestParameters?: FeedbackApiQueryFeedbackApiV2FeedbackQueryGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<QueryFeedbackResponse>;

}

/**
 * Request parameters for postFeedbackApiV2FeedbackInferenceIdPost operation in FeedbackApi.
 * @export
 * @interface FeedbackApiPostFeedbackApiV2FeedbackInferenceIdPostRequest
 */
export interface FeedbackApiPostFeedbackApiV2FeedbackInferenceIdPostRequest {
    /**
     * 
     * @type {FeedbackRequest}
     * @memberof FeedbackApiPostFeedbackApiV2FeedbackInferenceIdPost
     */
    readonly feedbackRequest: FeedbackRequest

    /**
     * 
     * @type {string}
     * @memberof FeedbackApiPostFeedbackApiV2FeedbackInferenceIdPost
     */
    readonly inferenceId: string
}

/**
 * Request parameters for queryFeedbackApiV2FeedbackQueryGet operation in FeedbackApi.
 * @export
 * @interface FeedbackApiQueryFeedbackApiV2FeedbackQueryGetRequest
 */
export interface FeedbackApiQueryFeedbackApiV2FeedbackQueryGetRequest {
    /**
     * Inclusive start date in ISO8601 string format
     * @type {string}
     * @memberof FeedbackApiQueryFeedbackApiV2FeedbackQueryGet
     */
    readonly startTime?: string | null

    /**
     * Exclusive end date in ISO8601 string format
     * @type {string}
     * @memberof FeedbackApiQueryFeedbackApiV2FeedbackQueryGet
     */
    readonly endTime?: string | null

    /**
     * Feedback ID to filter on
     * @type {FeedbackId}
     * @memberof FeedbackApiQueryFeedbackApiV2FeedbackQueryGet
     */
    readonly feedbackId?: FeedbackId | null

    /**
     * Inference ID to filter on
     * @type {InferenceId}
     * @memberof FeedbackApiQueryFeedbackApiV2FeedbackQueryGet
     */
    readonly inferenceId?: InferenceId | null

    /**
     * Target of the feedback. Must be one of [\&#39;context\&#39;, \&#39;response_results\&#39;, \&#39;prompt_results\&#39;]
     * @type {Target}
     * @memberof FeedbackApiQueryFeedbackApiV2FeedbackQueryGet
     */
    readonly target?: Target | null

    /**
     * Score of the feedback. Must be an integer.
     * @type {Score}
     * @memberof FeedbackApiQueryFeedbackApiV2FeedbackQueryGet
     */
    readonly score?: Score | null

    /**
     * User ID of the user giving feedback to filter on (query will perform fuzzy search)
     * @type {string}
     * @memberof FeedbackApiQueryFeedbackApiV2FeedbackQueryGet
     */
    readonly feedbackUserId?: string | null

    /**
     * Conversation ID to filter on
     * @type {ConversationId}
     * @memberof FeedbackApiQueryFeedbackApiV2FeedbackQueryGet
     */
    readonly conversationId?: ConversationId | null

    /**
     * Task ID to filter on
     * @type {TaskId}
     * @memberof FeedbackApiQueryFeedbackApiV2FeedbackQueryGet
     */
    readonly taskId?: TaskId | null

    /**
     * User ID of the user who created the inferences to filter on (query will perform fuzzy search)
     * @type {string}
     * @memberof FeedbackApiQueryFeedbackApiV2FeedbackQueryGet
     */
    readonly inferenceUserId?: string | null

    /**
     * Sort the results (asc/desc)
     * @type {PaginationSortMethod}
     * @memberof FeedbackApiQueryFeedbackApiV2FeedbackQueryGet
     */
    readonly sort?: PaginationSortMethod

    /**
     * Page size. Default is 10. Must be greater than 0 and less than 5000.
     * @type {number}
     * @memberof FeedbackApiQueryFeedbackApiV2FeedbackQueryGet
     */
    readonly pageSize?: number

    /**
     * Page number
     * @type {number}
     * @memberof FeedbackApiQueryFeedbackApiV2FeedbackQueryGet
     */
    readonly page?: number
}

/**
 * FeedbackApi - object-oriented interface
 * @export
 * @class FeedbackApi
 * @extends {BaseAPI}
 */
export class FeedbackApi extends BaseAPI implements FeedbackApiInterface {
    /**
     * Post feedback for LLM Application.
     * @summary Post Feedback
     * @param {FeedbackApiPostFeedbackApiV2FeedbackInferenceIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    public postFeedbackApiV2FeedbackInferenceIdPost(requestParameters: FeedbackApiPostFeedbackApiV2FeedbackInferenceIdPostRequest, options?: RawAxiosRequestConfig) {
        return FeedbackApiFp(this.configuration).postFeedbackApiV2FeedbackInferenceIdPost(requestParameters.feedbackRequest, requestParameters.inferenceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Paginated feedback querying. See parameters for available filters. Includes feedback from archived tasks and rules.
     * @summary Query Feedback
     * @param {FeedbackApiQueryFeedbackApiV2FeedbackQueryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedbackApi
     */
    public queryFeedbackApiV2FeedbackQueryGet(requestParameters: FeedbackApiQueryFeedbackApiV2FeedbackQueryGetRequest = {}, options?: RawAxiosRequestConfig) {
        return FeedbackApiFp(this.configuration).queryFeedbackApiV2FeedbackQueryGet(requestParameters.startTime, requestParameters.endTime, requestParameters.feedbackId, requestParameters.inferenceId, requestParameters.target, requestParameters.score, requestParameters.feedbackUserId, requestParameters.conversationId, requestParameters.taskId, requestParameters.inferenceUserId, requestParameters.sort, requestParameters.pageSize, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
}

