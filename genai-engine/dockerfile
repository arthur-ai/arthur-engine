################################################################################
#                                                                              #
#       Build GenAI Engine on slim-bookworm images for cpu and gpu             #
#                                                                              #
################################################################################

# TORCH_DEVICE must be either "cpu" or "gpu"
ARG TORCH_DEVICE=cpu

# Preinstall Stage: Install Python dependencies
FROM python:3.12.8-slim-bookworm AS preinstall

# Copy requirements files so this layer can be cached / reused when files are otherwise changed in the repo
COPY pyproject.toml /app/
COPY poetry.lock /app/

# Install Python dependencies
RUN pip3 install poetry==1.8.5
# Set working directory
WORKDIR /app

ENV PYTHONPATH="$PYTHONPATH:/app/src"
RUN poetry config virtualenvs.create false && poetry install --without dev,performance --no-ansi --no-root

# install lsof for healthchecks
RUN apt-get update && apt-get install -y lsof && apt-get clean && rm -rf /var/lib/apt/lists/*


# GPU Install: Install PyTorch for GPU
FROM preinstall AS gpu-install
COPY requirements-gpu.txt /tmp/requirements-torch.txt
RUN poetry run pip install --no-cache-dir --upgrade --force-reinstall -r /tmp/requirements-torch.txt


# CPU Install: no-op for now
FROM preinstall AS cpu-install

# UI Build Stage: Build the React SPA
FROM node:20-alpine AS ui-build

WORKDIR /app/ui

# Copy UI source code
COPY ui/ ./

# Install UI dependencies
RUN corepack enable && yarn install --immutable

# Build the UI as static files
RUN yarn build

# Copy the built static files
RUN cp -r dist /app/ui-dist

# Install Stage: Install GenAI Engine on either CPU Install or GPU Install depending on the TORCH_DEVICE variable
FROM ${TORCH_DEVICE}-install AS install
# Copy backend files
COPY src /app/src

# Copy version file to server directory
COPY version /app/src/

# Copy env file to run directory
COPY .env /app/

# Add telemetry setting based on build arg
ARG ENABLE_TELEMETRY=false
RUN echo "TELEMETRY_ENABLED=${ENABLE_TELEMETRY}" >> /app/.env

# Download AWS RDS global certificate bundle
RUN apt-get update && apt-get install -y curl && \
    curl -o /app/postgres-cert.pem https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem

# Copy alembic files to run directory
COPY alembic /app/alembic
COPY alembic.ini /app/

# Copy built UI from ui-build stage
COPY --from=ui-build /app/ui-dist /app/static


#####################################################################################
#                                                                                   #
#    Copy GenAI Engine from install to distroless image to eliminate image bloat    #
#                                                                                   #
#####################################################################################

# Final Stage(s): Create genai-engine image
FROM gcr.io/distroless/python3-debian12:nonroot AS genai_engine_distroless_base

COPY --from=install /bin/sh /bin/sh
COPY --from=install /bin/bash /bin/bash
COPY --from=install /bin/env /bin/env
COPY --from=install /bin/printenv /bin/printenv
COPY --from=install /usr/bin/sh /usr/bin/sh
COPY --from=install /usr/bin/bash /usr/bin/bash
COPY --from=install /usr/bin/env /usr/bin/env
COPY --from=install /usr/bin/printenv /usr/bin/printenv
COPY --from=install /usr/bin/lsof /usr/bin/lsof
COPY --from=install /usr/lib /usr/lib
COPY --from=install /usr/local/lib/ /usr/local/lib/
COPY --from=install /usr/local/bin/ /usr/local/bin/
COPY --from=install /etc/ld.so.cache /etc/ld.so.cache
COPY --from=install --chown=nonroot:nonroot /app/ /home/nonroot/app/
COPY --from=install --chown=nonroot:nonroot /root/.cache/pypoetry/ /home/nonroot/.cache/pypoetry/
COPY --from=install --chown=nonroot:nonroot /root/.config/pypoetry/ /home/nonroot/.config/pypoetry/

ENV PATH="/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH"
ENV PYTHONPATH="$PYTHONPATH:/home/nonroot/app/src"
ENV POETRY_VIRTUALENVS_PATH="/home/nonroot/.cache/pypoetry/virtualenvs"
ENV POETRY_CACHE_DIR="/home/nonroot/.cache/pypoetry"

# Set working directory (this is where the entrypoint will be run)
WORKDIR /home/nonroot/app

# Expose the necessary ports
EXPOSE 3030

ENTRYPOINT ["bash", "-c", "src/docker-entrypoint.sh"]
