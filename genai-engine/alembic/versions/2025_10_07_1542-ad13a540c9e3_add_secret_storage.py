"""Add secret storage

Revision ID: ad13a540c9e3
Revises: 4617f961d9f0
Create Date: 2025-10-07 15:42:14.615867

"""

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "ad13a540c9e3"
down_revision = "4617f961d9f0"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "secret_storage",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("value", db_models.custom_types.EncryptedJSON(), nullable=False),
        sa.Column("owner_id", sa.String(), nullable=True),
        sa.Column("secret_type", sa.String(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["api_keys.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.alter_column(
        "embeddings",
        "embedding",
        existing_type=sa.VARCHAR(),
        type_=pgvector.sqlalchemy.vector.VECTOR(dim=1536),
        existing_nullable=False,
    )
    op.create_index(
        "my_index",
        "embeddings",
        ["embedding"],
        unique=False,
        postgresql_using="ivfflat",
        postgresql_with={"lists": 100},
        postgresql_ops={"embedding": "vector_l2_ops"},
    )
    op.drop_index(
        op.f("idx_metric_results_span_id_metric_type"),
        table_name="metric_results",
    )
    op.alter_column(
        "spans",
        "raw_data",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        existing_nullable=False,
    )
    op.alter_column(
        "spans",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "spans",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index(
        op.f("idx_spans_llm_task_time"),
        table_name="spans",
        postgresql_where="((span_kind)::text = 'LLM'::text)",
    )
    op.drop_index(
        op.f("idx_spans_task_span_name"),
        table_name="spans",
        postgresql_where="(span_name IS NOT NULL)",
    )
    op.drop_index(op.f("idx_spans_task_time_kind"), table_name="spans")
    op.drop_index(op.f("idx_spans_trace_task_time"), table_name="spans")
    op.alter_column(
        "trace_metadata",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "trace_metadata",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index(
        op.f("idx_traces_covering"),
        table_name="trace_metadata",
        postgresql_include=["trace_id", "end_time", "span_count"],
    )
    op.drop_index(op.f("idx_traces_task_start"), table_name="trace_metadata")
    op.drop_index(op.f("idx_traces_task_time_range"), table_name="trace_metadata")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(
        op.f("idx_traces_task_time_range"),
        "trace_metadata",
        ["task_id", "start_time", "end_time"],
        unique=False,
    )
    op.create_index(
        op.f("idx_traces_task_start"),
        "trace_metadata",
        ["task_id", "start_time"],
        unique=False,
    )
    op.create_index(
        op.f("idx_traces_covering"),
        "trace_metadata",
        ["task_id", "start_time"],
        unique=False,
        postgresql_include=["trace_id", "end_time", "span_count"],
    )
    op.alter_column(
        "trace_metadata",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "trace_metadata",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.create_index(
        op.f("idx_spans_trace_task_time"),
        "spans",
        ["trace_id", "task_id", "start_time"],
        unique=False,
    )
    op.create_index(
        op.f("idx_spans_task_time_kind"),
        "spans",
        ["task_id", "start_time", "span_kind"],
        unique=False,
    )
    op.create_index(
        op.f("idx_spans_task_span_name"),
        "spans",
        ["task_id", "span_name", "start_time"],
        unique=False,
        postgresql_where="(span_name IS NOT NULL)",
    )
    op.create_index(
        op.f("idx_spans_llm_task_time"),
        "spans",
        ["task_id", "start_time"],
        unique=False,
        postgresql_where="((span_kind)::text = 'LLM'::text)",
    )
    op.alter_column(
        "spans",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "spans",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "spans",
        "raw_data",
        existing_type=postgresql.JSON(astext_type=sa.Text()),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=False,
    )
    op.create_index(
        op.f("idx_metric_results_span_id_metric_type"),
        "metric_results",
        ["span_id", "metric_type"],
        unique=False,
    )
    op.drop_index(
        "my_index",
        table_name="embeddings",
        postgresql_using="ivfflat",
        postgresql_with={"lists": 100},
        postgresql_ops={"embedding": "vector_l2_ops"},
    )
    op.alter_column(
        "embeddings",
        "embedding",
        existing_type=pgvector.sqlalchemy.vector.VECTOR(dim=1536),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.drop_table("secret_storage")
    # ### end Alembic commands ###
