"""add_agentic_prompts_table

Revision ID: a299936fc3f1
Revises: 4617f961d9f0
Create Date: 2025-10-07 14:28:21.273054

"""

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "a299936fc3f1"
down_revision = "4617f961d9f0"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "agentic_prompts",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "agentic_prompts",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.create_index(
        op.f("ix_agentic_prompts_task_id"),
        "agentic_prompts",
        ["task_id"],
        unique=False,
    )
    op.create_unique_constraint(
        "uq_task_prompt_name",
        "agentic_prompts",
        ["task_id", "name"],
    )
    op.alter_column(
        "embeddings",
        "embedding",
        existing_type=sa.VARCHAR(),
        type_=pgvector.sqlalchemy.vector.VECTOR(dim=1536),
        existing_nullable=False,
    )
    op.create_index(
        "my_index",
        "embeddings",
        ["embedding"],
        unique=False,
        postgresql_using="ivfflat",
        postgresql_with={"lists": 100},
        postgresql_ops={"embedding": "vector_l2_ops"},
    )
    op.drop_index(
        op.f("idx_metric_results_span_id_metric_type"),
        table_name="metric_results",
    )
    op.alter_column(
        "spans",
        "raw_data",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        existing_nullable=False,
    )
    op.alter_column(
        "spans",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "spans",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index(
        op.f("idx_spans_llm_task_time"),
        table_name="spans",
        postgresql_where="((span_kind)::text = 'LLM'::text)",
    )
    op.drop_index(
        op.f("idx_spans_task_span_name"),
        table_name="spans",
        postgresql_where="(span_name IS NOT NULL)",
    )
    op.drop_index(op.f("idx_spans_task_time_kind"), table_name="spans")
    op.drop_index(op.f("idx_spans_trace_task_time"), table_name="spans")
    op.alter_column(
        "trace_metadata",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "trace_metadata",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_index(
        op.f("idx_traces_covering"),
        table_name="trace_metadata",
        postgresql_include=["trace_id", "end_time", "span_count"],
    )
    op.drop_index(op.f("idx_traces_task_start"), table_name="trace_metadata")
    op.drop_index(op.f("idx_traces_task_time_range"), table_name="trace_metadata")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(
        op.f("idx_traces_task_time_range"),
        "trace_metadata",
        ["task_id", "start_time", "end_time"],
        unique=False,
    )
    op.create_index(
        op.f("idx_traces_task_start"),
        "trace_metadata",
        ["task_id", "start_time"],
        unique=False,
    )
    op.create_index(
        op.f("idx_traces_covering"),
        "trace_metadata",
        ["task_id", "start_time"],
        unique=False,
        postgresql_include=["trace_id", "end_time", "span_count"],
    )
    op.alter_column(
        "trace_metadata",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "trace_metadata",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.create_index(
        op.f("idx_spans_trace_task_time"),
        "spans",
        ["trace_id", "task_id", "start_time"],
        unique=False,
    )
    op.create_index(
        op.f("idx_spans_task_time_kind"),
        "spans",
        ["task_id", "start_time", "span_kind"],
        unique=False,
    )
    op.create_index(
        op.f("idx_spans_task_span_name"),
        "spans",
        ["task_id", "span_name", "start_time"],
        unique=False,
        postgresql_where="(span_name IS NOT NULL)",
    )
    op.create_index(
        op.f("idx_spans_llm_task_time"),
        "spans",
        ["task_id", "start_time"],
        unique=False,
        postgresql_where="((span_kind)::text = 'LLM'::text)",
    )
    op.alter_column(
        "spans",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "spans",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.alter_column(
        "spans",
        "raw_data",
        existing_type=postgresql.JSON(astext_type=sa.Text()),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=False,
    )
    op.create_index(
        op.f("idx_metric_results_span_id_metric_type"),
        "metric_results",
        ["span_id", "metric_type"],
        unique=False,
    )
    op.drop_index(
        "my_index",
        table_name="embeddings",
        postgresql_using="ivfflat",
        postgresql_with={"lists": 100},
        postgresql_ops={"embedding": "vector_l2_ops"},
    )
    op.alter_column(
        "embeddings",
        "embedding",
        existing_type=pgvector.sqlalchemy.vector.VECTOR(dim=1536),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.drop_constraint("uq_task_prompt_name", "agentic_prompts", type_="unique")
    op.drop_index(op.f("ix_agentic_prompts_task_id"), table_name="agentic_prompts")
    op.alter_column(
        "agentic_prompts",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "agentic_prompts",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    # ### end Alembic commands ###
