{
  "openapi": "3.0.0",
  "info": {
    "title": "Arthur Common Models",
    "description": "Data models and schemas for Arthur Common components",
    "version": "1.0.1"
  },
  "paths": {},
  "components": {
    "schemas": {
      "ModelProblemType": {
        "enum": [
          "regression",
          "binary_classification",
          "arthur_shield",
          "custom",
          "multiclass_classification",
          "agentic_trace"
        ],
        "title": "ModelProblemType",
        "type": "string"
      },
      "DatasetFileType": {
        "enum": [
          "json",
          "csv",
          "parquet"
        ],
        "title": "DatasetFileType",
        "type": "string"
      },
      "DatasetJoinKind": {
        "enum": [
          "inner",
          "left_outer",
          "outer",
          "right_outer"
        ],
        "title": "DatasetJoinKind",
        "type": "string"
      },
      "BaseEnum": {
        "enum": [],
        "title": "BaseEnum"
      },
      "APIKeysRolesEnum": {
        "enum": [
          "DEFAULT-RULE-ADMIN",
          "TASK-ADMIN",
          "VALIDATION-USER",
          "ORG-AUDITOR",
          "ORG-ADMIN"
        ],
        "title": "APIKeysRolesEnum",
        "type": "string"
      },
      "InferenceFeedbackTarget": {
        "enum": [
          "context",
          "response_results",
          "prompt_results"
        ],
        "title": "InferenceFeedbackTarget",
        "type": "string"
      },
      "MetricType": {
        "enum": [
          "QueryRelevance",
          "ResponseRelevance",
          "ToolSelection"
        ],
        "title": "MetricType",
        "type": "string"
      },
      "PIIEntityTypes": {
        "enum": [
          "CREDIT_CARD",
          "CRYPTO",
          "DATE_TIME",
          "EMAIL_ADDRESS",
          "IBAN_CODE",
          "IP_ADDRESS",
          "NRP",
          "LOCATION",
          "PERSON",
          "PHONE_NUMBER",
          "MEDICAL_LICENSE",
          "URL",
          "US_BANK_NUMBER",
          "US_DRIVER_LICENSE",
          "US_ITIN",
          "US_PASSPORT",
          "US_SSN"
        ],
        "title": "PIIEntityTypes",
        "type": "string"
      },
      "PaginationSortMethod": {
        "enum": [
          "asc",
          "desc"
        ],
        "title": "PaginationSortMethod",
        "type": "string"
      },
      "RuleResultEnum": {
        "enum": [
          "Pass",
          "Fail",
          "Skipped",
          "Unavailable",
          "Partially Unavailable",
          "Model Not Available"
        ],
        "title": "RuleResultEnum",
        "type": "string"
      },
      "RuleScope": {
        "enum": [
          "default",
          "task"
        ],
        "title": "RuleScope",
        "type": "string"
      },
      "RuleType": {
        "enum": [
          "KeywordRule",
          "ModelHallucinationRuleV2",
          "ModelSensitiveDataRule",
          "PIIDataRule",
          "PromptInjectionRule",
          "RegexRule",
          "ToxicityRule"
        ],
        "title": "RuleType",
        "type": "string"
      },
      "TaskType": {
        "enum": [
          "traditional",
          "agentic"
        ],
        "title": "TaskType",
        "type": "string"
      },
      "TokenUsageScope": {
        "enum": [
          "rule_type",
          "task"
        ],
        "title": "TokenUsageScope",
        "type": "string"
      },
      "ToxicityViolationType": {
        "enum": [
          "benign",
          "harmful_request",
          "toxic_content",
          "profanity",
          "unknown"
        ],
        "title": "ToxicityViolationType",
        "type": "string"
      },
      "UserPermissionAction": {
        "enum": [
          "create",
          "read"
        ],
        "title": "UserPermissionAction",
        "type": "string"
      },
      "UserPermissionResource": {
        "enum": [
          "prompts",
          "responses",
          "rules",
          "tasks"
        ],
        "title": "UserPermissionResource",
        "type": "string"
      },
      "AggregationType": {
        "enum": [
          "min",
          "max",
          "average",
          "count",
          "shield_inference_pass_fail_count",
          "shield_prompt_response_pass_fail_count",
          "shield_inference_rule_count",
          "shield_inference_rule_pass_fail_count",
          "shield_inference_rule_toxicity_score",
          "shield_inference_rule_pii_score",
          "shield_inference_hallucination_count",
          "shield_inference_rule_claim_count",
          "shield_inference_rule_claim_pass_count",
          "shield_inference_rule_claim_fail_count",
          "shield_inference_rule_latency"
        ],
        "title": "AggregationType",
        "type": "string"
      },
      "SystemMetricEventKind": {
        "enum": [
          "model_job_failure"
        ],
        "title": "SystemMetricEventKind",
        "type": "string"
      },
      "AggregationMetricType": {
        "enum": [
          "sketch",
          "numeric"
        ],
        "title": "AggregationMetricType",
        "type": "string"
      },
      "ScopeSchemaTag": {
        "enum": [
          "llm_context",
          "llm_prompt",
          "llm_response",
          "primary_timestamp",
          "categorical",
          "continuous",
          "prediction",
          "ground_truth",
          "pin_in_deep_dive",
          "possible_segmentation"
        ],
        "title": "ScopeSchemaTag",
        "type": "string"
      },
      "DType": {
        "enum": [
          "undefined",
          "int",
          "float",
          "bool",
          "str",
          "uuid",
          "timestamp",
          "date",
          "json",
          "image"
        ],
        "title": "DType",
        "type": "string"
      },
      "AggregationSpecSchema": {
        "properties": {
          "name": {
            "description": "Name of the aggregation function.",
            "title": "Name",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the aggregation function.",
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "description": {
            "description": "Description of the aggregation function and what it aggregates.",
            "title": "Description",
            "type": "string"
          },
          "metric_type": {
            "$ref": "#/components/schemas/AggregationMetricType",
            "description": "Return type of the aggregations aggregate function."
          },
          "init_args": {
            "description": "List of parameters to the aggregation's init function.",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricsDatasetParameterSchema"
                },
                {
                  "$ref": "#/components/schemas/MetricsLiteralParameterSchema"
                },
                {
                  "$ref": "#/components/schemas/MetricsColumnParameterSchema"
                },
                {
                  "$ref": "#/components/schemas/MetricsColumnListParameterSchema"
                }
              ]
            },
            "title": "Init Args",
            "type": "array"
          },
          "aggregate_args": {
            "description": "List of parameters to the aggregation's aggregate function.",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricsDatasetParameterSchema"
                },
                {
                  "$ref": "#/components/schemas/MetricsLiteralParameterSchema"
                },
                {
                  "$ref": "#/components/schemas/MetricsColumnParameterSchema"
                },
                {
                  "$ref": "#/components/schemas/MetricsColumnListParameterSchema"
                }
              ]
            },
            "title": "Aggregate Args",
            "type": "array"
          },
          "reported_aggregations": {
            "description": "List of aggregations reported by the metric.",
            "items": {
              "$ref": "#/components/schemas/BaseReportedAggregation"
            },
            "title": "Reported Aggregations",
            "type": "array"
          }
        },
        "required": [
          "name",
          "id",
          "description",
          "metric_type",
          "init_args",
          "aggregate_args",
          "reported_aggregations"
        ],
        "title": "AggregationSpecSchema",
        "type": "object"
      },
      "ApiKeyResponse": {
        "properties": {
          "id": {
            "description": "ID of the key",
            "title": "Id",
            "type": "string"
          },
          "key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The generated GenAI Engine API key. The key is displayed on key creation request only.",
            "title": "Key"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Description of the API key",
            "title": "Description"
          },
          "is_active": {
            "description": "Status of the key.",
            "title": "Is Active",
            "type": "boolean"
          },
          "created_at": {
            "description": "Creation time of the key",
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "deactivated_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Deactivation time of the key",
            "title": "Deactivated At"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional Message",
            "title": "Message"
          },
          "roles": {
            "default": [],
            "description": "Roles of the API key",
            "items": {
              "type": "string"
            },
            "title": "Roles",
            "type": "array"
          }
        },
        "required": [
          "id",
          "is_active",
          "created_at"
        ],
        "title": "ApiKeyResponse",
        "type": "object"
      },
      "AuthUserRole": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Id"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "composite": {
            "title": "Composite",
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "description",
          "composite"
        ],
        "title": "AuthUserRole",
        "type": "object"
      },
      "BaseAggregationParameterSchema": {
        "properties": {
          "parameter_key": {
            "description": "Name of the parameter.",
            "title": "Parameter Key",
            "type": "string"
          },
          "friendly_name": {
            "description": "User facing name of the parameter.",
            "title": "Friendly Name",
            "type": "string"
          },
          "description": {
            "description": "Description of the parameter.",
            "title": "Description",
            "type": "string"
          }
        },
        "required": [
          "parameter_key",
          "friendly_name",
          "description"
        ],
        "title": "BaseAggregationParameterSchema",
        "type": "object"
      },
      "BaseColumnBaseParameterSchema": {
        "properties": {
          "parameter_key": {
            "description": "Name of the parameter.",
            "title": "Parameter Key",
            "type": "string"
          },
          "friendly_name": {
            "description": "User facing name of the parameter.",
            "title": "Friendly Name",
            "type": "string"
          },
          "description": {
            "description": "Description of the parameter.",
            "title": "Description",
            "type": "string"
          },
          "tag_hints": {
            "default": [],
            "description": "List of tags that are applicable to this parameter. Datasets with columns that have matching tags can be inferred this way.",
            "items": {
              "$ref": "#/components/schemas/ScopeSchemaTag"
            },
            "title": "Tag Hints",
            "type": "array"
          },
          "source_dataset_parameter_key": {
            "description": "Name of the parameter that provides the dataset to be used for this column.",
            "title": "Source Dataset Parameter Key",
            "type": "string"
          },
          "allowed_column_types": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ScalarType"
                    },
                    {
                      "$ref": "#/components/schemas/ObjectType"
                    },
                    {
                      "$ref": "#/components/schemas/ListType"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "List of column types applicable to this parameter",
            "title": "Allowed Column Types"
          },
          "allow_any_column_type": {
            "default": false,
            "description": "Indicates if this metric parameter can accept any column type.",
            "title": "Allow Any Column Type",
            "type": "boolean"
          }
        },
        "required": [
          "parameter_key",
          "friendly_name",
          "description",
          "source_dataset_parameter_key"
        ],
        "title": "BaseColumnBaseParameterSchema",
        "type": "object"
      },
      "BaseColumnParameterSchema": {
        "properties": {
          "parameter_key": {
            "description": "Name of the parameter.",
            "title": "Parameter Key",
            "type": "string"
          },
          "friendly_name": {
            "description": "User facing name of the parameter.",
            "title": "Friendly Name",
            "type": "string"
          },
          "description": {
            "description": "Description of the parameter.",
            "title": "Description",
            "type": "string"
          },
          "tag_hints": {
            "default": [],
            "description": "List of tags that are applicable to this parameter. Datasets with columns that have matching tags can be inferred this way.",
            "items": {
              "$ref": "#/components/schemas/ScopeSchemaTag"
            },
            "title": "Tag Hints",
            "type": "array"
          },
          "source_dataset_parameter_key": {
            "description": "Name of the parameter that provides the dataset to be used for this column.",
            "title": "Source Dataset Parameter Key",
            "type": "string"
          },
          "allowed_column_types": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ScalarType"
                    },
                    {
                      "$ref": "#/components/schemas/ObjectType"
                    },
                    {
                      "$ref": "#/components/schemas/ListType"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "List of column types applicable to this parameter",
            "title": "Allowed Column Types"
          },
          "allow_any_column_type": {
            "default": false,
            "description": "Indicates if this metric parameter can accept any column type.",
            "title": "Allow Any Column Type",
            "type": "boolean"
          },
          "parameter_type": {
            "const": "column",
            "default": "column",
            "title": "Parameter Type",
            "type": "string"
          }
        },
        "required": [
          "parameter_key",
          "friendly_name",
          "description",
          "source_dataset_parameter_key"
        ],
        "title": "BaseColumnParameterSchema",
        "type": "object"
      },
      "BaseDatasetParameterSchema": {
        "properties": {
          "parameter_key": {
            "description": "Name of the parameter.",
            "title": "Parameter Key",
            "type": "string"
          },
          "friendly_name": {
            "description": "User facing name of the parameter.",
            "title": "Friendly Name",
            "type": "string"
          },
          "description": {
            "description": "Description of the parameter.",
            "title": "Description",
            "type": "string"
          },
          "parameter_type": {
            "const": "dataset",
            "default": "dataset",
            "title": "Parameter Type",
            "type": "string"
          },
          "model_problem_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelProblemType"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Model problem type of the parameter. If not set, any model problem type is allowed."
          }
        },
        "required": [
          "parameter_key",
          "friendly_name",
          "description"
        ],
        "title": "BaseDatasetParameterSchema",
        "type": "object"
      },
      "BaseDetailsResponse": {
        "properties": {
          "score": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Score"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Message"
          }
        },
        "title": "BaseDetailsResponse",
        "type": "object"
      },
      "BaseLiteralParameterSchema": {
        "properties": {
          "parameter_key": {
            "description": "Name of the parameter.",
            "title": "Parameter Key",
            "type": "string"
          },
          "friendly_name": {
            "description": "User facing name of the parameter.",
            "title": "Friendly Name",
            "type": "string"
          },
          "description": {
            "description": "Description of the parameter.",
            "title": "Description",
            "type": "string"
          },
          "parameter_type": {
            "const": "literal",
            "default": "literal",
            "title": "Parameter Type",
            "type": "string"
          },
          "parameter_dtype": {
            "$ref": "#/components/schemas/DType",
            "description": "Data type of the parameter."
          }
        },
        "required": [
          "parameter_key",
          "friendly_name",
          "description",
          "parameter_dtype"
        ],
        "title": "BaseLiteralParameterSchema",
        "type": "object"
      },
      "BaseMetric": {
        "properties": {
          "name": {
            "description": "Name of the metric.",
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "title": "BaseMetric",
        "type": "object"
      },
      "BaseReportedAggregation": {
        "properties": {
          "metric_name": {
            "description": "Name of the reported aggregation metric.",
            "title": "Metric Name",
            "type": "string"
          },
          "description": {
            "description": "Description of the reported aggregation metric and what it aggregates.",
            "title": "Description",
            "type": "string"
          }
        },
        "required": [
          "metric_name",
          "description"
        ],
        "title": "BaseReportedAggregation",
        "type": "object"
      },
      "ChatDefaultTaskRequest": {
        "properties": {
          "task_id": {
            "title": "Task Id",
            "type": "string"
          }
        },
        "required": [
          "task_id"
        ],
        "title": "ChatDefaultTaskRequest",
        "type": "object"
      },
      "ChatDefaultTaskResponse": {
        "properties": {
          "task_id": {
            "title": "Task Id",
            "type": "string"
          }
        },
        "required": [
          "task_id"
        ],
        "title": "ChatDefaultTaskResponse",
        "type": "object"
      },
      "ChatDocumentContext": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "seq_num": {
            "title": "Seq Num",
            "type": "integer"
          },
          "context": {
            "title": "Context",
            "type": "string"
          }
        },
        "required": [
          "id",
          "seq_num",
          "context"
        ],
        "title": "ChatDocumentContext",
        "type": "object"
      },
      "ChatRequest": {
        "properties": {
          "user_prompt": {
            "description": "Prompt user wants to send to chat.",
            "title": "User Prompt",
            "type": "string"
          },
          "conversation_id": {
            "description": "Conversation ID",
            "title": "Conversation Id",
            "type": "string"
          },
          "file_ids": {
            "description": "list of file IDs to retrieve from during chat.",
            "items": {
              "type": "string"
            },
            "title": "File Ids",
            "type": "array"
          }
        },
        "required": [
          "user_prompt",
          "conversation_id",
          "file_ids"
        ],
        "title": "ChatRequest",
        "type": "object"
      },
      "ChatResponse": {
        "properties": {
          "inference_id": {
            "description": "ID of the inference sent to the chat",
            "title": "Inference Id",
            "type": "string"
          },
          "conversation_id": {
            "description": "ID of the conversation session",
            "title": "Conversation Id",
            "type": "string"
          },
          "timestamp": {
            "description": "Time the inference was made in unix milliseconds",
            "title": "Timestamp",
            "type": "integer"
          },
          "retrieved_context": {
            "description": "related sections of documents that were most relevant to the inference prompt. Formatted as a list of retrieved context chunks which include document name, seq num, and context.",
            "items": {
              "$ref": "#/components/schemas/ChatDocumentContext"
            },
            "title": "Retrieved Context",
            "type": "array"
          },
          "llm_response": {
            "description": "response from the LLM for the original user prompt",
            "title": "Llm Response",
            "type": "string"
          },
          "prompt_results": {
            "description": "list of rule results for the user prompt",
            "items": {
              "$ref": "#/components/schemas/ExternalRuleResult"
            },
            "title": "Prompt Results",
            "type": "array"
          },
          "response_results": {
            "description": "list of rule results for the llm response",
            "items": {
              "$ref": "#/components/schemas/ExternalRuleResult"
            },
            "title": "Response Results",
            "type": "array"
          }
        },
        "required": [
          "inference_id",
          "conversation_id",
          "timestamp",
          "retrieved_context",
          "llm_response",
          "prompt_results",
          "response_results"
        ],
        "title": "ChatResponse",
        "type": "object"
      },
      "ComputeMetricsFiltersResponse": {
        "properties": {
          "start_time": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Start time filter applied",
            "title": "Start Time"
          },
          "end_time": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "End time filter applied",
            "title": "End Time"
          },
          "conversation_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Conversation ID filter applied",
            "title": "Conversation Id"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "User ID filter applied",
            "title": "User Id"
          },
          "page": {
            "description": "Page number used for pagination",
            "title": "Page",
            "type": "integer"
          },
          "page_size": {
            "description": "Page size used for pagination",
            "title": "Page Size",
            "type": "integer"
          }
        },
        "required": [
          "page",
          "page_size"
        ],
        "title": "ComputeMetricsFiltersResponse",
        "type": "object"
      },
      "ComputeMetricsResponse": {
        "properties": {
          "task_id": {
            "description": "ID of the task for which metrics were computed",
            "title": "Task Id",
            "type": "string"
          },
          "metrics": {
            "description": "List of metrics associated with the task",
            "items": {
              "$ref": "#/components/schemas/MetricResponse"
            },
            "title": "Metrics",
            "type": "array"
          },
          "span_count": {
            "description": "Number of spans matching the filters",
            "title": "Span Count",
            "type": "integer"
          },
          "spans": {
            "description": "List of spans used for metric computation",
            "items": {
              "$ref": "#/components/schemas/SpanResponse"
            },
            "title": "Spans",
            "type": "array"
          },
          "filters_applied": {
            "$ref": "#/components/schemas/ComputeMetricsFiltersResponse",
            "description": "Filters that were applied to the data"
          }
        },
        "required": [
          "task_id",
          "metrics",
          "span_count",
          "spans",
          "filters_applied"
        ],
        "title": "ComputeMetricsResponse",
        "type": "object"
      },
      "ConnectorPaginationOptions": {
        "properties": {
          "page": {
            "default": 1,
            "minimum": 1,
            "title": "Page",
            "type": "integer"
          },
          "page_size": {
            "default": 25,
            "maximum": 500,
            "minimum": 0.0,
            "title": "Page Size",
            "type": "integer"
          }
        },
        "title": "ConnectorPaginationOptions",
        "type": "object"
      },
      "ConversationBaseResponse": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          }
        },
        "required": [
          "id",
          "updated_at"
        ],
        "title": "ConversationBaseResponse",
        "type": "object"
      },
      "ConversationResponse": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "inferences": {
            "items": {
              "$ref": "#/components/schemas/ExternalInference"
            },
            "title": "Inferences",
            "type": "array"
          }
        },
        "required": [
          "id",
          "updated_at",
          "inferences"
        ],
        "title": "ConversationResponse",
        "type": "object"
      },
      "CreateModelLinkTaskJobSpec": {
        "properties": {
          "job_type": {
            "const": "link_model_task",
            "default": "link_model_task",
            "title": "Job Type",
            "type": "string"
          },
          "task_id": {
            "description": "The id of the Shield task to link when creating the new model.",
            "format": "uuid",
            "title": "Task Id",
            "type": "string"
          },
          "connector_id": {
            "description": "The id of the engine internal connector to use to link the task.",
            "format": "uuid",
            "title": "Connector Id",
            "type": "string"
          },
          "onboarding_identifier": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "An identifier to assign to the created model to make it easy to retrieve. Used by the UI during the GenAI model creation flow.",
            "title": "Onboarding Identifier"
          }
        },
        "required": [
          "task_id",
          "connector_id"
        ],
        "title": "CreateModelLinkTaskJobSpec",
        "type": "object"
      },
      "CreateModelTaskJobSpec": {
        "properties": {
          "job_type": {
            "const": "create_model_task",
            "default": "create_model_task",
            "title": "Job Type",
            "type": "string"
          },
          "connector_id": {
            "description": "The id of the engine internal connector to use to create the task.",
            "format": "uuid",
            "title": "Connector Id",
            "type": "string"
          },
          "task_name": {
            "description": "The name of the task.",
            "title": "Task Name",
            "type": "string"
          },
          "onboarding_identifier": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "An identifier to assign to the created model to make it easy to retrieve. Used by the UI during the GenAI model creation flow.",
            "title": "Onboarding Identifier"
          },
          "initial_rules": {
            "description": "The initial rules to apply to the created model.",
            "items": {
              "$ref": "#/components/schemas/NewRuleRequest"
            },
            "title": "Initial Rules",
            "type": "array"
          },
          "task_type": {
            "$ref": "#/components/schemas/TaskType",
            "default": "traditional",
            "description": "The type of task to create."
          },
          "initial_metrics": {
            "description": "The initial metrics to apply to agentic tasks.",
            "items": {
              "$ref": "#/components/schemas/NewMetricRequest"
            },
            "title": "Initial Metrics",
            "type": "array"
          }
        },
        "required": [
          "connector_id",
          "task_name",
          "initial_rules",
          "initial_metrics"
        ],
        "title": "CreateModelTaskJobSpec",
        "type": "object"
      },
      "CreateUserRequest": {
        "properties": {
          "email": {
            "title": "Email",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "temporary": {
            "default": true,
            "title": "Temporary",
            "type": "boolean"
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "title": "Roles",
            "type": "array"
          },
          "firstName": {
            "title": "Firstname",
            "type": "string"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string"
          }
        },
        "required": [
          "email",
          "password",
          "roles",
          "firstName",
          "lastName"
        ],
        "title": "CreateUserRequest",
        "type": "object"
      },
      "DatasetColumn": {
        "properties": {
          "id": {
            "description": "Unique ID of the column.",
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "source_name": {
            "title": "Source Name",
            "type": "string"
          },
          "definition": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DatasetScalarType"
              },
              {
                "$ref": "#/components/schemas/DatasetObjectType"
              },
              {
                "$ref": "#/components/schemas/DatasetListType"
              }
            ],
            "title": "Definition"
          }
        },
        "required": [
          "source_name",
          "definition"
        ],
        "title": "DatasetColumn",
        "type": "object"
      },
      "DatasetListType": {
        "properties": {
          "tag_hints": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ScopeSchemaTag"
            },
            "title": "Tag Hints",
            "type": "array"
          },
          "nullable": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "default": true,
            "title": "Nullable"
          },
          "id": {
            "description": "Unique ID of the schema node.",
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "items": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DatasetScalarType"
              },
              {
                "$ref": "#/components/schemas/DatasetObjectType"
              },
              {
                "$ref": "#/components/schemas/DatasetListType"
              }
            ],
            "title": "Items"
          }
        },
        "required": [
          "items"
        ],
        "title": "DatasetListType",
        "type": "object"
      },
      "DatasetObjectType": {
        "properties": {
          "tag_hints": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ScopeSchemaTag"
            },
            "title": "Tag Hints",
            "type": "array"
          },
          "nullable": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "default": true,
            "title": "Nullable"
          },
          "id": {
            "description": "Unique ID of the schema node.",
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "object": {
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/DatasetScalarType"
                },
                {
                  "$ref": "#/components/schemas/DatasetObjectType"
                },
                {
                  "$ref": "#/components/schemas/DatasetListType"
                }
              ]
            },
            "title": "Object",
            "type": "object"
          }
        },
        "required": [
          "object"
        ],
        "title": "DatasetObjectType",
        "type": "object"
      },
      "DatasetScalarType": {
        "properties": {
          "tag_hints": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ScopeSchemaTag"
            },
            "title": "Tag Hints",
            "type": "array"
          },
          "nullable": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "default": true,
            "title": "Nullable"
          },
          "id": {
            "description": "Unique ID of the schema node.",
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "dtype": {
            "$ref": "#/components/schemas/DType"
          }
        },
        "required": [
          "dtype"
        ],
        "title": "DatasetScalarType",
        "type": "object"
      },
      "DatasetSchema": {
        "properties": {
          "alias_mask": {
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "format": "uuid"
            },
            "title": "Alias Mask",
            "type": "object"
          },
          "columns": {
            "items": {
              "$ref": "#/components/schemas/DatasetColumn"
            },
            "title": "Columns",
            "type": "array"
          },
          "column_names": {
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "format": "uuid"
            },
            "readOnly": true,
            "title": "Column Names",
            "type": "object"
          }
        },
        "required": [
          "alias_mask",
          "columns",
          "column_names"
        ],
        "title": "DatasetSchema",
        "type": "object"
      },
      "DatasetSchemaType": {
        "properties": {
          "tag_hints": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ScopeSchemaTag"
            },
            "title": "Tag Hints",
            "type": "array"
          },
          "nullable": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "default": true,
            "title": "Nullable"
          },
          "id": {
            "description": "Unique ID of the schema node.",
            "format": "uuid",
            "title": "Id",
            "type": "string"
          }
        },
        "title": "DatasetSchemaType",
        "type": "object"
      },
      "DeleteModelTaskJobSpec": {
        "properties": {
          "job_type": {
            "const": "delete_model_task",
            "default": "delete_model_task",
            "title": "Job Type",
            "type": "string"
          },
          "scope_model_id": {
            "description": "The id of the model to delete.",
            "format": "uuid",
            "title": "Scope Model Id",
            "type": "string"
          }
        },
        "required": [
          "scope_model_id"
        ],
        "title": "DeleteModelTaskJobSpec",
        "type": "object"
      },
      "Dimension": {
        "properties": {
          "name": {
            "description": "Name of the dimension.",
            "title": "Name",
            "type": "string"
          },
          "value": {
            "description": "Value of the dimension.",
            "title": "Value",
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "title": "Dimension",
        "type": "object"
      },
      "ExampleConfig": {
        "example": {
          "example": "John has O negative blood group",
          "result": true
        },
        "properties": {
          "example": {
            "description": "Custom example for the sensitive data",
            "title": "Example",
            "type": "string"
          },
          "result": {
            "description": "Boolean value representing if the example passes or fails the the sensitive data rule ",
            "title": "Result",
            "type": "boolean"
          }
        },
        "required": [
          "example",
          "result"
        ],
        "title": "ExampleConfig",
        "type": "object"
      },
      "ExamplesConfig": {
        "example": {
          "examples": [
            {
              "example": "John has O negative blood group",
              "result": true
            },
            {
              "example": "Most of the people have A positive blood group",
              "result": false
            }
          ],
          "hint": "specific individual's blood type"
        },
        "properties": {
          "examples": {
            "description": "List of all the examples for Sensitive Data Rule",
            "items": {
              "$ref": "#/components/schemas/ExampleConfig"
            },
            "title": "Examples",
            "type": "array"
          },
          "hint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional. Hint added to describe what Sensitive Data Rule should be checking for",
            "title": "Hint"
          }
        },
        "required": [
          "examples"
        ],
        "title": "ExamplesConfig",
        "type": "object"
      },
      "ExternalDocument": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "type": {
            "title": "Type",
            "type": "string"
          },
          "owner_id": {
            "title": "Owner Id",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "owner_id"
        ],
        "title": "ExternalDocument",
        "type": "object"
      },
      "ExternalInference": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/RuleResultEnum"
          },
          "created_at": {
            "title": "Created At",
            "type": "integer"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "integer"
          },
          "task_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Task Id"
          },
          "task_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Task Name"
          },
          "conversation_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Conversation Id"
          },
          "inference_prompt": {
            "$ref": "#/components/schemas/ExternalInferencePrompt"
          },
          "inference_response": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExternalInferenceResponse"
              },
              {
                "type": "null"
              }
            ],
            "default": null
          },
          "inference_feedback": {
            "items": {
              "$ref": "#/components/schemas/InferenceFeedbackResponse"
            },
            "title": "Inference Feedback",
            "type": "array"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "User Id"
          }
        },
        "required": [
          "id",
          "result",
          "created_at",
          "updated_at",
          "inference_prompt",
          "inference_feedback"
        ],
        "title": "ExternalInference",
        "type": "object"
      },
      "ExternalInferencePrompt": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "inference_id": {
            "title": "Inference Id",
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/RuleResultEnum"
          },
          "created_at": {
            "title": "Created At",
            "type": "integer"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "integer"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "prompt_rule_results": {
            "items": {
              "$ref": "#/components/schemas/ExternalRuleResult"
            },
            "title": "Prompt Rule Results",
            "type": "array"
          },
          "tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Tokens"
          }
        },
        "required": [
          "id",
          "inference_id",
          "result",
          "created_at",
          "updated_at",
          "message",
          "prompt_rule_results"
        ],
        "title": "ExternalInferencePrompt",
        "type": "object"
      },
      "ExternalInferenceResponse": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "inference_id": {
            "title": "Inference Id",
            "type": "string"
          },
          "result": {
            "$ref": "#/components/schemas/RuleResultEnum"
          },
          "created_at": {
            "title": "Created At",
            "type": "integer"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "integer"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "context": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Context"
          },
          "response_rule_results": {
            "items": {
              "$ref": "#/components/schemas/ExternalRuleResult"
            },
            "title": "Response Rule Results",
            "type": "array"
          },
          "tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Tokens"
          }
        },
        "required": [
          "id",
          "inference_id",
          "result",
          "created_at",
          "updated_at",
          "message",
          "response_rule_results"
        ],
        "title": "ExternalInferenceResponse",
        "type": "object"
      },
      "ExternalRuleResult": {
        "example": {
          "id": "90f18c69-d793-4913-9bde-a0c7f3643de0",
          "name": "PII Rule",
          "result": "Pass"
        },
        "properties": {
          "id": {
            "description": " ID of the rule",
            "title": "Id",
            "type": "string"
          },
          "name": {
            "description": "Name of the rule",
            "title": "Name",
            "type": "string"
          },
          "rule_type": {
            "$ref": "#/components/schemas/RuleType",
            "description": "Type of the rule"
          },
          "scope": {
            "$ref": "#/components/schemas/RuleScope",
            "description": "Scope of the rule. The rule can be set at default level or task level."
          },
          "result": {
            "$ref": "#/components/schemas/RuleResultEnum",
            "description": "Result if the rule"
          },
          "latency_ms": {
            "description": "Duration in millisesconds of rule execution",
            "title": "Latency Ms",
            "type": "integer"
          },
          "details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/KeywordDetailsResponse"
              },
              {
                "$ref": "#/components/schemas/RegexDetailsResponse"
              },
              {
                "$ref": "#/components/schemas/HallucinationDetailsResponse"
              },
              {
                "$ref": "#/components/schemas/PIIDetailsResponse"
              },
              {
                "$ref": "#/components/schemas/ToxicityDetailsResponse"
              },
              {
                "$ref": "#/components/schemas/BaseDetailsResponse"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Details of the rule output",
            "title": "Details"
          }
        },
        "required": [
          "id",
          "name",
          "rule_type",
          "scope",
          "result",
          "latency_ms"
        ],
        "title": "ExternalRuleResult",
        "type": "object"
      },
      "FeedbackRequest": {
        "properties": {
          "target": {
            "$ref": "#/components/schemas/InferenceFeedbackTarget"
          },
          "score": {
            "title": "Score",
            "type": "integer"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Reason"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "User Id"
          }
        },
        "required": [
          "target",
          "score",
          "reason"
        ],
        "title": "FeedbackRequest",
        "type": "object"
      },
      "FetchModelTaskJobSpec": {
        "properties": {
          "job_type": {
            "const": "fetch_model_task",
            "default": "fetch_model_task",
            "title": "Job Type",
            "type": "string"
          },
          "scope_model_id": {
            "description": "The id of the model to fetch its corresponding task.",
            "format": "uuid",
            "title": "Scope Model Id",
            "type": "string"
          }
        },
        "required": [
          "scope_model_id"
        ],
        "title": "FetchModelTaskJobSpec",
        "type": "object"
      },
      "FileUploadResult": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "type": {
            "title": "Type",
            "type": "string"
          },
          "word_count": {
            "title": "Word Count",
            "type": "integer"
          },
          "success": {
            "title": "Success",
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "word_count",
          "success"
        ],
        "title": "FileUploadResult",
        "type": "object"
      },
      "HTTPError": {
        "example": {
          "detail": "HTTPException raised."
        },
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "string"
          }
        },
        "required": [
          "detail"
        ],
        "title": "HTTPError",
        "type": "object"
      },
      "HallucinationClaimResponse": {
        "properties": {
          "claim": {
            "title": "Claim",
            "type": "string"
          },
          "valid": {
            "title": "Valid",
            "type": "boolean"
          },
          "reason": {
            "title": "Reason",
            "type": "string"
          },
          "order_number": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": -1,
            "description": "This field is a helper for ordering the claims",
            "title": "Order Number"
          }
        },
        "required": [
          "claim",
          "valid",
          "reason"
        ],
        "title": "HallucinationClaimResponse",
        "type": "object"
      },
      "HallucinationDetailsResponse": {
        "properties": {
          "score": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Score"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Message"
          },
          "claims": {
            "items": {
              "$ref": "#/components/schemas/HallucinationClaimResponse"
            },
            "title": "Claims",
            "type": "array"
          }
        },
        "required": [
          "claims"
        ],
        "title": "HallucinationDetailsResponse",
        "type": "object"
      },
      "HealthResponse": {
        "properties": {
          "message": {
            "title": "Message",
            "type": "string"
          },
          "build_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Build Version"
          }
        },
        "required": [
          "message"
        ],
        "title": "HealthResponse",
        "type": "object"
      },
      "InferenceFeedbackResponse": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "inference_id": {
            "title": "Inference Id",
            "type": "string"
          },
          "target": {
            "$ref": "#/components/schemas/InferenceFeedbackTarget"
          },
          "score": {
            "title": "Score",
            "type": "integer"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Reason"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "User Id"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          }
        },
        "required": [
          "id",
          "inference_id",
          "target",
          "score",
          "created_at",
          "updated_at"
        ],
        "title": "InferenceFeedbackResponse",
        "type": "object"
      },
      "KeywordDetailsResponse": {
        "additionalProperties": false,
        "properties": {
          "score": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Score"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Message"
          },
          "keyword_matches": {
            "default": [],
            "description": "Each keyword in this list corresponds to a keyword that was both configured in the rule that was run and found in the input text.",
            "items": {
              "$ref": "#/components/schemas/KeywordSpanResponse"
            },
            "title": "Keyword Matches",
            "type": "array"
          }
        },
        "title": "KeywordDetailsResponse",
        "type": "object"
      },
      "KeywordSpanResponse": {
        "properties": {
          "keyword": {
            "description": "The keyword from the rule that matched within the input string.",
            "title": "Keyword",
            "type": "string"
          }
        },
        "required": [
          "keyword"
        ],
        "title": "KeywordSpanResponse",
        "type": "object"
      },
      "KeywordsConfig": {
        "example": {
          "keywords": [
            "Blocked_Keyword_1",
            "Blocked_Keyword_2"
          ]
        },
        "properties": {
          "keywords": {
            "description": "List of Keywords",
            "items": {
              "type": "string"
            },
            "title": "Keywords",
            "type": "array"
          }
        },
        "required": [
          "keywords"
        ],
        "title": "KeywordsConfig",
        "type": "object"
      },
      "LLMTokenConsumption": {
        "properties": {
          "prompt_tokens": {
            "title": "Prompt Tokens",
            "type": "integer"
          },
          "completion_tokens": {
            "title": "Completion Tokens",
            "type": "integer"
          }
        },
        "required": [
          "prompt_tokens",
          "completion_tokens"
        ],
        "title": "LLMTokenConsumption",
        "type": "object"
      },
      "ListType": {
        "properties": {
          "items": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ScalarType"
              },
              {
                "$ref": "#/components/schemas/ObjectType"
              },
              {
                "$ref": "#/components/schemas/ListType"
              }
            ],
            "title": "Items"
          }
        },
        "required": [
          "items"
        ],
        "title": "ListType",
        "type": "object"
      },
      "MetricColumnParameterAnnotation": {
        "properties": {
          "optional": {
            "default": false,
            "description": "Boolean denoting if the parameter is optional.",
            "title": "Optional",
            "type": "boolean"
          },
          "friendly_name": {
            "description": "User facing name of the parameter.",
            "title": "Friendly Name",
            "type": "string"
          },
          "description": {
            "description": "Description of the parameter.",
            "title": "Description",
            "type": "string"
          },
          "tag_hints": {
            "default": [],
            "description": "List of tags that are applicable to this parameter. Datasets with columns that have matching tags can be inferred this way.",
            "items": {
              "$ref": "#/components/schemas/ScopeSchemaTag"
            },
            "title": "Tag Hints",
            "type": "array"
          },
          "source_dataset_parameter_key": {
            "description": "Name of the parameter that provides the dataset to be used for this column.",
            "title": "Source Dataset Parameter Key",
            "type": "string"
          },
          "allowed_column_types": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ScalarType"
                    },
                    {
                      "$ref": "#/components/schemas/ObjectType"
                    },
                    {
                      "$ref": "#/components/schemas/ListType"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "List of column types applicable to this parameter",
            "title": "Allowed Column Types"
          },
          "allow_any_column_type": {
            "default": false,
            "description": "Indicates if this metric parameter can accept any column type.",
            "title": "Allow Any Column Type",
            "type": "boolean"
          }
        },
        "required": [
          "friendly_name",
          "description",
          "source_dataset_parameter_key"
        ],
        "title": "MetricColumnParameterAnnotation",
        "type": "object"
      },
      "MetricDatasetParameterAnnotation": {
        "properties": {
          "optional": {
            "default": false,
            "description": "Boolean denoting if the parameter is optional.",
            "title": "Optional",
            "type": "boolean"
          },
          "friendly_name": {
            "description": "User facing name of the parameter.",
            "title": "Friendly Name",
            "type": "string"
          },
          "description": {
            "description": "Description of the parameter.",
            "title": "Description",
            "type": "string"
          },
          "model_problem_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelProblemType"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Model problem type that is applicable to this parameter."
          }
        },
        "required": [
          "friendly_name",
          "description"
        ],
        "title": "MetricDatasetParameterAnnotation",
        "type": "object"
      },
      "MetricLiteralParameterAnnotation": {
        "properties": {
          "optional": {
            "default": false,
            "description": "Boolean denoting if the parameter is optional.",
            "title": "Optional",
            "type": "boolean"
          },
          "friendly_name": {
            "description": "User facing name of the parameter.",
            "title": "Friendly Name",
            "type": "string"
          },
          "description": {
            "description": "Description of the parameter.",
            "title": "Description",
            "type": "string"
          },
          "parameter_dtype": {
            "$ref": "#/components/schemas/DType",
            "description": "Data type of the parameter."
          }
        },
        "required": [
          "friendly_name",
          "description",
          "parameter_dtype"
        ],
        "title": "MetricLiteralParameterAnnotation",
        "type": "object"
      },
      "MetricMultipleColumnParameterAnnotation": {
        "properties": {
          "optional": {
            "default": false,
            "description": "Boolean denoting if the parameter is optional.",
            "title": "Optional",
            "type": "boolean"
          },
          "friendly_name": {
            "description": "User facing name of the parameter.",
            "title": "Friendly Name",
            "type": "string"
          },
          "description": {
            "description": "Description of the parameter.",
            "title": "Description",
            "type": "string"
          },
          "tag_hints": {
            "default": [],
            "description": "List of tags that are applicable to this parameter. Datasets with columns that have matching tags can be inferred this way.",
            "items": {
              "$ref": "#/components/schemas/ScopeSchemaTag"
            },
            "title": "Tag Hints",
            "type": "array"
          },
          "source_dataset_parameter_key": {
            "description": "Name of the parameter that provides the dataset to be used for this column.",
            "title": "Source Dataset Parameter Key",
            "type": "string"
          },
          "allowed_column_types": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ScalarType"
                    },
                    {
                      "$ref": "#/components/schemas/ObjectType"
                    },
                    {
                      "$ref": "#/components/schemas/ListType"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "List of column types applicable to this parameter",
            "title": "Allowed Column Types"
          },
          "allow_any_column_type": {
            "default": false,
            "description": "Indicates if this metric parameter can accept any column type.",
            "title": "Allow Any Column Type",
            "type": "boolean"
          }
        },
        "required": [
          "friendly_name",
          "description",
          "source_dataset_parameter_key"
        ],
        "title": "MetricMultipleColumnParameterAnnotation",
        "type": "object"
      },
      "MetricParameterAnnotation": {
        "properties": {
          "optional": {
            "default": false,
            "description": "Boolean denoting if the parameter is optional.",
            "title": "Optional",
            "type": "boolean"
          },
          "friendly_name": {
            "description": "User facing name of the parameter.",
            "title": "Friendly Name",
            "type": "string"
          },
          "description": {
            "description": "Description of the parameter.",
            "title": "Description",
            "type": "string"
          }
        },
        "required": [
          "friendly_name",
          "description"
        ],
        "title": "MetricParameterAnnotation",
        "type": "object"
      },
      "MetricRequest": {
        "properties": {
          "system_prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "System prompt to be used by GenAI Engine for computing metrics.",
            "title": "System Prompt"
          },
          "user_query": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "User query to be used by GenAI Engine for computing metrics.",
            "title": "User Query"
          },
          "context": {
            "description": "Conversation history and additional context to be used by GenAI Engine for computing metrics.",
            "examples": [
              {
                "role": "user",
                "value": "What is the weather in Tokyo?"
              },
              {
                "args": {
                  "city": "Tokyo"
                },
                "role": "assistant",
                "value": "WeatherTool"
              },
              {
                "role": "tool",
                "value": "[{\"name\": \"WeatherTool\", \"result\": {\"temperature\": \"20\u00b0C\", \"humidity\": \"50%\", \"condition\": \"sunny\"}}]"
              },
              {
                "role": "assistant",
                "value": "The weather in Tokyo is sunny and the temperature is 20\u00b0C."
              }
            ],
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "title": "Context",
            "type": "array"
          },
          "response": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Response to be used by GenAI Engine for computing metrics.",
            "title": "Response"
          }
        },
        "title": "MetricRequest",
        "type": "object"
      },
      "MetricResponse": {
        "properties": {
          "id": {
            "description": "ID of the Metric",
            "title": "Id",
            "type": "string"
          },
          "name": {
            "description": "Name of the Metric",
            "title": "Name",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/MetricType",
            "description": "Type of the Metric"
          },
          "metric_metadata": {
            "description": "Metadata of the Metric",
            "title": "Metric Metadata",
            "type": "string"
          },
          "config": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "JSON-serialized configuration for the Metric",
            "title": "Config"
          },
          "created_at": {
            "description": "Time the Metric was created in unix milliseconds",
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "description": "Time the Metric was updated in unix milliseconds",
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Whether the Metric is enabled",
            "title": "Enabled"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "metric_metadata",
          "created_at",
          "updated_at"
        ],
        "title": "MetricResponse",
        "type": "object"
      },
      "MetricResultResponse": {
        "properties": {
          "id": {
            "description": "ID of the metric result",
            "title": "Id",
            "type": "string"
          },
          "metric_type": {
            "$ref": "#/components/schemas/MetricType",
            "description": "Type of the metric"
          },
          "details": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "JSON-serialized metric details",
            "title": "Details"
          },
          "prompt_tokens": {
            "description": "Number of prompt tokens used",
            "title": "Prompt Tokens",
            "type": "integer"
          },
          "completion_tokens": {
            "description": "Number of completion tokens used",
            "title": "Completion Tokens",
            "type": "integer"
          },
          "latency_ms": {
            "description": "Latency in milliseconds",
            "title": "Latency Ms",
            "type": "integer"
          },
          "span_id": {
            "description": "ID of the span this result belongs to",
            "title": "Span Id",
            "type": "string"
          },
          "metric_id": {
            "description": "ID of the metric that generated this result",
            "title": "Metric Id",
            "type": "string"
          },
          "created_at": {
            "description": "Time the result was created",
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "description": "Time the result was last updated",
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          }
        },
        "required": [
          "id",
          "metric_type",
          "prompt_tokens",
          "completion_tokens",
          "latency_ms",
          "span_id",
          "metric_id",
          "created_at",
          "updated_at"
        ],
        "title": "MetricResultResponse",
        "type": "object"
      },
      "MetricsColumnListParameterSchema": {
        "properties": {
          "parameter_key": {
            "description": "Name of the parameter.",
            "title": "Parameter Key",
            "type": "string"
          },
          "friendly_name": {
            "description": "User facing name of the parameter.",
            "title": "Friendly Name",
            "type": "string"
          },
          "description": {
            "description": "Description of the parameter.",
            "title": "Description",
            "type": "string"
          },
          "tag_hints": {
            "default": [],
            "description": "List of tags that are applicable to this parameter. Datasets with columns that have matching tags can be inferred this way.",
            "items": {
              "$ref": "#/components/schemas/ScopeSchemaTag"
            },
            "title": "Tag Hints",
            "type": "array"
          },
          "source_dataset_parameter_key": {
            "description": "Name of the parameter that provides the dataset to be used for this column.",
            "title": "Source Dataset Parameter Key",
            "type": "string"
          },
          "allowed_column_types": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ScalarType"
                    },
                    {
                      "$ref": "#/components/schemas/ObjectType"
                    },
                    {
                      "$ref": "#/components/schemas/ListType"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "List of column types applicable to this parameter",
            "title": "Allowed Column Types"
          },
          "allow_any_column_type": {
            "default": false,
            "description": "Indicates if this metric parameter can accept any column type.",
            "title": "Allow Any Column Type",
            "type": "boolean"
          },
          "optional": {
            "default": false,
            "description": "Boolean denoting if the parameter is optional.",
            "title": "Optional",
            "type": "boolean"
          },
          "parameter_type": {
            "const": "column_list",
            "default": "column_list",
            "title": "Parameter Type",
            "type": "string"
          }
        },
        "required": [
          "parameter_key",
          "friendly_name",
          "description",
          "source_dataset_parameter_key"
        ],
        "title": "MetricsColumnListParameterSchema",
        "type": "object"
      },
      "MetricsColumnParameterSchema": {
        "properties": {
          "parameter_key": {
            "description": "Name of the parameter.",
            "title": "Parameter Key",
            "type": "string"
          },
          "friendly_name": {
            "description": "User facing name of the parameter.",
            "title": "Friendly Name",
            "type": "string"
          },
          "description": {
            "description": "Description of the parameter.",
            "title": "Description",
            "type": "string"
          },
          "tag_hints": {
            "default": [],
            "description": "List of tags that are applicable to this parameter. Datasets with columns that have matching tags can be inferred this way.",
            "items": {
              "$ref": "#/components/schemas/ScopeSchemaTag"
            },
            "title": "Tag Hints",
            "type": "array"
          },
          "source_dataset_parameter_key": {
            "description": "Name of the parameter that provides the dataset to be used for this column.",
            "title": "Source Dataset Parameter Key",
            "type": "string"
          },
          "allowed_column_types": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ScalarType"
                    },
                    {
                      "$ref": "#/components/schemas/ObjectType"
                    },
                    {
                      "$ref": "#/components/schemas/ListType"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "List of column types applicable to this parameter",
            "title": "Allowed Column Types"
          },
          "allow_any_column_type": {
            "default": false,
            "description": "Indicates if this metric parameter can accept any column type.",
            "title": "Allow Any Column Type",
            "type": "boolean"
          },
          "parameter_type": {
            "const": "column",
            "default": "column",
            "title": "Parameter Type",
            "type": "string"
          },
          "optional": {
            "default": false,
            "description": "Boolean denoting if the parameter is optional.",
            "title": "Optional",
            "type": "boolean"
          }
        },
        "required": [
          "parameter_key",
          "friendly_name",
          "description",
          "source_dataset_parameter_key"
        ],
        "title": "MetricsColumnParameterSchema",
        "type": "object"
      },
      "MetricsDatasetParameterSchema": {
        "properties": {
          "parameter_key": {
            "description": "Name of the parameter.",
            "title": "Parameter Key",
            "type": "string"
          },
          "friendly_name": {
            "description": "User facing name of the parameter.",
            "title": "Friendly Name",
            "type": "string"
          },
          "description": {
            "description": "Description of the parameter.",
            "title": "Description",
            "type": "string"
          },
          "parameter_type": {
            "const": "dataset",
            "default": "dataset",
            "title": "Parameter Type",
            "type": "string"
          },
          "model_problem_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModelProblemType"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Model problem type of the parameter. If not set, any model problem type is allowed."
          },
          "optional": {
            "default": false,
            "description": "Boolean denoting if the parameter is optional.",
            "title": "Optional",
            "type": "boolean"
          }
        },
        "required": [
          "parameter_key",
          "friendly_name",
          "description"
        ],
        "title": "MetricsDatasetParameterSchema",
        "type": "object"
      },
      "MetricsLiteralParameterSchema": {
        "properties": {
          "parameter_key": {
            "description": "Name of the parameter.",
            "title": "Parameter Key",
            "type": "string"
          },
          "friendly_name": {
            "description": "User facing name of the parameter.",
            "title": "Friendly Name",
            "type": "string"
          },
          "description": {
            "description": "Description of the parameter.",
            "title": "Description",
            "type": "string"
          },
          "parameter_type": {
            "const": "literal",
            "default": "literal",
            "title": "Parameter Type",
            "type": "string"
          },
          "parameter_dtype": {
            "$ref": "#/components/schemas/DType",
            "description": "Data type of the parameter."
          },
          "optional": {
            "default": false,
            "description": "Boolean denoting if the parameter is optional.",
            "title": "Optional",
            "type": "boolean"
          }
        },
        "required": [
          "parameter_key",
          "friendly_name",
          "description",
          "parameter_dtype"
        ],
        "title": "MetricsLiteralParameterSchema",
        "type": "object"
      },
      "MetricsParameterSchema": {
        "properties": {
          "parameter_key": {
            "description": "Name of the parameter.",
            "title": "Parameter Key",
            "type": "string"
          },
          "friendly_name": {
            "description": "User facing name of the parameter.",
            "title": "Friendly Name",
            "type": "string"
          },
          "description": {
            "description": "Description of the parameter.",
            "title": "Description",
            "type": "string"
          },
          "optional": {
            "default": false,
            "description": "Boolean denoting if the parameter is optional.",
            "title": "Optional",
            "type": "boolean"
          }
        },
        "required": [
          "parameter_key",
          "friendly_name",
          "description"
        ],
        "title": "MetricsParameterSchema",
        "type": "object"
      },
      "NestedSpanWithMetricsResponse": {
        "description": "Nested span response with children for building span trees",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "trace_id": {
            "title": "Trace Id",
            "type": "string"
          },
          "span_id": {
            "title": "Span Id",
            "type": "string"
          },
          "parent_span_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Parent Span Id"
          },
          "span_kind": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Span Kind"
          },
          "start_time": {
            "format": "date-time",
            "title": "Start Time",
            "type": "string"
          },
          "end_time": {
            "format": "date-time",
            "title": "End Time",
            "type": "string"
          },
          "task_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Task Id"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "raw_data": {
            "additionalProperties": true,
            "title": "Raw Data",
            "type": "object"
          },
          "system_prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "System Prompt"
          },
          "user_query": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "User Query"
          },
          "response": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Response"
          },
          "context": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Context"
          },
          "metric_results": {
            "default": [],
            "description": "List of metric results for this span",
            "items": {
              "$ref": "#/components/schemas/MetricResultResponse"
            },
            "title": "Metric Results",
            "type": "array"
          },
          "children": {
            "default": [],
            "description": "Child spans nested under this span",
            "items": {
              "$ref": "#/components/schemas/NestedSpanWithMetricsResponse"
            },
            "title": "Children",
            "type": "array"
          }
        },
        "required": [
          "id",
          "trace_id",
          "span_id",
          "start_time",
          "end_time",
          "created_at",
          "updated_at",
          "raw_data"
        ],
        "title": "NestedSpanWithMetricsResponse",
        "type": "object"
      },
      "NewApiKeyRequest": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Description of the API key. Optional.",
            "title": "Description"
          },
          "roles": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/APIKeysRolesEnum"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": [
              "VALIDATION-USER"
            ],
            "description": "Role that will be assigned to API key. Allowed values: [<APIKeysRolesEnum.DEFAULT_RULE_ADMIN: 'DEFAULT-RULE-ADMIN'>, <APIKeysRolesEnum.TASK_ADMIN: 'TASK-ADMIN'>, <APIKeysRolesEnum.VALIDATION_USER: 'VALIDATION-USER'>, <APIKeysRolesEnum.ORG_AUDITOR: 'ORG-AUDITOR'>, <APIKeysRolesEnum.ORG_ADMIN: 'ORG-ADMIN'>]",
            "title": "Roles"
          }
        },
        "title": "NewApiKeyRequest",
        "type": "object"
      },
      "NewMetricRequest": {
        "example1": {
          "metric_metadata": "This is a test metric metadata",
          "name": "My User Query Relevance",
          "type": "QueryRelevance"
        },
        "example2": {
          "config": {
            "relevance_threshold": 0.8,
            "use_llm_judge": false
          },
          "metric_metadata": "This is a test metric metadata",
          "name": "My User Query Relevance with Config",
          "type": "QueryRelevance"
        },
        "example3": {
          "config": {
            "use_llm_judge": true
          },
          "metric_metadata": "This is a test metric metadata",
          "name": "My Response Relevance",
          "type": "ResponseRelevance"
        },
        "properties": {
          "type": {
            "$ref": "#/components/schemas/MetricType",
            "description": "Type of the metric. It can only be one of QueryRelevance, ResponseRelevance, ToolSelection",
            "examples": [
              "UserQueryRelevance"
            ]
          },
          "name": {
            "description": "Name of metric",
            "examples": [
              "My User Query Relevance"
            ],
            "title": "Name",
            "type": "string"
          },
          "metric_metadata": {
            "description": "Additional metadata for the metric",
            "title": "Metric Metadata",
            "type": "string"
          },
          "config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RelevanceMetricConfig"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Configuration for the metric. Currently only applies to UserQueryRelevance and ResponseRelevance metric types."
          }
        },
        "required": [
          "type",
          "name",
          "metric_metadata"
        ],
        "title": "NewMetricRequest",
        "type": "object"
      },
      "NewRuleRequest": {
        "example1": {
          "description": "Sensitive Data Example with its required configuration",
          "summary": "Sensitive Data Example",
          "value": {
            "apply_to_prompt": true,
            "apply_to_response": false,
            "config": {
              "examples": [
                {
                  "example": "John has O negative blood group",
                  "result": true
                },
                {
                  "example": "Most of the people have A positive blood group",
                  "result": false
                }
              ],
              "hint": "specific individual's blood types"
            },
            "name": "Sensitive Data Rule",
            "type": "ModelSensitiveDataRule"
          }
        },
        "example2": {
          "description": "Regex Example with its required configuration. Be sure to properly encode requests using JSON libraries. For example, the regex provided encodes to a different string when encoded to account for escape characters.",
          "summary": "Regex Example",
          "value": {
            "apply_to_prompt": true,
            "apply_to_response": true,
            "config": {
              "regex_patterns": [
                "\\d{3}-\\d{2}-\\d{4}",
                "\\d{5}-\\d{6}-\\d{7}"
              ]
            },
            "name": "SSN Regex Rule",
            "type": "RegexRule"
          }
        },
        "example3": {
          "description": "Keywords Rule Example with its required configuration",
          "summary": "Keywords Rule Example",
          "value": {
            "apply_to_prompt": true,
            "apply_to_response": true,
            "config": {
              "keywords": [
                "Blocked_Keyword_1",
                "Blocked_Keyword_2"
              ]
            },
            "name": "Blocked Keywords Rule",
            "type": "KeywordRule"
          }
        },
        "example4": {
          "description": "Prompt Injection Rule Example, no configuration required",
          "summary": "Prompt Injection Rule Example",
          "value": {
            "apply_to_prompt": true,
            "apply_to_response": false,
            "name": "Prompt Injection Rule",
            "type": "PromptInjectionRule"
          }
        },
        "example5": {
          "description": "Hallucination Rule Example, no configuration required (This rule is deprecated. Use ModelHallucinationRuleV2 instead.)",
          "summary": "Hallucination Rule V1 Example (Deprecated)",
          "value": {
            "apply_to_prompt": false,
            "apply_to_response": true,
            "name": "Hallucination Rule",
            "type": "ModelHallucinationRule"
          }
        },
        "example6": {
          "description": "Hallucination Rule Example, no configuration required",
          "summary": "Hallucination Rule V2 Example",
          "value": {
            "apply_to_prompt": false,
            "apply_to_response": true,
            "name": "Hallucination Rule",
            "type": "ModelHallucinationRuleV2"
          }
        },
        "example7": {
          "description": "Hallucination Rule Example, no configuration required. This rule is in beta and must be enabled by the system administrator.",
          "summary": "Hallucination Rule V3 Example (Beta)",
          "value": {
            "apply_to_prompt": false,
            "apply_to_response": true,
            "name": "Hallucination Rule",
            "type": "ModelHallucinationRuleV3"
          }
        },
        "example8": {
          "description": "PII Rule Example, no configuration required. \"disabled_pii_entities\", \"confidence_threshold\", and \"allow_list\" accepted. Valid value for \"confidence_threshold\" is 0.0-1.0. Valid values for \"disabled_pii_entities\" are CREDIT_CARD,CRYPTO,DATE_TIME,EMAIL_ADDRESS,IBAN_CODE,IP_ADDRESS,NRP,LOCATION,PERSON,PHONE_NUMBER,MEDICAL_LICENSE,URL,US_BANK_NUMBER,US_DRIVER_LICENSE,US_ITIN,US_PASSPORT,US_SSN",
          "summary": "PII Rule Example",
          "value": {
            "apply_to_prompt": true,
            "apply_to_response": true,
            "config": {
              "allow_list": [
                "arthur.ai",
                "Arthur"
              ],
              "confidence_threshold": "0.5",
              "disabled_pii_entities": [
                "EMAIL_ADDRESS",
                "PHONE_NUMBER"
              ]
            },
            "name": "PII Rule",
            "type": "PIIDataRule"
          }
        },
        "example9": {
          "description": "Toxicity Rule Example, no configuration required. Threshold accepted",
          "summary": "Toxicity Rule Example",
          "value": {
            "apply_to_prompt": true,
            "apply_to_response": true,
            "config": {
              "threshold": 0.5
            },
            "name": "Toxicity Rule",
            "type": "ToxicityRule"
          }
        },
        "properties": {
          "name": {
            "description": "Name of the rule",
            "examples": [
              "SSN Regex Rule"
            ],
            "title": "Name",
            "type": "string"
          },
          "type": {
            "description": "Type of the rule. It can only be one of KeywordRule, RegexRule, ModelSensitiveDataRule, ModelHallucinationRule, ModelHallucinationRuleV2, PromptInjectionRule, PIIDataRule",
            "examples": [
              "RegexRule"
            ],
            "title": "Type",
            "type": "string"
          },
          "apply_to_prompt": {
            "description": "Boolean value to enable or disable the rule for llm prompt",
            "examples": [
              true
            ],
            "title": "Apply To Prompt",
            "type": "boolean"
          },
          "apply_to_response": {
            "description": "Boolean value to enable or disable the rule for llm response",
            "examples": [
              false
            ],
            "title": "Apply To Response",
            "type": "boolean"
          },
          "config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RegexConfig"
              },
              {
                "$ref": "#/components/schemas/KeywordsConfig"
              },
              {
                "$ref": "#/components/schemas/ToxicityConfig"
              },
              {
                "$ref": "#/components/schemas/PIIConfig"
              },
              {
                "$ref": "#/components/schemas/ExamplesConfig"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Config for the rule",
            "title": "Config"
          }
        },
        "required": [
          "name",
          "type",
          "apply_to_prompt",
          "apply_to_response"
        ],
        "title": "NewRuleRequest",
        "type": "object"
      },
      "NewTaskRequest": {
        "properties": {
          "name": {
            "description": "Name of the task.",
            "minLength": 1,
            "title": "Name",
            "type": "string"
          },
          "is_agentic": {
            "default": false,
            "description": "Whether the task is agentic or not.",
            "title": "Is Agentic",
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ],
        "title": "NewTaskRequest",
        "type": "object"
      },
      "NumericMetric": {
        "properties": {
          "name": {
            "description": "Name of the metric.",
            "title": "Name",
            "type": "string"
          },
          "numeric_series": {
            "description": "List of numeric time series to upload for the metric.",
            "items": {
              "$ref": "#/components/schemas/NumericTimeSeries"
            },
            "title": "Numeric Series",
            "type": "array"
          }
        },
        "required": [
          "name",
          "numeric_series"
        ],
        "title": "NumericMetric",
        "type": "object"
      },
      "NumericPoint": {
        "properties": {
          "timestamp": {
            "description": "Timestamp with timezone. Should be the timestamp of the start of the interval covered by 'value'.",
            "format": "date-time",
            "title": "Timestamp",
            "type": "string"
          },
          "value": {
            "description": "Floating point value for the metric.",
            "title": "Value",
            "type": "number"
          }
        },
        "required": [
          "timestamp",
          "value"
        ],
        "title": "NumericPoint",
        "type": "object"
      },
      "NumericTimeSeries": {
        "properties": {
          "dimensions": {
            "description": "List of dimensions for the series. If multiple dimensions are uploaded with the same key, the one that is kept is undefined.",
            "items": {
              "$ref": "#/components/schemas/Dimension"
            },
            "title": "Dimensions",
            "type": "array"
          },
          "values": {
            "description": "List of numeric time series points.",
            "items": {
              "$ref": "#/components/schemas/NumericPoint"
            },
            "title": "Values",
            "type": "array"
          }
        },
        "required": [
          "dimensions",
          "values"
        ],
        "title": "NumericTimeSeries",
        "type": "object"
      },
      "ObjectType": {
        "properties": {
          "object": {
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ScalarType"
                },
                {
                  "$ref": "#/components/schemas/ObjectType"
                },
                {
                  "$ref": "#/components/schemas/ListType"
                }
              ]
            },
            "title": "Object",
            "type": "object"
          }
        },
        "required": [
          "object"
        ],
        "title": "ObjectType",
        "type": "object"
      },
      "PIIConfig": {
        "additionalProperties": false,
        "example": {
          "allow_list": [
            "arthur.ai",
            "Arthur"
          ],
          "confidence_threshold": "0.5",
          "disabled_pii_entities": [
            "PERSON",
            "URL"
          ]
        },
        "properties": {
          "disabled_pii_entities": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional. List of PII entities to disable. Valid values are: CREDIT_CARD,CRYPTO,DATE_TIME,EMAIL_ADDRESS,IBAN_CODE,IP_ADDRESS,NRP,LOCATION,PERSON,PHONE_NUMBER,MEDICAL_LICENSE,URL,US_BANK_NUMBER,US_DRIVER_LICENSE,US_ITIN,US_PASSPORT,US_SSN",
            "title": "Disabled Pii Entities"
          },
          "confidence_threshold": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "default": 0,
            "deprecated": true,
            "description": "Optional. Float (0, 1) indicating the level of tolerable PII to consider the rule passed or failed. Min: 0 (less confident) Max: 1 (very confident). Default: 0",
            "title": "Confidence Threshold"
          },
          "allow_list": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional. List of strings to pass PII validation.",
            "title": "Allow List"
          }
        },
        "title": "PIIConfig",
        "type": "object"
      },
      "PIIDetailsResponse": {
        "properties": {
          "score": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Score"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Message"
          },
          "pii_entities": {
            "items": {
              "$ref": "#/components/schemas/PIIEntitySpanResponse"
            },
            "title": "Pii Entities",
            "type": "array"
          }
        },
        "required": [
          "pii_entities"
        ],
        "title": "PIIDetailsResponse",
        "type": "object"
      },
      "PIIEntitySpanResponse": {
        "properties": {
          "entity": {
            "$ref": "#/components/schemas/PIIEntityTypes"
          },
          "span": {
            "description": "The subtext within the input string that was identified as PII.",
            "title": "Span",
            "type": "string"
          },
          "confidence": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Float value representing the confidence score of a given PII identification.",
            "title": "Confidence"
          }
        },
        "required": [
          "entity",
          "span"
        ],
        "title": "PIIEntitySpanResponse",
        "type": "object"
      },
      "PaginationParameters": {
        "properties": {
          "sort": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaginationSortMethod"
              },
              {
                "type": "null"
              }
            ],
            "default": "desc"
          },
          "page_size": {
            "default": 10,
            "title": "Page Size",
            "type": "integer"
          },
          "page": {
            "default": 0,
            "title": "Page",
            "type": "integer"
          }
        },
        "title": "PaginationParameters",
        "type": "object"
      },
      "PasswordResetRequest": {
        "properties": {
          "password": {
            "title": "Password",
            "type": "string"
          }
        },
        "required": [
          "password"
        ],
        "title": "PasswordResetRequest",
        "type": "object"
      },
      "PromptValidationRequest": {
        "properties": {
          "prompt": {
            "description": "Prompt to be validated by GenAI Engine",
            "title": "Prompt",
            "type": "string"
          },
          "conversation_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The unique conversation ID this prompt belongs to. All prompts and responses from this         conversation can later be reconstructed with this ID.",
            "title": "Conversation Id"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The user ID this prompt belongs to",
            "title": "User Id"
          }
        },
        "required": [
          "prompt"
        ],
        "title": "PromptValidationRequest",
        "type": "object"
      },
      "PutDatasetSchema": {
        "properties": {
          "alias_mask": {
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "format": "uuid"
            },
            "title": "Alias Mask",
            "type": "object"
          },
          "columns": {
            "items": {
              "$ref": "#/components/schemas/DatasetColumn"
            },
            "title": "Columns",
            "type": "array"
          }
        },
        "required": [
          "alias_mask",
          "columns"
        ],
        "title": "PutDatasetSchema",
        "type": "object"
      },
      "QueryFeedbackResponse": {
        "example": {
          "feedback": [
            {
              "created_at": "2024-06-06T06:37:46.123-04:00",
              "id": "90f18c69-d793-4913-9bde-a0c7f3643de0",
              "inference_id": "81437d71-9557-4611-981b-9283d1c98643",
              "reason": "good reason",
              "score": "0",
              "target": "context",
              "updated_at": "2024-06-06T06:37:46.123-04:00",
              "user_id": "user_1"
            },
            {
              "created_at": "2023-05-05T05:26:35.987-04:00",
              "id": "248381c2-543b-4de0-98cd-d7511fee6241",
              "inference_id": "bcbc7ca0-4cfc-4f67-9cf8-26cb2291ba33",
              "reason": "some reason",
              "score": "1",
              "target": "response_results",
              "updated_at": "2023-05-05T05:26:35.987-04:00",
              "user_id": "user_2"
            }
          ],
          "page": 1,
          "page_size": 10,
          "total_count": 2,
          "total_pages": 1
        },
        "properties": {
          "feedback": {
            "description": "List of inferences matching the search filters. Length is less than or equal to page_size parameter",
            "items": {
              "$ref": "#/components/schemas/InferenceFeedbackResponse"
            },
            "title": "Feedback",
            "type": "array"
          },
          "page": {
            "description": "The current page number",
            "title": "Page",
            "type": "integer"
          },
          "page_size": {
            "description": "The number of feedback items per page",
            "title": "Page Size",
            "type": "integer"
          },
          "total_pages": {
            "description": "The total number of pages",
            "title": "Total Pages",
            "type": "integer"
          },
          "total_count": {
            "description": "The total number of feedback items matching the query parameters",
            "title": "Total Count",
            "type": "integer"
          }
        },
        "required": [
          "feedback",
          "page",
          "page_size",
          "total_pages",
          "total_count"
        ],
        "title": "QueryFeedbackResponse",
        "type": "object"
      },
      "QueryInferencesResponse": {
        "example": {
          "count": 1,
          "inferences": [
            {
              "conversation_id": "957df309-c907-4b77-abe5-15dd00c08112",
              "created_at": 1723204737120,
              "id": "957df309-c907-4b77-abe5-15dd00c081f7",
              "inference_feedback": [
                {
                  "created_at": "2024-08-09T12:08:34.847381",
                  "id": "0d602e5c-4ae6-4fc9-a610-68a1d8928ad7",
                  "inference_id": "957df309-c907-4b77-abe5-15dd00c081f7",
                  "reason": "Perfect answer.",
                  "score": 100,
                  "target": "context",
                  "updated_at": "2024-08-09T12:08:34.847386",
                  "user_id": "957df309-2137-4b77-abe5-15dd00c081f8"
                }
              ],
              "inference_prompt": {
                "created_at": 1723204737121,
                "id": "834f7ebd-cd6b-4691-9473-8bc350f8922c",
                "inference_id": "957df309-c907-4b77-abe5-15dd00c081f7",
                "message": "How many stars are in the solar system?",
                "prompt_rule_results": [
                  {
                    "details": null,
                    "id": "bc599a56-2e31-4cb7-910d-9e5ed6455db2",
                    "latency_ms": 73,
                    "name": "My_PII_Rule",
                    "result": "Pass",
                    "rule_type": "PIIDataRule",
                    "scope": "default"
                  }
                ],
                "result": "Pass",
                "tokens": 100,
                "updated_at": 1723204737121
              },
              "inference_response": {
                "context": "Solar system contains one star.",
                "created_at": 1723204786599,
                "id": "ec765a75-1479-4938-8e1c-6334b7deb8ce",
                "inference_id": "957df309-c907-4b77-abe5-15dd00c081f7",
                "message": "There is one star in solar system.",
                "response_rule_results": [
                  {
                    "details": null,
                    "id": "a45267c5-96d9-4de2-a871-debf2c8fdb86",
                    "latency_ms": 107,
                    "name": "My_another_PII_Rule",
                    "result": "Pass",
                    "rule_type": "PIIDataRule",
                    "scope": "default"
                  },
                  {
                    "details": {
                      "claims": [
                        {
                          "claim": "There is one star in solar system.",
                          "order_number": 0,
                          "reason": "No hallucination detected!",
                          "valid": true
                        }
                      ],
                      "message": "All claims were supported by the context!",
                      "pii_entities": [],
                      "pii_results": [],
                      "score": true,
                      "toxicity_score": null
                    },
                    "id": "92b7b46e-eaf2-4226-82d4-be12ceb3e4b7",
                    "latency_ms": 700,
                    "name": "My_Hallucination_Rule",
                    "result": "Pass",
                    "rule_type": "ModelHallucinationRuleV2",
                    "scope": "default"
                  }
                ],
                "result": "Pass",
                "tokens": 100,
                "updated_at": 1723204786599
              },
              "result": "Pass",
              "task_id": "957df309-c907-4b77-abe5-15dd00c081f8",
              "task_name": "My task name",
              "updated_at": 1723204787050,
              "user_id": "957df309-2137-4b77-abe5-15dd00c081f8"
            }
          ]
        },
        "properties": {
          "count": {
            "description": "The total number of inferences matching the query parameters",
            "title": "Count",
            "type": "integer"
          },
          "inferences": {
            "description": "List of inferences matching the search filters. Length is less than or equal to page_size parameter",
            "items": {
              "$ref": "#/components/schemas/ExternalInference"
            },
            "title": "Inferences",
            "type": "array"
          }
        },
        "required": [
          "count",
          "inferences"
        ],
        "title": "QueryInferencesResponse",
        "type": "object"
      },
      "QueryRelevanceMetric": {
        "description": "Inherits from RelevanceMetric. This class is left empty so that the openapi response schema remains the same as before, but we have a single source of truth for the relevance metric details.",
        "properties": {
          "bert_f_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Bert F Score"
          },
          "reranker_relevance_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Reranker Relevance Score"
          },
          "llm_relevance_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Llm Relevance Score"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Reason"
          },
          "refinement": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Refinement"
          }
        },
        "title": "QueryRelevanceMetric",
        "type": "object"
      },
      "QuerySpansResponse": {
        "properties": {
          "count": {
            "description": "The total number of spans matching the query parameters",
            "title": "Count",
            "type": "integer"
          },
          "spans": {
            "description": "List of spans matching the search filters",
            "items": {
              "$ref": "#/components/schemas/SpanResponse"
            },
            "title": "Spans",
            "type": "array"
          }
        },
        "required": [
          "count",
          "spans"
        ],
        "title": "QuerySpansResponse",
        "type": "object"
      },
      "QueryTracesWithMetricsResponse": {
        "description": "New response format that groups spans into traces with nested structure",
        "properties": {
          "count": {
            "description": "The total number of spans matching the query parameters",
            "title": "Count",
            "type": "integer"
          },
          "traces": {
            "description": "List of traces containing nested spans matching the search filters",
            "items": {
              "$ref": "#/components/schemas/TraceResponse"
            },
            "title": "Traces",
            "type": "array"
          }
        },
        "required": [
          "count",
          "traces"
        ],
        "title": "QueryTracesWithMetricsResponse",
        "type": "object"
      },
      "RegenerateTaskValidationKeyJobSpec": {
        "properties": {
          "job_type": {
            "const": "regenerate_validation_key",
            "default": "regenerate_validation_key",
            "title": "Job Type",
            "type": "string"
          },
          "scope_model_id": {
            "description": "The ID of the model to regenerate the validation key for.",
            "format": "uuid",
            "title": "Scope Model Id",
            "type": "string"
          }
        },
        "required": [
          "scope_model_id"
        ],
        "title": "RegenerateTaskValidationKeyJobSpec",
        "type": "object"
      },
      "RegexConfig": {
        "additionalProperties": false,
        "example": {
          "regex_patterns": [
            "\\d{3}-\\d{2}-\\d{4}",
            "\\d{5}-\\d{6}-\\d{7}"
          ]
        },
        "properties": {
          "regex_patterns": {
            "description": "List of Regex patterns to be used for validation. Be sure to encode requests in JSON and account for escape characters.",
            "items": {
              "type": "string"
            },
            "title": "Regex Patterns",
            "type": "array"
          }
        },
        "required": [
          "regex_patterns"
        ],
        "title": "RegexConfig",
        "type": "object"
      },
      "RegexDetailsResponse": {
        "additionalProperties": false,
        "properties": {
          "score": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Score"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Message"
          },
          "regex_matches": {
            "default": [],
            "description": "Each string in this list corresponds to a matching span from the input text that matches the configured regex rule.",
            "items": {
              "$ref": "#/components/schemas/RegexSpanResponse"
            },
            "title": "Regex Matches",
            "type": "array"
          }
        },
        "title": "RegexDetailsResponse",
        "type": "object"
      },
      "RegexSpanResponse": {
        "properties": {
          "matching_text": {
            "description": "The subtext within the input string that matched the regex rule.",
            "title": "Matching Text",
            "type": "string"
          },
          "pattern": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Pattern that yielded the match.",
            "title": "Pattern"
          }
        },
        "required": [
          "matching_text"
        ],
        "title": "RegexSpanResponse",
        "type": "object"
      },
      "RelevanceMetric": {
        "properties": {
          "bert_f_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Bert F Score"
          },
          "reranker_relevance_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Reranker Relevance Score"
          },
          "llm_relevance_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Llm Relevance Score"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Reason"
          },
          "refinement": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Refinement"
          }
        },
        "title": "RelevanceMetric",
        "type": "object"
      },
      "RelevanceMetricConfig": {
        "description": "Configuration for relevance metrics including QueryRelevance and ResponseRelevance",
        "properties": {
          "relevance_threshold": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Threshold for determining relevance when not using LLM judge",
            "title": "Relevance Threshold"
          },
          "use_llm_judge": {
            "default": true,
            "description": "Whether to use LLM as a judge for relevance scoring",
            "title": "Use Llm Judge",
            "type": "boolean"
          }
        },
        "title": "RelevanceMetricConfig",
        "type": "object"
      },
      "ReportedCustomAggregation": {
        "properties": {
          "metric_name": {
            "description": "Name of the reported aggregation metric.",
            "title": "Metric Name",
            "type": "string"
          },
          "description": {
            "description": "Description of the reported aggregation metric and what it aggregates.",
            "title": "Description",
            "type": "string"
          },
          "value_column": {
            "description": "Name of the column returned from the SQL query holding the metric value.",
            "title": "Value Column",
            "type": "string"
          },
          "timestamp_column": {
            "description": "Name of the column returned from the SQL query holding the timestamp buckets.",
            "title": "Timestamp Column",
            "type": "string"
          },
          "metric_kind": {
            "$ref": "#/components/schemas/AggregationMetricType",
            "description": "Return type of the reported aggregation metric value."
          },
          "dimension_columns": {
            "description": "Name of any dimension columns returned from the SQL query. Max length is 1.",
            "items": {
              "type": "string"
            },
            "title": "Dimension Columns",
            "type": "array"
          }
        },
        "required": [
          "metric_name",
          "description",
          "value_column",
          "timestamp_column",
          "metric_kind",
          "dimension_columns"
        ],
        "title": "ReportedCustomAggregation",
        "type": "object"
      },
      "ResponseRelevanceMetric": {
        "description": "Inherits from RelevanceMetric. This class is left empty so that the openapi response schema remains the same as before, but we have a single source of truth for the relevance metric details.",
        "properties": {
          "bert_f_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Bert F Score"
          },
          "reranker_relevance_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Reranker Relevance Score"
          },
          "llm_relevance_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Llm Relevance Score"
          },
          "reason": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Reason"
          },
          "refinement": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Refinement"
          }
        },
        "title": "ResponseRelevanceMetric",
        "type": "object"
      },
      "ResponseValidationRequest": {
        "properties": {
          "response": {
            "description": "LLM Response to be validated by GenAI Engine",
            "title": "Response",
            "type": "string"
          },
          "context": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Optional data provided as context for the validation.",
            "title": "Context"
          }
        },
        "required": [
          "response"
        ],
        "title": "ResponseValidationRequest",
        "type": "object"
      },
      "RuleResponse": {
        "properties": {
          "id": {
            "description": "ID of the Rule",
            "title": "Id",
            "type": "string"
          },
          "name": {
            "description": "Name of the Rule",
            "title": "Name",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/RuleType",
            "description": "Type of Rule"
          },
          "apply_to_prompt": {
            "description": "Rule applies to prompt",
            "title": "Apply To Prompt",
            "type": "boolean"
          },
          "apply_to_response": {
            "description": "Rule applies to response",
            "title": "Apply To Response",
            "type": "boolean"
          },
          "enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Rule is enabled for the task",
            "title": "Enabled"
          },
          "scope": {
            "$ref": "#/components/schemas/RuleScope",
            "description": "Scope of the rule. The rule can be set at default level or task level."
          },
          "created_at": {
            "description": "Time the rule was created in unix milliseconds",
            "title": "Created At",
            "type": "integer"
          },
          "updated_at": {
            "description": "Time the rule was updated in unix milliseconds",
            "title": "Updated At",
            "type": "integer"
          },
          "config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/KeywordsConfig"
              },
              {
                "$ref": "#/components/schemas/RegexConfig"
              },
              {
                "$ref": "#/components/schemas/ExamplesConfig"
              },
              {
                "$ref": "#/components/schemas/ToxicityConfig"
              },
              {
                "$ref": "#/components/schemas/PIIConfig"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Config of the rule",
            "title": "Config"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "apply_to_prompt",
          "apply_to_response",
          "scope",
          "created_at",
          "updated_at"
        ],
        "title": "RuleResponse",
        "type": "object"
      },
      "ScalarType": {
        "properties": {
          "dtype": {
            "$ref": "#/components/schemas/DType"
          }
        },
        "required": [
          "dtype"
        ],
        "title": "ScalarType",
        "type": "object"
      },
      "SearchRulesRequest": {
        "properties": {
          "rule_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "List of rule IDs to search for.",
            "title": "Rule Ids"
          },
          "rule_scopes": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/RuleScope"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "List of rule scopes to search for.",
            "title": "Rule Scopes"
          },
          "prompt_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Include or exclude prompt-enabled rules.",
            "title": "Prompt Enabled"
          },
          "response_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Include or exclude response-enabled rules.",
            "title": "Response Enabled"
          },
          "rule_types": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/RuleType"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "List of rule types to search for.",
            "title": "Rule Types"
          }
        },
        "title": "SearchRulesRequest",
        "type": "object"
      },
      "SearchRulesResponse": {
        "properties": {
          "count": {
            "description": "The total number of rules matching the parameters",
            "title": "Count",
            "type": "integer"
          },
          "rules": {
            "description": "List of rules matching the search filters. Length is less than or equal to page_size parameter",
            "items": {
              "$ref": "#/components/schemas/RuleResponse"
            },
            "title": "Rules",
            "type": "array"
          }
        },
        "required": [
          "count",
          "rules"
        ],
        "title": "SearchRulesResponse",
        "type": "object"
      },
      "SearchTasksRequest": {
        "properties": {
          "task_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "List of tasks to query for.",
            "title": "Task Ids"
          },
          "task_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Task name substring search string.",
            "title": "Task Name"
          },
          "is_agentic": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Filter tasks by agentic status. If not provided, returns both agentic and non-agentic tasks.",
            "title": "Is Agentic"
          }
        },
        "title": "SearchTasksRequest",
        "type": "object"
      },
      "SearchTasksResponse": {
        "properties": {
          "count": {
            "description": "The total number of tasks matching the parameters",
            "title": "Count",
            "type": "integer"
          },
          "tasks": {
            "description": "List of tasks matching the search filters. Length is less than or equal to page_size parameter",
            "items": {
              "$ref": "#/components/schemas/TaskResponse"
            },
            "title": "Tasks",
            "type": "array"
          }
        },
        "required": [
          "count",
          "tasks"
        ],
        "title": "SearchTasksResponse",
        "type": "object"
      },
      "SketchMetric": {
        "properties": {
          "name": {
            "description": "Name of the metric.",
            "title": "Name",
            "type": "string"
          },
          "sketch_series": {
            "description": "List of sketch-based time series to upload for the metric.",
            "items": {
              "$ref": "#/components/schemas/SketchTimeSeries"
            },
            "title": "Sketch Series",
            "type": "array"
          }
        },
        "required": [
          "name",
          "sketch_series"
        ],
        "title": "SketchMetric",
        "type": "object"
      },
      "SketchPoint": {
        "properties": {
          "timestamp": {
            "description": "Timestamp with timezone. Should be the timestamp of the start of the interval covered by 'value'.",
            "format": "date-time",
            "title": "Timestamp",
            "type": "string"
          },
          "value": {
            "description": "Base64-encoded string representation of a sketch.",
            "title": "Value",
            "type": "string"
          }
        },
        "required": [
          "timestamp",
          "value"
        ],
        "title": "SketchPoint",
        "type": "object"
      },
      "SketchTimeSeries": {
        "properties": {
          "dimensions": {
            "description": "List of dimensions for the series. If multiple dimensions are uploaded with the same key, the one that is kept is undefined.",
            "items": {
              "$ref": "#/components/schemas/Dimension"
            },
            "title": "Dimensions",
            "type": "array"
          },
          "values": {
            "description": "List of sketch-based time series points.",
            "items": {
              "$ref": "#/components/schemas/SketchPoint"
            },
            "title": "Values",
            "type": "array"
          }
        },
        "required": [
          "dimensions",
          "values"
        ],
        "title": "SketchTimeSeries",
        "type": "object"
      },
      "SpanResponse": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "trace_id": {
            "title": "Trace Id",
            "type": "string"
          },
          "span_id": {
            "title": "Span Id",
            "type": "string"
          },
          "parent_span_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Parent Span Id"
          },
          "span_kind": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Span Kind"
          },
          "start_time": {
            "format": "date-time",
            "title": "Start Time",
            "type": "string"
          },
          "end_time": {
            "format": "date-time",
            "title": "End Time",
            "type": "string"
          },
          "task_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Task Id"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "raw_data": {
            "additionalProperties": true,
            "title": "Raw Data",
            "type": "object"
          },
          "system_prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "System Prompt"
          },
          "user_query": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "User Query"
          },
          "response": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Response"
          },
          "context": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Context"
          }
        },
        "required": [
          "id",
          "trace_id",
          "span_id",
          "start_time",
          "end_time",
          "created_at",
          "updated_at",
          "raw_data"
        ],
        "title": "SpanResponse",
        "type": "object"
      },
      "SpanWithMetricsResponse": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "trace_id": {
            "title": "Trace Id",
            "type": "string"
          },
          "span_id": {
            "title": "Span Id",
            "type": "string"
          },
          "parent_span_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Parent Span Id"
          },
          "span_kind": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Span Kind"
          },
          "start_time": {
            "format": "date-time",
            "title": "Start Time",
            "type": "string"
          },
          "end_time": {
            "format": "date-time",
            "title": "End Time",
            "type": "string"
          },
          "task_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Task Id"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "raw_data": {
            "additionalProperties": true,
            "title": "Raw Data",
            "type": "object"
          },
          "system_prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "System Prompt"
          },
          "user_query": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "User Query"
          },
          "response": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Response"
          },
          "context": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Context"
          },
          "metric_results": {
            "default": [],
            "description": "List of metric results for this span",
            "items": {
              "$ref": "#/components/schemas/MetricResultResponse"
            },
            "title": "Metric Results",
            "type": "array"
          }
        },
        "required": [
          "id",
          "trace_id",
          "span_id",
          "start_time",
          "end_time",
          "created_at",
          "updated_at",
          "raw_data"
        ],
        "title": "SpanWithMetricsResponse",
        "type": "object"
      },
      "SystemMetric": {
        "properties": {
          "event_kind": {
            "$ref": "#/components/schemas/SystemMetricEventKind",
            "description": "Kind of the system metric event."
          },
          "timestamp": {
            "description": "Timezone-aware timestamp of the system metric event.",
            "format": "date-time",
            "title": "Timestamp",
            "type": "string"
          },
          "dimensions": {
            "description": "List of dimensions for the systems metric. If multiple dimensions are uploaded with the same key, the one that is kept is undefined.",
            "items": {
              "$ref": "#/components/schemas/Dimension"
            },
            "title": "Dimensions",
            "type": "array"
          }
        },
        "required": [
          "event_kind",
          "timestamp",
          "dimensions"
        ],
        "title": "SystemMetric",
        "type": "object"
      },
      "TaskResponse": {
        "properties": {
          "id": {
            "description": " ID of the task",
            "title": "Id",
            "type": "string"
          },
          "name": {
            "description": "Name of the task",
            "title": "Name",
            "type": "string"
          },
          "created_at": {
            "description": "Time the task was created in unix milliseconds",
            "title": "Created At",
            "type": "integer"
          },
          "updated_at": {
            "description": "Time the task was created in unix milliseconds",
            "title": "Updated At",
            "type": "integer"
          },
          "is_agentic": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "Whether the task is agentic or not",
            "title": "Is Agentic"
          },
          "rules": {
            "description": "List of all the rules for the task.",
            "items": {
              "$ref": "#/components/schemas/RuleResponse"
            },
            "title": "Rules",
            "type": "array"
          },
          "metrics": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/MetricResponse"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "List of all the metrics for the task.",
            "title": "Metrics"
          }
        },
        "required": [
          "id",
          "name",
          "created_at",
          "updated_at",
          "rules"
        ],
        "title": "TaskResponse",
        "type": "object"
      },
      "TokenUsageCount": {
        "properties": {
          "inference": {
            "description": "Number of inference tokens sent to Arthur.",
            "title": "Inference",
            "type": "integer"
          },
          "eval_prompt": {
            "description": "Number of Prompt tokens incurred by Arthur rules.",
            "title": "Eval Prompt",
            "type": "integer"
          },
          "eval_completion": {
            "description": "Number of Completion tokens incurred by Arthur rules.",
            "title": "Eval Completion",
            "type": "integer"
          },
          "user_input": {
            "deprecated": true,
            "description": "Number of user input tokens sent to Arthur. This field is deprecated and will be removed in the future. Use inference instead.",
            "title": "User Input",
            "type": "integer"
          },
          "prompt": {
            "deprecated": true,
            "description": "Number of Prompt tokens incurred by Arthur rules. This field is deprecated and will be removed in the future. Use eval_prompt instead.",
            "title": "Prompt",
            "type": "integer"
          },
          "completion": {
            "deprecated": true,
            "description": "Number of Completion tokens incurred by Arthur rules. This field is deprecated and will be removed in the future. Use eval_completion instead.",
            "title": "Completion",
            "type": "integer"
          }
        },
        "required": [
          "inference",
          "eval_prompt",
          "eval_completion",
          "user_input",
          "prompt",
          "completion"
        ],
        "title": "TokenUsageCount",
        "type": "object"
      },
      "TokenUsageResponse": {
        "properties": {
          "rule_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Rule Type"
          },
          "task_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Task Id"
          },
          "count": {
            "$ref": "#/components/schemas/TokenUsageCount"
          }
        },
        "required": [
          "count"
        ],
        "title": "TokenUsageResponse",
        "type": "object"
      },
      "ToxicityConfig": {
        "additionalProperties": false,
        "example": {
          "threshold": 0.5
        },
        "properties": {
          "threshold": {
            "default": 0.5,
            "description": "Optional. Float (0, 1) indicating the level of tolerable toxicity to consider the rule passed or failed. Min: 0 (no toxic language) Max: 1 (very toxic language). Default: 0.5",
            "title": "Threshold",
            "type": "number"
          }
        },
        "title": "ToxicityConfig",
        "type": "object"
      },
      "ToxicityDetailsResponse": {
        "additionalProperties": false,
        "properties": {
          "score": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Score"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Message"
          },
          "toxicity_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Toxicity Score"
          },
          "toxicity_violation_type": {
            "$ref": "#/components/schemas/ToxicityViolationType"
          }
        },
        "required": [
          "toxicity_violation_type"
        ],
        "title": "ToxicityDetailsResponse",
        "type": "object"
      },
      "TraceResponse": {
        "description": "Response model for a single trace containing nested spans",
        "properties": {
          "trace_id": {
            "description": "ID of the trace",
            "title": "Trace Id",
            "type": "string"
          },
          "start_time": {
            "description": "Start time of the earliest span in this trace",
            "format": "date-time",
            "title": "Start Time",
            "type": "string"
          },
          "end_time": {
            "description": "End time of the latest span in this trace",
            "format": "date-time",
            "title": "End Time",
            "type": "string"
          },
          "root_spans": {
            "default": [],
            "description": "Root spans (spans with no parent) in this trace, with children nested",
            "items": {
              "$ref": "#/components/schemas/NestedSpanWithMetricsResponse"
            },
            "title": "Root Spans",
            "type": "array"
          }
        },
        "required": [
          "trace_id",
          "start_time",
          "end_time"
        ],
        "title": "TraceResponse",
        "type": "object"
      },
      "Type": {
        "properties": {},
        "title": "Type",
        "type": "object"
      },
      "UpdateMetricRequest": {
        "properties": {
          "enabled": {
            "description": "Boolean value to enable or disable the metric. ",
            "title": "Enabled",
            "type": "boolean"
          }
        },
        "required": [
          "enabled"
        ],
        "title": "UpdateMetricRequest",
        "type": "object"
      },
      "UpdateModelTaskRulesJobSpec": {
        "properties": {
          "job_type": {
            "const": "update_model_task_rules",
            "default": "update_model_task_rules",
            "title": "Job Type",
            "type": "string"
          },
          "scope_model_id": {
            "description": "The id of the model to update the task rules.",
            "format": "uuid",
            "title": "Scope Model Id",
            "type": "string"
          },
          "rules_to_enable": {
            "description": "The list of rule IDs to enable on the task.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Rules To Enable",
            "type": "array"
          },
          "rules_to_disable": {
            "description": "The list of rule IDs to disable on the task.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Rules To Disable",
            "type": "array"
          },
          "rules_to_archive": {
            "description": "The list of rule IDs to archive on the task.",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "Rules To Archive",
            "type": "array"
          },
          "rules_to_add": {
            "description": "The new rules to add to the task.",
            "items": {
              "$ref": "#/components/schemas/NewRuleRequest"
            },
            "title": "Rules To Add",
            "type": "array"
          }
        },
        "required": [
          "scope_model_id"
        ],
        "title": "UpdateModelTaskRulesJobSpec",
        "type": "object"
      },
      "UpdateRuleRequest": {
        "properties": {
          "enabled": {
            "description": "Boolean value to enable or disable the rule. ",
            "title": "Enabled",
            "type": "boolean"
          }
        },
        "required": [
          "enabled"
        ],
        "title": "UpdateRuleRequest",
        "type": "object"
      },
      "UserPermission": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/UserPermissionAction"
          },
          "resource": {
            "$ref": "#/components/schemas/UserPermissionResource"
          }
        },
        "required": [
          "action",
          "resource"
        ],
        "title": "UserPermission",
        "type": "object"
      },
      "UserResponse": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string"
          },
          "first_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "First Name"
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Last Name"
          },
          "roles": {
            "items": {
              "$ref": "#/components/schemas/AuthUserRole"
            },
            "title": "Roles",
            "type": "array"
          }
        },
        "required": [
          "id",
          "email",
          "roles"
        ],
        "title": "UserResponse",
        "type": "object"
      },
      "ValidationResult": {
        "example": {
          "inference_id": "4dd1fae1-34b9-4aec-8abe-fe7bf12af31d",
          "rule_results": [
            {
              "id": "90f18c69-d793-4913-9bde-a0c7f3643de0",
              "name": "PII Check",
              "result": "Pass"
            },
            {
              "id": "946c4a44-b367-4229-84d4-1a8e461cb132",
              "name": "Sensitive Data Check",
              "result": "Pass"
            }
          ]
        },
        "properties": {
          "inference_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "ID of the inference",
            "title": "Inference Id"
          },
          "rule_results": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ExternalRuleResult"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "List of rule results",
            "title": "Rule Results"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "description": "The user ID this prompt belongs to",
            "title": "User Id"
          }
        },
        "title": "ValidationResult",
        "type": "object"
      }
    }
  }
}